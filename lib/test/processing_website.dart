import 'dart:convert';
import 'dart:io';

const String rawApiNodesJson = r'''
  {"componentChunkName":"component---src-pages-reference-js","path":"/reference/","result":{"data":{"items":{"nodes":[{"name":"Array","childJson":{"name":"Array","brief":"An array is a list of data","category":"Data","subcategory":"Composite","type":"class"}},{"name":"ArrayList","childJson":{"name":"ArrayList","brief":"An <b>ArrayList</b> stores a variable number of objects","category":"Data","subcategory":"Composite","type":"class"}},{"name":"BufferedReader","childJson":{"name":"BufferedReader","brief":"A <b>BufferedReader</b> object is used to read files line-by-line as individual <b>String</b> objects","category":"input","subcategory":"files","type":"class"}},{"name":"FloatDict","childJson":{"name":"FloatDict","brief":"A simple table class to use a <b>String</b> as a lookup for a float\n           value","category":"data","subcategory":"composite","type":"class"}},{"name":"FloatList","childJson":{"name":"FloatList","brief":"Helper class for a list of floats","category":"data","subcategory":"composite","type":"class"}},{"name":"HALF_PI","childJson":{"name":"HALF_PI","brief":"HALF_PI is a mathematical constant with the value\n           1.57079632679489661923","category":"constants","subcategory":"","type":"other"}},{"name":"HashMap","childJson":{"name":"HashMap","brief":"A <b>HashMap</b> stores a collection of objects, each referenced by a key","category":"Data","subcategory":"Composite","type":"class"}},{"name":"IntDict","childJson":{"name":"IntDict","brief":"A simple class to use a <b>String</b> as a lookup for an int value","category":"data","subcategory":"composite","type":"class"}},{"name":"IntList","childJson":{"name":"IntList","brief":"Helper class for a list of ints","category":"data","subcategory":"composite","type":"class"}},{"name":"JSONArray","childJson":{"name":"JSONArray","brief":"A JSONArray is an ordered sequence of values","category":"data","subcategory":"composite","type":"class"}},{"name":"JSONObject","childJson":{"name":"JSONObject","brief":"A <b>JSONObject</b> is an unordered collection of name/value pairs","category":"data","subcategory":"composite","type":"class"}},{"name":"Object","childJson":{"name":"Object","brief":"Objects are instances of classes","category":"Data","subcategory":"Composite","type":"class"}},{"name":"PFont","childJson":{"name":"PFont","brief":"Grayscale bitmap font class used by Processing","category":"typography","subcategory":"","type":"class"}},{"name":"PGraphics","childJson":{"name":"PGraphics","brief":"Main graphics and rendering context, as well as the base API\n           implementation for processing \"core\"","category":"rendering","subcategory":"","type":"class"}},{"name":"PI","childJson":{"name":"PI","brief":"PI is a mathematical constant with the value\n           3.14159265358979323846","category":"constants","subcategory":"","type":"other"}},{"name":"PImage","childJson":{"name":"PImage","brief":"Datatype for storing images","category":"image","subcategory":"","type":"class"}},{"name":"PShader","childJson":{"name":"PShader","brief":"This class encapsulates a GLSL shader program, including a vertex\n           and a fragment shader","category":"rendering","subcategory":"shaders","type":"class"}},{"name":"PShape","childJson":{"name":"PShape","brief":"Datatype for storing shapes","category":"shape","subcategory":"","type":"class"}},{"name":"PVector","childJson":{"name":"PVector","brief":"A class to describe a two or three dimensional vector","category":"math","subcategory":"","type":"class"}},{"name":"PrintWriter","childJson":{"name":"PrintWriter","brief":"Allows characters to print to a text-output stream","category":"output","subcategory":"files","type":"class"}},{"name":"QUARTER_PI","childJson":{"name":"QUARTER_PI","brief":"QUARTER_PI is a mathematical constant with the value 0.7853982","category":"constants","subcategory":"","type":"other"}},{"name":"String","childJson":{"name":"String","brief":"A string is a sequence of characters","category":"Data","subcategory":"Composite","type":"class"}},{"name":"StringDict","childJson":{"name":"StringDict","brief":"A simple class to use a <b>String</b> as a lookup for an <b>String</b> value","category":"data","subcategory":"composite","type":"class"}},{"name":"StringList","childJson":{"name":"StringList","brief":"Helper class for a list of Strings","category":"data","subcategory":"composite","type":"class"}},{"name":"TAU","childJson":{"name":"TAU","brief":"An alias for <b>TWO_PI</b>","category":"constants","subcategory":"","type":"other"}},{"name":"TWO_PI","childJson":{"name":"TWO_PI","brief":"TWO_PI is a mathematical constant with the value 6.28318530717958647693","category":"constants","subcategory":"","type":"other"}},{"name":"Table","childJson":{"name":"Table","brief":"Generic class for handling tabular data, typically from a CSV, TSV,\n           or other sort of spreadsheet file","category":"data","subcategory":"composite","type":"class"}},{"name":"TableRow","childJson":{"name":"TableRow","brief":"Represents a single row of data values, stored in columns, from a <b>Table<b>","category":"data","subcategory":"composite","type":"class"}},{"name":"XML","childJson":{"name":"XML","brief":"This is the base class used for the Processing XML library,\n           representing a single node of an <b>XML</b> tree","category":"data","subcategory":"composite","type":"class"}},{"name":"abs_","childJson":{"name":"abs()","brief":"Calculates the absolute value (magnitude) of a number","category":"math","subcategory":"calculation","type":"function"}},{"name":"acos_","childJson":{"name":"acos()","brief":"The inverse of <b>cos()</b>, returns the arc cosine of a value","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"addassign","childJson":{"name":"+= (add assign)","brief":"Combines addition with assignment","category":"math","subcategory":"Operators","type":"function"}},{"name":"addition","childJson":{"name":"+ (addition)","brief":"Adds two values or concatenates string values","category":"math","subcategory":"Operators","type":"function"}},{"name":"alpha_","childJson":{"name":"alpha()","brief":"Extracts the alpha value from a color","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"ambientLight_","childJson":{"name":"ambientLight()","brief":"Adds an ambient light","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"ambient_","childJson":{"name":"ambient()","brief":"Sets the ambient reflectance for shapes drawn to the screen","category":"lights_camera","subcategory":"material properties","type":"function"}},{"name":"append_","childJson":{"name":"append()","brief":"Expands an array by one element and adds data to the new position","category":"data","subcategory":"array functions","type":"function"}},{"name":"applyMatrix_","childJson":{"name":"applyMatrix()","brief":"Multiplies the current matrix by the one specified through the\n parameters","category":"transform","subcategory":"","type":"function"}},{"name":"arc_","childJson":{"name":"arc()","brief":"Draws an arc in the display window","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"arrayCopy_","childJson":{"name":"arrayCopy()","brief":"Copies an array (or part of an array) to another array","category":"data","subcategory":"array functions","type":"function"}},{"name":"arrayaccess","childJson":{"name":"[] (array access)","brief":"The array access operator is used to specify a location within an array","category":"structure","subcategory":"","type":"function"}},{"name":"asin_","childJson":{"name":"asin()","brief":"The inverse of <b>sin()</b>, returns the arc sine of a value","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"assign","childJson":{"name":"= (assign)","brief":"Assigns a value to a variable","category":"structure","subcategory":"","type":"function"}},{"name":"atan2_","childJson":{"name":"atan2()","brief":"Calculates the angle (in radians) from a specified point to the\n coordinate origin as measured from the positive x-axis","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"atan_","childJson":{"name":"atan()","brief":"The inverse of <b>tan()</b>, returns the arc tangent of a value","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"background_","childJson":{"name":"background()","brief":"Sets the color used for the background of the Processing window","category":"color","subcategory":"setting","type":"function"}},{"name":"beginCamera_","childJson":{"name":"beginCamera()","brief":"The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n advanced customization of the camera space","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"beginContour_","childJson":{"name":"beginContour()","brief":"Begins recording vertices for the shape","category":"shape","subcategory":"vertex","type":"function"}},{"name":"beginRaw_","childJson":{"name":"beginRaw()","brief":"To create vectors from 3D data, use the <b>beginRaw()</b> and\n <b>endRaw()</b> commands","category":"output","subcategory":"files","type":"function"}},{"name":"beginRecord_","childJson":{"name":"beginRecord()","brief":"Opens a new file and all subsequent drawing functions are echoed\n           to this file as well as the display window","category":"output","subcategory":"files","type":"function"}},{"name":"beginShape_","childJson":{"name":"beginShape()","brief":"Using the <b>beginShape()</b> and <b>endShape()</b> functions allow\n           creating more complex forms","category":"shape","subcategory":"vertex","type":"function"}},{"name":"bezierDetail_","childJson":{"name":"bezierDetail()","brief":"Sets the resolution at which Beziers display","category":"shape","subcategory":"curves","type":"function"}},{"name":"bezierPoint_","childJson":{"name":"bezierPoint()","brief":"Evaluates the Bezier at point t for points a, b, c, d","category":"shape","subcategory":"curves","type":"function"}},{"name":"bezierTangent_","childJson":{"name":"bezierTangent()","brief":"Calculates the tangent of a point on a Bezier curve","category":"shape","subcategory":"curves","type":"function"}},{"name":"bezierVertex_","childJson":{"name":"bezierVertex()","brief":"Specifies vertex coordinates for Bezier curves","category":"shape","subcategory":"vertex","type":"function"}},{"name":"bezier_","childJson":{"name":"bezier()","brief":"Draws a Bezier curve on the screen","category":"shape","subcategory":"curves","type":"function"}},{"name":"binary_","childJson":{"name":"binary()","brief":"Converts an <b>int</b>, <b>byte</b>, <b>char</b>, or <b>color</b> to a\n <b>String</b> containing the equivalent binary notation","category":"data","subcategory":"conversion","type":"function"}},{"name":"bitwiseAND","childJson":{"name":"& (bitwise AND)","brief":"Compares each corresponding bit in the binary representation of the values","category":"math","subcategory":"Bitwise Operators","type":"function"}},{"name":"bitwiseOR","childJson":{"name":"| (bitwise OR)","brief":"Compares each corresponding bit in the binary representation of the values","category":"math","subcategory":"Bitwise Operators","type":"function"}},{"name":"blendMode_","childJson":{"name":"blendMode()","brief":"Blends the pixels in the display window according to a defined mode","category":"rendering","subcategory":"","type":"function"}},{"name":"blend_","childJson":{"name":"blend()","brief":"Copies a pixel or rectangle of pixels using different blending modes","category":"image","subcategory":"pixels","type":"function"}},{"name":"blue_","childJson":{"name":"blue()","brief":"Extracts the blue value from a color, scaled to match current\n           <b>colorMode()</b>","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"boolean","childJson":{"name":"boolean","brief":"Datatype for the Boolean values <b>true</b> and <b>false</b>","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"booleanconvert_","childJson":{"name":"boolean()","brief":"Converts an <b>int</b> or <b>String</b> to its boolean representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"box_","childJson":{"name":"box()","brief":"A box is an extruded <b>rectangle</b>","category":"shape","subcategory":"3d primitives","type":"function"}},{"name":"break","childJson":{"name":"break","brief":"Ends the execution of a structure such as <b>switch</b>, <b>for</b>, or <b>while</b> and jumps to the next statement after","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"brightness_","childJson":{"name":"brightness()","brief":"Extracts the brightness value from a color","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"byte","childJson":{"name":"byte","brief":"Datatype for bytes, 8 bits of information storing numerical values from 127 to -128","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"byteconvert_","childJson":{"name":"byte()","brief":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>double</b>, <b>float</b>, <b>int</b>, or <b>long</b>) to its byte representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"camera_","childJson":{"name":"camera()","brief":"Sets the position of the camera","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"case","childJson":{"name":"case","brief":"Denotes the different names to be evaluated with the parameter in the <b>switch</b> structure","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"catch","childJson":{"name":"catch","brief":"The <b>catch</b> keyword is used with <b>try</b> to handle exceptions","category":"structure","subcategory":"","type":"function"}},{"name":"ceil_","childJson":{"name":"ceil()","brief":"Calculates the closest int value that is greater than or equal to the\n value of the parameter","category":"math","subcategory":"calculation","type":"function"}},{"name":"char","childJson":{"name":"char","brief":"Datatype for characters, typographic symbols such as A, d, and $","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"charconvert_","childJson":{"name":"char()","brief":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>double</b>, <b>float</b>, <b>int</b>, or <b>long</b>) to its numeric character representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"circle_","childJson":{"name":"circle()","brief":"Draws a circle to the screen","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"class","childJson":{"name":"class","brief":"\rKeyword used to indicate the declaration of a class","category":"structure","subcategory":"","type":"function"}},{"name":"clear_","childJson":{"name":"clear()","brief":"Clears the pixels within a buffer","category":"color","subcategory":"setting","type":"function"}},{"name":"clip_","childJson":{"name":"clip()","brief":"Limits the rendering to the boundaries of a rectangle defined\n by the parameters","category":"rendering","subcategory":"","type":"function"}},{"name":"colorMode_","childJson":{"name":"colorMode()","brief":"Changes the way Processing interprets color data","category":"color","subcategory":"setting","type":"function"}},{"name":"color_","childJson":{"name":"color()","brief":"Creates colors for storing in variables of the <b>color</b>\n           datatype","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"color_datatype","childJson":{"name":"color","brief":"Datatype for storing color values","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"comma","childJson":{"name":", (comma)","brief":"Separates parameters in function calls and elements during assignment","category":"structure","subcategory":"","type":"function"}},{"name":"comment","childJson":{"name":"// (comment)","brief":"Explanatory notes embedded within the code","category":"structure","subcategory":"","type":"function"}},{"name":"concat_","childJson":{"name":"concat()","brief":"Concatenates two arrays","category":"data","subcategory":"array functions","type":"function"}},{"name":"conditional","childJson":{"name":"?: (conditional)","brief":"A shortcut for writing an <b>if</b> and <b>else</b> structure","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"constrain_","childJson":{"name":"constrain()","brief":"Constrains a value to not exceed a maximum and minimum value","category":"math","subcategory":"calculation","type":"function"}},{"name":"continue","childJson":{"name":"continue","brief":"When run inside of a <b>for</b> or <b>while</b>, it skips the remainder of the block and starts the next iteration","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"copy_","childJson":{"name":"copy()","brief":"Copies the entire image","category":"image","subcategory":"pixels","type":"function"}},{"name":"cos_","childJson":{"name":"cos()","brief":"Calculates the cosine of an angle","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"createFont_","childJson":{"name":"createFont()","brief":"Dynamically converts a font to the format used by Processing","category":"typography","subcategory":"loading & displaying","type":"function"}},{"name":"createGraphics_","childJson":{"name":"createGraphics()","brief":"Creates and returns a new <b>PGraphics</b> object of the types\n           P2D or P3D","category":"rendering","subcategory":"","type":"function"}},{"name":"createImage_","childJson":{"name":"createImage()","brief":"Creates a new <b>PImage</b> (the datatype for storing images)","category":"image","subcategory":"","type":"function"}},{"name":"createInput_","childJson":{"name":"createInput()","brief":"This is a function for advanced programmers to open a Java <b>InputStream</b>","category":"input","subcategory":"files","type":"function"}},{"name":"createOutput_","childJson":{"name":"createOutput()","brief":"Similar to <b>createInput()</b>, this creates a Java\n           <b>OutputStream</b> for a given filename or path","category":"output","subcategory":"files","type":"function"}},{"name":"createReader_","childJson":{"name":"createReader()","brief":"Creates a <b>BufferedReader</b> object that can be used to read\n           files line-by-line as individual <b>String</b> objects","category":"input","subcategory":"files","type":"function"}},{"name":"createShape_","childJson":{"name":"createShape()","brief":"The <b>createShape()</b> function is used to define a new shape","category":"shape","subcategory":"","type":"function"}},{"name":"createWriter_","childJson":{"name":"createWriter()","brief":"Creates a new file in the sketch folder, and a <b>PrintWriter</b> object\n to write to it","category":"output","subcategory":"files","type":"function"}},{"name":"curlybraces","childJson":{"name":"{} (curly braces)","brief":"Define the beginning and end of functions blocks and statement blocks such as the <b>for</b> and <b>if</b> structures","category":"structure","subcategory":"","type":"function"}},{"name":"cursor_","childJson":{"name":"cursor()","brief":"Sets the cursor to a predefined symbol, an image, or makes it\n           visible if already hidden","category":"environment","subcategory":"","type":"function"}},{"name":"curveDetail_","childJson":{"name":"curveDetail()","brief":"Sets the resolution at which curves display","category":"shape","subcategory":"curves","type":"function"}},{"name":"curvePoint_","childJson":{"name":"curvePoint()","brief":"Evaluates the curve at point t for points a, b, c, d","category":"shape","subcategory":"curves","type":"function"}},{"name":"curveTangent_","childJson":{"name":"curveTangent()","brief":"Calculates the tangent of a point on a curve","category":"shape","subcategory":"curves","type":"function"}},{"name":"curveTightness_","childJson":{"name":"curveTightness()","brief":"Modifies the quality of forms created with <b>curve()</b> and\n           <b>curveVertex()</b>","category":"shape","subcategory":"curves","type":"function"}},{"name":"curveVertex_","childJson":{"name":"curveVertex()","brief":"Specifies vertex coordinates for curves","category":"shape","subcategory":"vertex","type":"function"}},{"name":"curve_","childJson":{"name":"curve()","brief":"Draws a curved line on the screen","category":"shape","subcategory":"curves","type":"function"}},{"name":"day_","childJson":{"name":"day()","brief":"Returns the current day as a value from 1 - 31","category":"input","subcategory":"time date","type":"function"}},{"name":"decrement","childJson":{"name":"-- (decrement)","brief":"Substracts the value of an integer variable by 1","category":"math","subcategory":"Operators","type":"function"}},{"name":"default","childJson":{"name":"default","brief":"Keyword for defining the default condition of a <b>switch</b>","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"degrees_","childJson":{"name":"degrees()","brief":"Converts a radian measurement to its corresponding value in degrees","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"delay_","childJson":{"name":"delay()","brief":"The <b>delay()</b> function causes the program to halt for a specified time","category":"environment","subcategory":"","type":"function"}},{"name":"directionalLight_","childJson":{"name":"directionalLight()","brief":"Adds a directional light","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"displayDensity_","childJson":{"name":"displayDensity()","brief":"Returns \"2\" if the screen is high-density and \"1\" if not","category":"environment","subcategory":"","type":"function"}},{"name":"displayHeight","childJson":{"name":"displayHeight","brief":"Variable that stores the height of the computer screen","category":"environment","subcategory":"","type":"other"}},{"name":"displayWidth","childJson":{"name":"displayWidth","brief":"Variable that stores the width of the computer screen","category":"environment","subcategory":"","type":"other"}},{"name":"dist_","childJson":{"name":"dist()","brief":"Calculates the distance between two points","category":"math","subcategory":"calculation","type":"function"}},{"name":"divide","childJson":{"name":"/ (divide)","brief":"Divides the value of the first parameter by the value of the second parameter","category":"math","subcategory":"Operators","type":"function"}},{"name":"divideassign","childJson":{"name":"/= (divide assign)","brief":"Combines division with assignment","category":"math","subcategory":"Operators","type":"function"}},{"name":"doccomment","childJson":{"name":"/** */ (doc comment)","brief":"Explanatory notes embedded within the code","category":"structure","subcategory":"","type":"function"}},{"name":"dot","childJson":{"name":". (dot)","brief":"Provides access to an object's methods and data","category":"structure","subcategory":"","type":"function"}},{"name":"double","childJson":{"name":"double","brief":"Datatype for floating-point numbers larger than those that can be stored in a <b>float</b>","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"draw_","childJson":{"name":"draw()","brief":"Called directly after <b>setup()</b> and continuously executes the lines\n of code contained inside its block until the program is stopped or\n <b>noLoop()</b> is called","category":"structure","subcategory":"","type":"function"}},{"name":"ellipseMode_","childJson":{"name":"ellipseMode()","brief":"The origin of the ellipse is modified by the <b>ellipseMode()</b>\n           function","category":"shape","subcategory":"attributes","type":"function"}},{"name":"ellipse_","childJson":{"name":"ellipse()","brief":"Draws an ellipse (oval) in the display window","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"else","childJson":{"name":"else","brief":"Extends the <b>if</b> structure allowing the program to choose between two or more blocks of code","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"emissive_","childJson":{"name":"emissive()","brief":"Sets the emissive color of the material used for drawing shapes drawn to\n the screen","category":"lights_camera","subcategory":"material properties","type":"function"}},{"name":"endCamera_","childJson":{"name":"endCamera()","brief":"The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n advanced customization of the camera space","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"endContour_","childJson":{"name":"endContour()","brief":"Stops recording vertices for the shape","category":"shape","subcategory":"vertex","type":"function"}},{"name":"endRaw_","childJson":{"name":"endRaw()","brief":"Complement to <b>beginRaw()</b>; they must always be used together","category":"output","subcategory":"files","type":"function"}},{"name":"endRecord_","childJson":{"name":"endRecord()","brief":"Stops the recording process started by <b>beginRecord()</b> and closes\n the file","category":"output","subcategory":"files","type":"function"}},{"name":"endShape_","childJson":{"name":"endShape()","brief":"the companion to <b>beginShape()</b> and may only be called after <b>beginShape()</b>","category":"shape","subcategory":"vertex","type":"function"}},{"name":"equality","childJson":{"name":"== (equality)","brief":"Determines if two values are equivalent","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"exit_","childJson":{"name":"exit()","brief":"Quits/stops/exits the program","category":"structure","subcategory":"","type":"function"}},{"name":"exp_","childJson":{"name":"exp()","brief":"Returns Euler's number <i>e</i> (2.71828...) raised to the power of the\n <b>value</b> parameter","category":"math","subcategory":"calculation","type":"function"}},{"name":"expand_","childJson":{"name":"expand()","brief":"Increases the size of an array","category":"data","subcategory":"array functions","type":"function"}},{"name":"extends","childJson":{"name":"extends","brief":"Allows a new class to <em>inherit</em> the methods and data fields (variables and constants) from an existing class","category":"structure","subcategory":"","type":"function"}},{"name":"false","childJson":{"name":"false","brief":"Reserved word representing the logical value \"false\"","category":"structure","subcategory":"","type":"function"}},{"name":"fill_","childJson":{"name":"fill()","brief":"Sets the color used to fill shapes","category":"color","subcategory":"setting","type":"function"}},{"name":"filter_","childJson":{"name":"filter()","brief":"Converts the image to grayscale or black and white","category":"image","subcategory":"pixels","type":"function"}},{"name":"final","childJson":{"name":"final","brief":"Keyword used to state that a value, class, or method can't be changed","category":"structure","subcategory":"","type":"function"}},{"name":"float","childJson":{"name":"float","brief":"Data type for floating-point numbers, e","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"floatconvert_","childJson":{"name":"float()","brief":"Converts an <b>int</b> or <b>String</b> to its floating point representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"floor_","childJson":{"name":"floor()","brief":"Calculates the closest int value that is less than or equal to the value\n of the parameter","category":"math","subcategory":"calculation","type":"function"}},{"name":"focused","childJson":{"name":"focused","brief":"Confirms if a Processing program is \"focused\"","category":"environment","subcategory":"","type":"other"}},{"name":"for","childJson":{"name":"for","brief":"Controls a sequence of repetitions","category":"Control","subcategory":"Iteration","type":"function"}},{"name":"frameCount","childJson":{"name":"frameCount","brief":"The system variable that contains the number of frames\n displayed since the program started","category":"environment","subcategory":"","type":"other"}},{"name":"frameRate","childJson":{"name":"frameRate","brief":"The system variable that contains the approximate frame rate\n of the software as it executes","category":"environment","subcategory":"","type":"other"}},{"name":"frameRate_","childJson":{"name":"frameRate()","brief":"Specifies the number of frames to be displayed every second","category":"environment","subcategory":"","type":"function"}},{"name":"frustum_","childJson":{"name":"frustum()","brief":"Sets a perspective matrix defined through the parameters","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"fullScreen_","childJson":{"name":"fullScreen()","brief":"Opens a sketch using the full size of the computer's display","category":"environment","subcategory":"","type":"function"}},{"name":"green_","childJson":{"name":"green()","brief":"Extracts the green value from a color, scaled to match current\n           <b>colorMode()</b>","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"height","childJson":{"name":"height","brief":"System variable which stores the height of the display window","category":"environment","subcategory":"","type":"other"}},{"name":"hex_","childJson":{"name":"hex()","brief":"Converts a <b>byte</b>, <b>char</b>, <b>int</b>, or <b>color</b> to a <b>String</b> containing the\n           equivalent hexadecimal notation","category":"data","subcategory":"conversion","type":"function"}},{"name":"hint_","childJson":{"name":"hint()","brief":"This function is used to enable or disable special features that control how graphics are drawn","category":"Rendering","subcategory":"","type":"function"}},{"name":"hour_","childJson":{"name":"hour()","brief":"Returns the current hour as a value from 0 - 23","category":"input","subcategory":"time date","type":"function"}},{"name":"hue_","childJson":{"name":"hue()","brief":"Extracts the hue value from a color","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"if","childJson":{"name":"if","brief":"Allows the program to make a decision about which code to execute","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"imageMode_","childJson":{"name":"imageMode()","brief":"Modifies the location from which images draw","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"image_","childJson":{"name":"image()","brief":"Displays images to the screen","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"implements","childJson":{"name":"implements","brief":"Implements an <i>interface</i> or group of <i>interfaces</i>","category":"structure","subcategory":"","type":"function"}},{"name":"import","childJson":{"name":"import","brief":"The keyword <b>import</b> is used to load a library into a Processing sketch","category":"structure","subcategory":"","type":"function"}},{"name":"increment","childJson":{"name":"++ (increment)","brief":"Increases the value of an integer variable by 1","category":"math","subcategory":"Operators","type":"function"}},{"name":"inequality","childJson":{"name":"!= (inequality)","brief":"Determines if one expression is not equivalent to another","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"int","childJson":{"name":"int","brief":"Datatype for integers, numbers without a decimal point","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"intconvert_","childJson":{"name":"int()","brief":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>float</b>, <b>int</b>, or <b>long</b>) or String to its integer representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"join_","childJson":{"name":"join()","brief":"Combines an array of <b>Strings</b> into one <b>String</b>, each separated by the\n character(s) used for the <b>separator</b> parameter","category":"data","subcategory":"string_functions","type":"function"}},{"name":"key","childJson":{"name":"key","brief":"The system variable that always contains the value of the most\n recent key on the keyboard that was used (either pressed or released)","category":"input","subcategory":"keyboard","type":"other"}},{"name":"keyCode","childJson":{"name":"keyCode","brief":"Used to detect special keys such as the UP, DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT","category":"input","subcategory":"keyboard","type":"other"}},{"name":"keyPressed","childJson":{"name":"keyPressed","brief":"The boolean system variable that is <b>true</b> if any key\n is pressed and <b>false</b> if no keys are pressed","category":"input","subcategory":"keyboard","type":"other"}},{"name":"keyPressed_","childJson":{"name":"keyPressed()","brief":"Called once every time a key is pressed","category":"input","subcategory":"keyboard","type":"function"}},{"name":"keyReleased_","childJson":{"name":"keyReleased()","brief":"Called once every time a key is released","category":"input","subcategory":"keyboard","type":"function"}},{"name":"keyTyped_","childJson":{"name":"keyTyped()","brief":"Called once every time a key is pressed, but action keys such as\n           Ctrl, Shift, and Alt are ignored","category":"input","subcategory":"keyboard","type":"function"}},{"name":"launch_","childJson":{"name":"launch()","brief":"Attempts to open an application or file using your platform's\n           launcher","category":"input","subcategory":"files","type":"function"}},{"name":"leftshift","childJson":{"name":"<< (left shift)","brief":"Shifts bits to the left","category":"math","subcategory":"Bitwise Operators","type":"function"}},{"name":"lerpColor_","childJson":{"name":"lerpColor()","brief":"Calculates a <b>color</b> or <b>colors</b> between two <b>colors</b> at a specific\n           increment","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"lerp_","childJson":{"name":"lerp()","brief":"Calculates a number between two numbers at a specific increment","category":"math","subcategory":"calculation","type":"function"}},{"name":"lessthan","childJson":{"name":"< (less than)","brief":"Tests if the value on the left is smaller than the value on the right","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"lessthanorequalto","childJson":{"name":"<= (less than or equal to)","brief":"Tests if the value on the left is less than the value on the right or if the values are equivalent","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"lightFalloff_","childJson":{"name":"lightFalloff()","brief":"Sets the falloff rates for point lights, spot lights, and ambient\n           lights","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"lightSpecular_","childJson":{"name":"lightSpecular()","brief":"Sets the specular color for lights","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"lights_","childJson":{"name":"lights()","brief":"Sets the default ambient light, directional light, falloff, and specular\n values","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"line_","childJson":{"name":"line()","brief":"Draws a line (a direct path between two points) to the screen","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"loadBytes_","childJson":{"name":"loadBytes()","brief":"Reads the contents of a file or url and places it in a byte\n           array","category":"input","subcategory":"files","type":"function"}},{"name":"loadFont_","childJson":{"name":"loadFont()","brief":"Loads a font into a variable of type <b>PFont</b>","category":"typography","subcategory":"loading & displaying","type":"function"}},{"name":"loadImage_","childJson":{"name":"loadImage()","brief":"Loads an image into a variable of type <b>PImage</b>","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"loadJSONArray_","childJson":{"name":"loadJSONArray()","brief":"Takes a <b>String</b>, parses its contents, and returns a\n           <b>JSONArray</b>","category":"input","subcategory":"files","type":"function"}},{"name":"loadJSONObject_","childJson":{"name":"loadJSONObject()","brief":"Loads a JSON from the data folder or a URL, and returns a\n           <b>JSONObject</b>","category":"input","subcategory":"files","type":"function"}},{"name":"loadPixels_","childJson":{"name":"loadPixels()","brief":"Loads the pixel data for the display window into the\n           <b>pixels[]</b> array","category":"image","subcategory":"pixels","type":"function"}},{"name":"loadShader_","childJson":{"name":"loadShader()","brief":"Loads a shader into the <b>PShader</b> object","category":"rendering","subcategory":"shaders","type":"function"}},{"name":"loadShape_","childJson":{"name":"loadShape()","brief":"Loads geometry into a variable of type <b>PShape</b>","category":"shape","subcategory":"","type":"function"}},{"name":"loadStrings_","childJson":{"name":"loadStrings()","brief":"Reads the contents of a file or url and creates a <b>String</b> array of\n           its individual lines","category":"input","subcategory":"files","type":"function"}},{"name":"loadTable_","childJson":{"name":"loadTable()","brief":"Reads the contents of a file or URL and creates a <b>Table</b> object\n           with its values","category":"input","subcategory":"files","type":"function"}},{"name":"loadXML_","childJson":{"name":"loadXML()","brief":"Reads the contents of a file or URL and creates an <b>XML</b>\n object with its values","category":"input","subcategory":"files","type":"function"}},{"name":"log_","childJson":{"name":"log()","brief":"Calculates the natural logarithm (the base-<i>e</i> logarithm) of a\n number","category":"math","subcategory":"calculation","type":"function"}},{"name":"logicalAND","childJson":{"name":"&& (logical AND)","brief":"Compares two expressions and returns <b>true</b> only if both evaluate to <b>true</b>","category":"Control","subcategory":"Logical Operators","type":"function"}},{"name":"logicalNOT","childJson":{"name":"! (logical NOT)","brief":"Inverts the Boolean value of an expression","category":"Control","subcategory":"Logical Operators","type":"function"}},{"name":"logicalOR","childJson":{"name":"|| (logical OR)","brief":"Compares two expressions and returns <b>true</b> if one or both evaluate to <b>true</b>","category":"Control","subcategory":"Logical Operators","type":"function"}},{"name":"long","childJson":{"name":"long","brief":"Datatype for large integers","category":"Data","subcategory":"Primitive","type":"function"}},{"name":"loop_","childJson":{"name":"loop()","brief":"Causes Processing to continuously execute the code within\n           <b>draw()</b>","category":"structure","subcategory":"","type":"function"}},{"name":"mag_","childJson":{"name":"mag()","brief":"Calculates the magnitude (or length) of a vector","category":"math","subcategory":"calculation","type":"function"}},{"name":"map_","childJson":{"name":"map()","brief":"Re-maps a number from one range to another","category":"math","subcategory":"calculation","type":"function"}},{"name":"mask_","childJson":{"name":"mask()","brief":"Masks part of an image with another image as an alpha channel","category":"image","subcategory":"pixels","type":"function"}},{"name":"matchAll_","childJson":{"name":"matchAll()","brief":"This function is used to apply a regular expression to a piece of\n           text","category":"data","subcategory":"string_functions","type":"function"}},{"name":"match_","childJson":{"name":"match()","brief":"The function is used to apply a regular expression to a\n           piece of text, and return matching groups (elements found inside\n           parentheses) as a <b>String</b> array","category":"data","subcategory":"string_functions","type":"function"}},{"name":"max_","childJson":{"name":"max()","brief":"Determines the largest value in a sequence of numbers","category":"math","subcategory":"calculation","type":"function"}},{"name":"millis_","childJson":{"name":"millis()","brief":"Returns the number of milliseconds (thousandths of a second) since\n starting an applet","category":"input","subcategory":"time date","type":"function"}},{"name":"min_","childJson":{"name":"min()","brief":"Determines the smallest value in a sequence of numbers","category":"math","subcategory":"calculation","type":"function"}},{"name":"minus","childJson":{"name":"- (minus)","brief":"Subtracts one value from another and may also be used to negate a value","category":"math","subcategory":"Operators","type":"function"}},{"name":"minute_","childJson":{"name":"minute()","brief":"Returns the current minute as a value from 0 - 59","category":"input","subcategory":"time date","type":"function"}},{"name":"modelX_","childJson":{"name":"modelX()","brief":"Returns the three-dimensional X, Y, Z position in model space","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"modelY_","childJson":{"name":"modelY()","brief":"Returns the three-dimensional X, Y, Z position in model space","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"modelZ_","childJson":{"name":"modelZ()","brief":"Returns the three-dimensional X, Y, Z position in model space","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"modulo","childJson":{"name":"% (modulo)","brief":"Calculates the remainder when one number is divided by another","category":"math","subcategory":"Operators","type":"function"}},{"name":"month_","childJson":{"name":"month()","brief":"Returns the current month as a value from 1 - 12","category":"input","subcategory":"time date","type":"function"}},{"name":"mouseButton","childJson":{"name":"mouseButton","brief":"Shows which mouse button is pressed","category":"input","subcategory":"mouse","type":"other"}},{"name":"mouseClicked_","childJson":{"name":"mouseClicked()","brief":"Called once after a mouse button has been pressed and then\n           released","category":"input","subcategory":"mouse","type":"function"}},{"name":"mouseDragged_","childJson":{"name":"mouseDragged()","brief":"Called once every time the mouse moves and a mouse button is\n           pressed","category":"input","subcategory":"mouse","type":"function"}},{"name":"mouseMoved_","childJson":{"name":"mouseMoved()","brief":"Called every time the mouse moves and a mouse button is not\n           pressed","category":"input","subcategory":"mouse","type":"function"}},{"name":"mousePressed","childJson":{"name":"mousePressed","brief":"Variable storing if a mouse button is pressed","category":"input","subcategory":"mouse","type":"other"}},{"name":"mousePressed_","childJson":{"name":"mousePressed()","brief":"Called once after every time a mouse button is pressed","category":"input","subcategory":"mouse","type":"function"}},{"name":"mouseReleased_","childJson":{"name":"mouseReleased()","brief":"Called every time a mouse button is released","category":"input","subcategory":"mouse","type":"function"}},{"name":"mouseWheel_","childJson":{"name":"mouseWheel()","brief":"The code within the <b>mouseWheel()</b> event function\n is run when the mouse wheel is moved","category":"input","subcategory":"mouse","type":"function"}},{"name":"mouseX","childJson":{"name":"mouseX","brief":"The system variable that always contains the current horizontal coordinate of the mouse","category":"input","subcategory":"mouse","type":"other"}},{"name":"mouseY","childJson":{"name":"mouseY","brief":"The system variable that always contains the current vertical coordinate of the mouse","category":"input","subcategory":"mouse","type":"other"}},{"name":"multilinecomment","childJson":{"name":"/* */ (multiline comment)","brief":"Explanatory notes embedded within the code","category":"structure","subcategory":"","type":"function"}},{"name":"multiply","childJson":{"name":"* (multiply)","brief":"Multiplies the values of the two parameters","category":"math","subcategory":"Operators","type":"function"}},{"name":"multiplyassign","childJson":{"name":"*= (multiply assign)","brief":"Combines multiplication with assignment","category":"math","subcategory":"Operators","type":"function"}},{"name":"new","childJson":{"name":"new","brief":"Creates a \"new\" object","category":"structure","subcategory":"","type":"function"}},{"name":"nf_","childJson":{"name":"nf()","brief":"Utility function for formatting numbers into strings","category":"data","subcategory":"string_functions","type":"function"}},{"name":"nfc_","childJson":{"name":"nfc()","brief":"Utility function for formatting numbers into strings and placing\n           appropriate commas to mark units of 1000","category":"data","subcategory":"string_functions","type":"function"}},{"name":"nfp_","childJson":{"name":"nfp()","brief":"Utility function for formatting numbers into strings","category":"data","subcategory":"string_functions","type":"function"}},{"name":"nfs_","childJson":{"name":"nfs()","brief":"Utility function for formatting numbers into strings","category":"data","subcategory":"string_functions","type":"function"}},{"name":"noClip_","childJson":{"name":"noClip()","brief":"Disables the clipping previously started by the <b>clip()</b> function","category":"rendering","subcategory":"","type":"function"}},{"name":"noCursor_","childJson":{"name":"noCursor()","brief":"Hides the cursor from view","category":"environment","subcategory":"","type":"function"}},{"name":"noFill_","childJson":{"name":"noFill()","brief":"Disables filling geometry","category":"color","subcategory":"setting","type":"function"}},{"name":"noLights_","childJson":{"name":"noLights()","brief":"Disable all lighting","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"noLoop_","childJson":{"name":"noLoop()","brief":"Stops Processing from continuously executing the code within <b>draw()</b>","category":"structure","subcategory":"","type":"function"}},{"name":"noSmooth_","childJson":{"name":"noSmooth()","brief":"Draws all geometry and fonts with jagged (aliased)\n edges and images with hard edges between the pixels\n when enlarged rather than interpolating pixels","category":"environment","subcategory":"","type":"function"}},{"name":"noStroke_","childJson":{"name":"noStroke()","brief":"Disables drawing the stroke (outline)","category":"color","subcategory":"setting","type":"function"}},{"name":"noTint_","childJson":{"name":"noTint()","brief":"Removes the current fill value for displaying images and reverts to\n displaying images with their original hues","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"noiseDetail_","childJson":{"name":"noiseDetail()","brief":"Adjusts the character and level of detail produced by the Perlin\n           noise function","category":"math","subcategory":"random","type":"function"}},{"name":"noiseSeed_","childJson":{"name":"noiseSeed()","brief":"Sets the seed value for <b>noise()</b>","category":"math","subcategory":"random","type":"function"}},{"name":"noise_","childJson":{"name":"noise()","brief":"Returns the Perlin noise value at specified coordinates","category":"math","subcategory":"random","type":"function"}},{"name":"norm_","childJson":{"name":"norm()","brief":"Normalizes a number from another range into a value between 0 and\n           1","category":"math","subcategory":"calculation","type":"function"}},{"name":"normal_","childJson":{"name":"normal()","brief":"Sets the current normal vector","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"null","childJson":{"name":"null","brief":"Special value used to signify the target is not a valid data element","category":"structure","subcategory":"","type":"function"}},{"name":"ortho_","childJson":{"name":"ortho()","brief":"Sets an orthographic projection and defines a parallel clipping\n           volume","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"parentheses","childJson":{"name":"() (parentheses)","brief":"Grouping and containing expressions and parameters","category":"structure","subcategory":"","type":"function"}},{"name":"parseJSONArray_","childJson":{"name":"parseJSONArray()","brief":"Takes a <b>String</b>, parses its contents, and returns a <b>JSONArray</b>","category":"input","subcategory":"files","type":"function"}},{"name":"parseJSONObject_","childJson":{"name":"parseJSONObject()","brief":"Takes a <b>String</b>, parses its contents, and returns a\n           <b>JSONObject</b>","category":"input","subcategory":"files","type":"function"}},{"name":"parseXML_","childJson":{"name":"parseXML()","brief":"Converts String content to an <b>XML</b> object","category":"input","subcategory":"files","type":"function"}},{"name":"perspective_","childJson":{"name":"perspective()","brief":"Sets a perspective projection applying foreshortening, making distant\n objects appear smaller than closer ones","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"pixelDensity_","childJson":{"name":"pixelDensity()","brief":"It makes it possible for Processing to render using all of the\n pixels on high resolutions screens","category":"environment","subcategory":"","type":"function"}},{"name":"pixelHeight","childJson":{"name":"pixelHeight","brief":"The actual pixel height when using high resolution display","category":"environment","subcategory":"","type":"other"}},{"name":"pixelWidth","childJson":{"name":"pixelWidth","brief":"The actual pixel width when using high resolution display","category":"environment","subcategory":"","type":"other"}},{"name":"pixels","childJson":{"name":"pixels[]","brief":"Array containing the values for all the pixels in the display window","category":"image","subcategory":"pixels","type":"other"}},{"name":"pmouseX","childJson":{"name":"pmouseX","brief":"The system variable that always contains the horizontal\n position of the mouse in the frame previous to the current frame","category":"input","subcategory":"mouse","type":"other"}},{"name":"pmouseY","childJson":{"name":"pmouseY","brief":"The system variable that always contains the vertical position\n of the mouse in the frame previous to the current frame","category":"input","subcategory":"mouse","type":"other"}},{"name":"greaterthanorequalto","childJson":{"name":">= (greater than or equal to)","brief":"Tests if the value on the left is larger than the value on the right or if the values are equivalent","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"greaterthan","childJson":{"name":"> (greater than)","brief":"Tests if the value on the left is larger than the value on the right","category":"Control","subcategory":"Relational Operators","type":"function"}},{"name":"get_","childJson":{"name":"get()","brief":"Reads the color of any pixel or grabs a rectangle of pixels","category":"image","subcategory":"pixels","type":"function"}},{"name":"pointLight_","childJson":{"name":"pointLight()","brief":"Adds a point light","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"point_","childJson":{"name":"point()","brief":"Draws a point, a coordinate in space at the dimension of one pixel","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"popMatrix_","childJson":{"name":"popMatrix()","brief":"Pops the current transformation matrix off the matrix stack","category":"transform","subcategory":"","type":"function"}},{"name":"popStyle_","childJson":{"name":"popStyle()","brief":"Saves the current style settings and <b>popStyle()</b> restores the prior settings","category":"structure","subcategory":"","type":"function"}},{"name":"pop_","childJson":{"name":"pop()","brief":"The <b>pop()</b> function restores the previous drawing style\n settings and transformations after <b>push()</b> has changed them","category":"structure","subcategory":"","type":"function"}},{"name":"pow_","childJson":{"name":"pow()","brief":"Facilitates exponential expressions","category":"math","subcategory":"calculation","type":"function"}},{"name":"printArray_","childJson":{"name":"printArray()","brief":"Writes array data to the text\n area of the Processing environment's console.","category":"output","subcategory":"text area","type":"function"}},{"name":"printCamera_","childJson":{"name":"printCamera()","brief":"Prints the current camera matrix to the Console (the text window at the\n bottom of Processing)","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"printMatrix_","childJson":{"name":"printMatrix()","brief":"Prints the current matrix to the Console (the text window at the bottom\n of Processing)","category":"transform","subcategory":"","type":"function"}},{"name":"printProjection_","childJson":{"name":"printProjection()","brief":"Prints the current projection matrix to the Console","category":"lights_camera","subcategory":"camera","type":"function"}},{"name":"print_","childJson":{"name":"print()","brief":"Writes to the console area of the Processing environment","category":"output","subcategory":"text area","type":"function"}},{"name":"println_","childJson":{"name":"println()","brief":"Writes to the text area of the Processing environment's console","category":"output","subcategory":"text area","type":"function"}},{"name":"private","childJson":{"name":"private","brief":"This keyword is used to disallow other classes access to the fields and methods within a class","category":"structure","subcategory":"","type":"function"}},{"name":"public","childJson":{"name":"public","brief":"Keyword used to provide other classes access the fields and methods within a class","category":"structure","subcategory":"","type":"function"}},{"name":"pushMatrix_","childJson":{"name":"pushMatrix()","brief":"Pushes the current transformation matrix onto the matrix stack","category":"transform","subcategory":"","type":"function"}},{"name":"pushStyle_","childJson":{"name":"pushStyle()","brief":"Saves the current style settings and <b>popStyle()</b> restores the prior settings","category":"structure","subcategory":"","type":"function"}},{"name":"push_","childJson":{"name":"push()","brief":"The <b>push()</b> function saves the current drawing style\n settings and transformations, while <b>pop()</b> restores these\n settings","category":"structure","subcategory":"","type":"function"}},{"name":"quad_","childJson":{"name":"quad()","brief":"A quad is a quadrilateral, a four sided polygon","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"quadraticVertex_","childJson":{"name":"quadraticVertex()","brief":"Specifies vertex coordinates for quadratic Bezier curves","category":"shape","subcategory":"vertex","type":"function"}},{"name":"radians_","childJson":{"name":"radians()","brief":"Converts a degree measurement to its corresponding value in radians","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"randomGaussian_","childJson":{"name":"randomGaussian()","brief":"Returns a float from a random series of numbers having a mean of 0\n and standard deviation of 1","category":"math","subcategory":"random","type":"function"}},{"name":"randomSeed_","childJson":{"name":"randomSeed()","brief":"Sets the seed value for <b>random()</b>","category":"math","subcategory":"random","type":"function"}},{"name":"random_","childJson":{"name":"random()","brief":"Generates random numbers","category":"math","subcategory":"random","type":"function"}},{"name":"rectMode_","childJson":{"name":"rectMode()","brief":"Modifies the location from which rectangles draw","category":"shape","subcategory":"attributes","type":"function"}},{"name":"rect_","childJson":{"name":"rect()","brief":"Draws a rectangle to the screen","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"red_","childJson":{"name":"red()","brief":"Extracts the red value from a color, scaled to match current\n           <b>colorMode()</b>","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"redraw_","childJson":{"name":"redraw()","brief":"Executes the code within <b>draw()</b> one time","category":"structure","subcategory":"","type":"function"}},{"name":"requestImage_","childJson":{"name":"requestImage()","brief":"Loads images on a separate thread so that your sketch does not\n           freeze while images load during <b>setup()</b>","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"resetMatrix_","childJson":{"name":"resetMatrix()","brief":"Replaces the current matrix with the identity matrix","category":"transform","subcategory":"","type":"function"}},{"name":"resetShader_","childJson":{"name":"resetShader()","brief":"Restores the default shaders","category":"rendering","subcategory":"shaders","type":"function"}},{"name":"return","childJson":{"name":"return","brief":"Keyword used to indicate the value to return from a function","category":"structure","subcategory":"","type":"function"}},{"name":"reverse_","childJson":{"name":"reverse()","brief":"Reverses the order of an array","category":"data","subcategory":"array functions","type":"function"}},{"name":"rightshift","childJson":{"name":">> (right shift)","brief":"Shifts bits to the right","category":"math","subcategory":"Bitwise Operators","type":"function"}},{"name":"rotateX_","childJson":{"name":"rotateX()","brief":"Rotates a shape around the x-axis the amount specified by the\n <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"rotateY_","childJson":{"name":"rotateY()","brief":"Rotates a shape around the y-axis the amount specified by the\n <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"rotateZ_","childJson":{"name":"rotateZ()","brief":"Rotates a shape around the z-axis the amount specified by the\n <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"rotate_","childJson":{"name":"rotate()","brief":"Rotates a shape the amount specified by the <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"round_","childJson":{"name":"round()","brief":"Calculates the integer closest to the <b>value</b> parameter","category":"math","subcategory":"calculation","type":"function"}},{"name":"saturation_","childJson":{"name":"saturation()","brief":"Extracts the saturation value from a color","category":"color","subcategory":"creating & reading","type":"function"}},{"name":"saveBytes_","childJson":{"name":"saveBytes()","brief":"Opposite of <b>loadBytes()</b>, will write an entire array of\n           bytes to a file","category":"output","subcategory":"files","type":"function"}},{"name":"saveFrame_","childJson":{"name":"saveFrame()","brief":"Saves a numbered sequence of images, one image each time the\n           function is run","category":"output","subcategory":"image","type":"function"}},{"name":"saveJSONArray_","childJson":{"name":"saveJSONArray()","brief":"Writes the contents of a <b>JSONArray</b> object to a file","category":"output","subcategory":"files","type":"function"}},{"name":"saveJSONObject_","childJson":{"name":"saveJSONObject()","brief":"Writes the contents of a <b>JSONObject</b> object to a file","category":"output","subcategory":"files","type":"function"}},{"name":"saveStream_","childJson":{"name":"saveStream()","brief":"Save the contents of a stream to a file in the sketch folder","category":"output","subcategory":"files","type":"function"}},{"name":"saveStrings_","childJson":{"name":"saveStrings()","brief":"Writes an array of strings to a file, one line per string","category":"output","subcategory":"files","type":"function"}},{"name":"saveTable_","childJson":{"name":"saveTable()","brief":"Writes the contents of a <b>Table</b> object to a file","category":"output","subcategory":"files","type":"function"}},{"name":"saveXML_","childJson":{"name":"saveXML()","brief":"Writes the contents of an <b>XML</b> object to a file","category":"output","subcategory":"files","type":"function"}},{"name":"save_","childJson":{"name":"save()","brief":"Saves an image from the display window","category":"output","subcategory":"image","type":"function"}},{"name":"scale_","childJson":{"name":"scale()","brief":"Increases or decreases the size of a shape by expanding and\n           contracting vertices","category":"transform","subcategory":"","type":"function"}},{"name":"screenX_","childJson":{"name":"screenX()","brief":"Takes a three-dimensional X, Y, Z position and returns the X value for\n where it will appear on a (two-dimensional) screen","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"screenY_","childJson":{"name":"screenY()","brief":"Takes a three-dimensional X, Y, Z position and returns the Y value for\n where it will appear on a (two-dimensional) screen","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"screenZ_","childJson":{"name":"screenZ()","brief":"Takes a three-dimensional X, Y, Z position and returns the Z value for\n where it will appear on a (two-dimensional) screen","category":"lights_camera","subcategory":"coordinates","type":"function"}},{"name":"second_","childJson":{"name":"second()","brief":"Returns the current second as a value from 0 - 59","category":"input","subcategory":"time date","type":"function"}},{"name":"selectFolder_","childJson":{"name":"selectFolder()","brief":"Opens a platform-specific file chooser dialog to select a folder","category":"input","subcategory":"files","type":"function"}},{"name":"selectInput_","childJson":{"name":"selectInput()","brief":"Open a platform-specific file chooser dialog to select a file for\n           input","category":"input","subcategory":"files","type":"function"}},{"name":"selectOutput_","childJson":{"name":"selectOutput()","brief":"Opens a platform-specific file chooser dialog to select a file for output","category":"output","subcategory":"files","type":"function"}},{"name":"semicolon","childJson":{"name":"; (semicolon)","brief":"A statement terminator which separates elements of the program","category":"structure","subcategory":"","type":"function"}},{"name":"setLocation_","childJson":{"name":"setLocation()","brief":"The <b>setLocation()</b> function defines the position of the Processing sketch in relation to the upper-left corner of the computer screen","category":"structure","subcategory":"","type":"function"}},{"name":"setResizable_","childJson":{"name":"setResizable()","brief":"By default, Processing sketches can't be resized","category":"structure","subcategory":"","type":"function"}},{"name":"setTitle_","childJson":{"name":"setTitle()","brief":"The <b>setTitle()</b> function defines the title to appear at the top of the sketch window","category":"structure","subcategory":"","type":"function"}},{"name":"set_","childJson":{"name":"set()","brief":"Writes a color to any pixel or writes an image into another","category":"image","subcategory":"pixels","type":"function"}},{"name":"settings_","childJson":{"name":"settings()","brief":"Used when absolutely necessary to define the parameters to <b>size()</b>\n with a variable","category":"environment","subcategory":"","type":"function"}},{"name":"setup_","childJson":{"name":"setup()","brief":"The <b>setup()</b> function is called once when the program starts","category":"structure","subcategory":"","type":"function"}},{"name":"shader_","childJson":{"name":"shader()","brief":"Applies the shader specified by the parameters","category":"rendering","subcategory":"shaders","type":"function"}},{"name":"shapeMode_","childJson":{"name":"shapeMode()","brief":"Modifies the location from which shapes draw","category":"shape","subcategory":"loading & displaying","type":"function"}},{"name":"shape_","childJson":{"name":"shape()","brief":"Displays shapes to the screen","category":"shape","subcategory":"loading & displaying","type":"function"}},{"name":"shearX_","childJson":{"name":"shearX()","brief":"Shears a shape around the x-axis the amount specified by the\n <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"shearY_","childJson":{"name":"shearY()","brief":"Shears a shape around the y-axis the amount specified by the\n <b>angle</b> parameter","category":"transform","subcategory":"","type":"function"}},{"name":"shininess_","childJson":{"name":"shininess()","brief":"Sets the amount of gloss in the surface of shapes","category":"lights_camera","subcategory":"material properties","type":"function"}},{"name":"shorten_","childJson":{"name":"shorten()","brief":"Decreases an array by one element and returns the shortened array","category":"data","subcategory":"array functions","type":"function"}},{"name":"sin_","childJson":{"name":"sin()","brief":"Calculates the sine of an angle","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"size_","childJson":{"name":"size()","brief":"Defines the dimension of the display window in units of pixels","category":"environment","subcategory":"","type":"function"}},{"name":"smooth_","childJson":{"name":"smooth()","brief":"Draws all geometry with smooth (anti-aliased) edges","category":"environment","subcategory":"","type":"function"}},{"name":"sort_","childJson":{"name":"sort()","brief":"Sorts an array of numbers from smallest to largest and puts an\n           array of words in alphabetical order","category":"data","subcategory":"array functions","type":"function"}},{"name":"specular_","childJson":{"name":"specular()","brief":"Sets the specular color of the materials used for shapes drawn to the\n screen, which sets the color of highlights","category":"lights_camera","subcategory":"material properties","type":"function"}},{"name":"sphereDetail_","childJson":{"name":"sphereDetail()","brief":"Controls the detail used to render a sphere by adjusting the number of\n vertices of the sphere mesh","category":"shape","subcategory":"3d primitives","type":"function"}},{"name":"sphere_","childJson":{"name":"sphere()","brief":"A sphere is a hollow ball made from tessellated triangles","category":"shape","subcategory":"3d primitives","type":"function"}},{"name":"splice_","childJson":{"name":"splice()","brief":"Inserts a value or array of values into an existing array","category":"data","subcategory":"array functions","type":"function"}},{"name":"splitTokens_","childJson":{"name":"splitTokens()","brief":"The <b>splitTokens()</b> function splits a <b>String</b> at one or many\n           character \"tokens\"","category":"data","subcategory":"string_functions","type":"function"}},{"name":"split_","childJson":{"name":"split()","brief":"The <b>split()</b> function breaks a string into pieces using a\n           character or string as the divider","category":"data","subcategory":"string_functions","type":"function"}},{"name":"spotLight_","childJson":{"name":"spotLight()","brief":"Adds a spot light","category":"lights_camera","subcategory":"lights","type":"function"}},{"name":"sq_","childJson":{"name":"sq()","brief":"Squares a number (multiplies a number by itself)","category":"math","subcategory":"calculation","type":"function"}},{"name":"sqrt_","childJson":{"name":"sqrt()","brief":"Calculates the square root of a number","category":"math","subcategory":"calculation","type":"function"}},{"name":"square_","childJson":{"name":"square()","brief":"Draws a square to the screen","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"static","childJson":{"name":"static","brief":"Keyword used to define a variable as a \"class variable\" and a method as a \"class method","category":"structure","subcategory":"","type":"function"}},{"name":"strconvert_","childJson":{"name":"str()","brief":"Converts a value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>int</b>, or <b>float</b>) to its <b>String</b> representation","category":"Data","subcategory":"Conversion","type":"function"}},{"name":"strokeCap_","childJson":{"name":"strokeCap()","brief":"Sets the style for rendering line endings","category":"shape","subcategory":"attributes","type":"function"}},{"name":"strokeJoin_","childJson":{"name":"strokeJoin()","brief":"Sets the style of the joints which connect line segments","category":"shape","subcategory":"attributes","type":"function"}},{"name":"strokeWeight_","childJson":{"name":"strokeWeight()","brief":"Sets the width of the stroke used for lines, points, and the border\n           around shapes","category":"shape","subcategory":"attributes","type":"function"}},{"name":"stroke_","childJson":{"name":"stroke()","brief":"Sets the color used to draw lines and borders around shapes","category":"color","subcategory":"setting","type":"function"}},{"name":"subset_","childJson":{"name":"subset()","brief":"Extracts an array of elements from an existing array","category":"data","subcategory":"array functions","type":"function"}},{"name":"subtractassign","childJson":{"name":"-= (subtract assign)","brief":"Combines subtraction with assignment","category":"math","subcategory":"Operators","type":"function"}},{"name":"super","childJson":{"name":"super","brief":"Keyword used to reference the superclass of a subclass","category":"structure","subcategory":"","type":"function"}},{"name":"switch","childJson":{"name":"switch","brief":"Works like an <b>if else</b> structure, but <b>switch</b> is more convenient when you need to select between three or more alternatives","category":"Control","subcategory":"Conditionals","type":"function"}},{"name":"tan_","childJson":{"name":"tan()","brief":"Calculates the ratio of the sine and cosine of an angle","category":"math","subcategory":"trigonometry","type":"function"}},{"name":"textAlign_","childJson":{"name":"textAlign()","brief":"Sets the current alignment for drawing text","category":"typography","subcategory":"attributes","type":"function"}},{"name":"textAscent_","childJson":{"name":"textAscent()","brief":"Returns ascent of the current font at its current size","category":"typography","subcategory":"metrics","type":"function"}},{"name":"textDescent_","childJson":{"name":"textDescent()","brief":"Returns descent of the current font at its current size","category":"typography","subcategory":"metrics","type":"function"}},{"name":"textFont_","childJson":{"name":"textFont()","brief":"Sets the current font that will be drawn with the <b>text()</b>\n           function","category":"typography","subcategory":"loading & displaying","type":"function"}},{"name":"textLeading_","childJson":{"name":"textLeading()","brief":"Sets the spacing between lines of text in units of pixels","category":"typography","subcategory":"attributes","type":"function"}},{"name":"textMode_","childJson":{"name":"textMode()","brief":"Sets the way text draws to the screen","category":"typography","subcategory":"attributes","type":"function"}},{"name":"textSize_","childJson":{"name":"textSize()","brief":"Sets the current font size","category":"typography","subcategory":"attributes","type":"function"}},{"name":"textWidth_","childJson":{"name":"textWidth()","brief":"Calculates and returns the width of any character or text string","category":"typography","subcategory":"attributes","type":"function"}},{"name":"text_","childJson":{"name":"text()","brief":"Draws text to the screen","category":"typography","subcategory":"loading & displaying","type":"function"}},{"name":"textureMode_","childJson":{"name":"textureMode()","brief":"Sets the coordinate space for texture mapping","category":"image","subcategory":"textures","type":"function"}},{"name":"textureWrap_","childJson":{"name":"textureWrap()","brief":"Defines if textures repeat or draw once within a texture map","category":"image","subcategory":"textures","type":"function"}},{"name":"texture_","childJson":{"name":"texture()","brief":"Sets a texture to be applied to vertex points","category":"image","subcategory":"textures","type":"function"}},{"name":"this","childJson":{"name":"this","brief":"Refers to the current object (i","category":"structure","subcategory":"","type":"function"}},{"name":"thread_","childJson":{"name":"thread()","brief":"Launch a new thread and call the specified function from that new\n           thread","category":"structure","subcategory":"","type":"function"}},{"name":"tint_","childJson":{"name":"tint()","brief":"Sets the fill value for displaying images","category":"image","subcategory":"loading & displaying","type":"function"}},{"name":"translate_","childJson":{"name":"translate()","brief":"Specifies an amount to displace objects within the display window","category":"transform","subcategory":"","type":"function"}},{"name":"triangle_","childJson":{"name":"triangle()","brief":"A triangle is a plane created by connecting three points","category":"shape","subcategory":"2d primitives","type":"function"}},{"name":"trim_","childJson":{"name":"trim()","brief":"Removes whitespace characters from the beginning and end of a <b>String</b>","category":"data","subcategory":"string_functions","type":"function"}},{"name":"true","childJson":{"name":"true","brief":"Reserved word representing the logical value \"true\"","category":"structure","subcategory":"","type":"function"}},{"name":"try","childJson":{"name":"try","brief":"The <b>try</b> keyword is used with <b>catch</b> to handle exceptions","category":"structure","subcategory":"","type":"function"}},{"name":"unbinary_","childJson":{"name":"unbinary()","brief":"Converts a <b>String</b> representation of a binary number to its\n           equivalent <b>integer</b> value","category":"data","subcategory":"conversion","type":"function"}},{"name":"unhex_","childJson":{"name":"unhex()","brief":"Converts a <b>String</b> representation of a hexadecimal number to its\n           equivalent integer value","category":"data","subcategory":"conversion","type":"function"}},{"name":"updatePixels_","childJson":{"name":"updatePixels()","brief":"Updates the display window with the data in the <b>pixels[]</b>\n           array","category":"image","subcategory":"pixels","type":"function"}},{"name":"vertex_","childJson":{"name":"vertex()","brief":"All shapes are constructed by connecting a series of vertices","category":"shape","subcategory":"vertex","type":"function"}},{"name":"void","childJson":{"name":"void","brief":"Keyword used to indicate that a function returns no value","category":"structure","subcategory":"","type":"function"}},{"name":"while","childJson":{"name":"while","brief":"Controls a sequence of repetitions","category":"Control","subcategory":"Iteration","type":"function"}},{"name":"width","childJson":{"name":"width","brief":"System variable which stores the width of the display window","category":"environment","subcategory":"","type":"other"}},{"name":"year_","childJson":{"name":"year()","brief":"Returns the current year as an integer (2003,\n 2004, 2005, etc)","category":"input","subcategory":"time date","type":"function"}}]}},"pageContext":{"locale":"en","hrefLang":"en-US","originalPath":"/reference/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","3280999885"]}
  ''';

/// @author u
/// @date 2020/6/12.
///
File file = File('/Users/u/code/demo/flutter/processing_compiler/lib/data/api/api_details_json.dart');
File failFile = File('./test/api_details_fail.dart');

Future<void> main() async {
  if (file.existsSync()) {
    file.deleteSync();
  }

  if (failFile.existsSync()) {
    failFile.deleteSync();
  }
  file.createSync();
  failFile.createSync();
  var apiNodes = jsonDecode(rawApiNodesJson);
  List result = apiNodes['result']['data']['items']['nodes'];
  for (var element in result) {
    String name = element['name'];
    await httpRequest(name);
  }

  String temp = '''
  class ApiDetails {
  Map<String, String> details = {
    $content
  };
}
  ''';
  file.writeAsStringSync(temp, mode: FileMode.append);
}

httpRequest(String name) async {
  HttpClient httpClient = HttpClient();
  var request = await httpClient.getUrl(Uri.parse(
      "https://processing.org/page-data/reference/$name.html/page-data.json"));
  var response = await request.close();

  if (response.statusCode == 200) {
    var responseBody = await response.transform(utf8.decoder).join();
    var data = json.decode(responseBody) as Map<String, dynamic>;
    Map nodeDetails = data['result']['data'];
    Map selfNeed = {
      'json':nodeDetails['json']['childJson'],
      'pdes':nodeDetails['pdes']
    };
    print('peter 成功了 ' + request.uri.toString());
    writeDartFile(name, json.encode(selfNeed));
  } else {
    print('peter 失败了 ' + name.toString());
    failFile.writeAsStringSync(name + " \n", mode: FileMode.append);
  }
}

String content = '';

writeDartFile(String name, String json) {
  content += '\'$name\':  r\'\'\' $json \'\'\',';
}
