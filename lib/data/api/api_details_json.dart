class ApiDetailsJson {
  Map<String, String> details = {
    'Array':
        r''' {"json":{"name":"Array","description":"An array is a list of data. It is possible to have an array of any type of data. Each piece of data in an array is identified by an index number representing its position in the array. The first element in the array is <b>[0]</b>, the second element is <b>[1]</b>, and so on. Arrays are similar to objects, so they must be created with the keyword <b>new</b>.<br/>\n<br/>\nEach array has a variable <b>length</b>, which is an integer value for the total number of elements in the array. Note that since index numbering begins at zero (not 1), the last value in an array with a <b>length</b> of 5 should be referenced as <b>array[4]</b> (that is, the <b>length</b> minus 1), not <b>array[5]</b>, which would trigger an error.<br/>\n<br/>\nAnother common source of confusion is the difference between using <b>length</b> to get the size of an array and <b>length()</b> to get the size of a String. Notice the presence of parentheses when working with Strings. (<b>array.length</b> is a variable, while <b>String.length()</b> is a method specific to the String class.)\n","constructors":["datatype[] var","var[element] = value","var.length"],"category":"Data","subcategory":"Composite","classFields":[],"methods":[],"related":[],"parameters":[{"name":"datatype","description":"any primitive or compound datatype, including user-defined classes"},{"name":"var","description":"any valid variable name"},{"name":"element","description":"int: must not exceed the length of the array minus 1"},{"name":"value","description":"data to assign to the array element; must be the same datatype as the array"}]},"pdes":{"edges":[{"node":{"name":"Array_0","internal":{"content":"int[] numbers = new int[3];\nnumbers[0] = 90;  // Assign value to first element in the array\nnumbers[1] = 150; // Assign value to second element in the array\nnumbers[2] = 30;  // Assign value to third element in the array\nint a = numbers[0] + numbers[1]; // Sets variable 'a' to 240\nint b = numbers[1] + numbers[2]; // Sets variable 'b' to 180 \n"},"extension":"pde"}},{"node":{"name":"Array_1","internal":{"content":"int[] numbers = { 90, 150, 30 };  // Alternate syntax\nint a = numbers[0] + numbers[1];  // Sets variable 'a' to 240\nint b = numbers[1] + numbers[2];  // Sets variable 'b' to 180\n"},"extension":"pde"}},{"node":{"name":"Array_2","internal":{"content":"int degrees = 360;\nfloat[] cos_vals = new float[degrees];\n// Use a for() loop to quickly iterate\n// through all values in an array.\nfor (int i=0; i < degrees; i++) {         \n  cos_vals[i] = cos(TWO_PI/degrees * i);\n}\n"},"extension":"pde"}},{"node":{"name":"Array_3","internal":{"content":"float[] randoms = new float[100];\nfor (int i = 0; i < randoms.length; i++) {\n  randoms[i] = random(100);\n}\n\n// You can also use an enhanced loop\n// to access the elements of an array\nfor (float val : randoms) {\n  println(val);\n}\n\n// This works with arrays of objects, too,\n// but not when first making the array\nPVector[] vectors = new PVector[5];\nfor (int i = 0; i < vectors.length; i++) {\n  vectors[i] = new PVector();\n}\n\n// The syntax only applies when iterating\n// over an existing array \nfor (PVector v : vectors) {\n  point(v.x, v.y);\n}\n"},"extension":"pde"}}]}} ''',
    'ArrayList':
        r''' {"json":{"name":"ArrayList","description":"An <b>ArrayList</b> stores a variable number of objects. This is similar to making an array of objects, but with an <b>ArrayList</b>, items can be easily added and removed from the ArrayList and it is resized dynamically. This can be very convenient, but it's slower than making an array of objects when using many elements.  Note that for resizable lists of integers, floats, and Strings, you can use the Processing classes IntList, FloatList, and StringList.<br />\n<br />\nAn ArrayList is a resizable-array implementation of the Java List interface. It has many methods used to control and search its contents. For example, the length of the <b>ArrayList</b> is returned by its <b>size()</b> method, which is an integer value for the total number of elements in the list. An element is added to an <b>ArrayList</b> with the <b>add()</b> method and is deleted with the <b>remove()</b> method. The <b>get()</b> method returns the element at the specified position in the list. (See the above example for context.)<br />\n<br />\nFor a list of the numerous <b>ArrayList</b> features, please read the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\">Java reference description</a>.\n","constructors":["ArrayList&lt;Type&gt;()","ArrayList&lt;Type&gt;(initialCapacity)"],"category":"Data","subcategory":"Composite","classFields":[],"methods":[],"related":["IntList","FloatList","StringList"],"parameters":[{"name":"Type","description":"Class Name: the data type for the objects to be placed in the ArrayList."},{"name":"initialCapacity","description":"int: defines the initial capacity of the list; it's empty by default"}]},"pdes":{"edges":[{"node":{"name":"ArrayList_0","internal":{"content":"// These are code fragments that show how to use an ArrayList.\n// They won't compile because they assume the existence of a Particle class.\n\n// Declaring the ArrayList, note the use of the syntax \"<Particle>\" to indicate\n// our intention to fill this ArrayList with Particle objects\nArrayList<Particle> particles = new ArrayList<Particle>();\n\n// Objects can be added to an ArrayList with add()\nparticles.add(new Particle());\n\n// Particles can be pulled out of an ArrayList with get()\nParticle part = particles.get(0);\npart.display();\n\n// The size() method returns the current number of items in the list\nint total = particles.size();\nprintln(\"The total number of particles is: \" + total);\n\n// You can iterate over an ArrayList in two ways.\n// The first is by counting through the elements:\nfor (int i = 0; i < particles.size(); i++) {\n  Particle part = particles.get(i);\n  part.display();\n}\n\n// The second is using an enhanced loop:\nfor (Particle part : particles) {\n  part.display();\n}\n\n// You can delete particles from an ArrayList with remove()\nparticles.remove(0);\nprintln(particles.size()); // Now one less!\n\n// If you are modifying an ArrayList during the loop,\n// then you cannot use the enhanced loop syntax.\n// In addition, when deleting in order to hit all elements, \n// you should loop through it backwards, as shown here:\nfor (int i = particles.size() - 1; i >= 0; i--) {\n  Particle part = particles.get(i);\n  if (part.finished()) {\n    particles.remove(i);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'BufferedReader':
        r''' {"json":{"name":"BufferedReader","description":"A <b>BufferedReader</b> object is used to read files line-by-line as individual <b>String</b> objects.\n<br /><br />\nStarting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.\n","constructors":[],"category":"input","subcategory":"files","classFields":[],"methods":[{"anchor":"BufferedReader_readLine_","name":"readLine()","desc":"Returns a String that is the current line in the BufferedReader."}],"related":["createReader_","try","catch"],"parameters":null},"pdes":{"edges":[{"node":{"name":"BufferedReader_0","internal":{"content":"BufferedReader reader;\nString line;\n \nvoid setup() {\n  // Open the file from the createWriter() example\n  reader = createReader(\"positions.txt\");    \n}\n \nvoid draw() {\n  try {\n    line = reader.readLine();\n  } catch (IOException e) {\n    e.printStackTrace();\n    line = null;\n  }\n  if (line == null) {\n    // Stop reading because of an error or file is empty\n    noLoop();  \n  } else {\n    String[] pieces = split(line, TAB);\n    int x = int(pieces[0]);\n    int y = int(pieces[1]);\n    point(x, y);\n  }\n} \n"},"extension":"pde"}}]}} ''',
    'FloatDict':
        r''' {"json":{"name":"FloatDict","description":"A simple class to use a <b>String</b> as a lookup for a float value. String \"keys\"\n are associated with floating-point values.","constructors":["FloatDict()","FloatDict(pairs)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"FloatDict_size_","name":"size()","desc":"Returns the number of key/value pairs"},{"anchor":"FloatDict_clear_","name":"clear()","desc":"Remove all entries"},{"anchor":"FloatDict_keys_","name":"keys()","desc":"Return the internal array being used to store the keys"},{"anchor":"FloatDict_keyArray_","name":"keyArray()","desc":"Return a copy of the internal keys array"},{"anchor":"FloatDict_values_","name":"values()","desc":"Return the internal array being used to store the values"},{"anchor":"FloatDict_valueArray_","name":"valueArray()","desc":"Create a new array and copy each of the values into it"},{"anchor":"FloatDict_get_","name":"get()","desc":"Return a value for the specified key"},{"anchor":"FloatDict_set_","name":"set()","desc":"Create a new key/value pair or change the value of one"},{"anchor":"FloatDict_hasKey_","name":"hasKey()","desc":"Check if a key is a part of the data structure"},{"anchor":"FloatDict_add_","name":"add()","desc":"Add to a value"},{"anchor":"FloatDict_sub_","name":"sub()","desc":"Subtract from a value"},{"anchor":"FloatDict_mult_","name":"mult()","desc":"Multiply a value"},{"anchor":"FloatDict_div_","name":"div()","desc":"Divide a value"},{"anchor":"FloatDict_minIndex_","name":"minIndex()","desc":"Return the smallest value"},{"anchor":"FloatDict_maxIndex_","name":"maxIndex()","desc":"Return the largest value"},{"anchor":"FloatDict_remove_","name":"remove()","desc":"Remove a key/value pair"},{"anchor":"FloatDict_sortKeys_","name":"sortKeys()","desc":"Sort the keys alphabetically"},{"anchor":"FloatDict_sortKeysReverse_","name":"sortKeysReverse()","desc":"Sort the keys alphabetically in reverse"},{"anchor":"FloatDict_sortValues_","name":"sortValues()","desc":"Sort by values in ascending order"},{"anchor":"FloatDict_sortValuesReverse_","name":"sortValuesReverse()","desc":"Sort by values in descending order"}],"related":["IntDict","StringDict"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"FloatDict_0","internal":{"content":"FloatDict inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new FloatDict();\n  inventory.set(\"coffee\",108.6);\n  inventory.set(\"flour\",5.8);\n  inventory.set(\"tea\",8.2);\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  float weight = inventory.get(\"coffee\");\n  text(weight, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'FloatList':
        r''' {"json":{"name":"FloatList","description":"Helper class for a list of floats. Lists are designed to have some of the\n features of <b>ArrayLists</b>, but to maintain the simplicity and efficiency of\n working with arrays.\n\n Functions like <b>sort()</b> and <b>shuffle()</b> always act on the list itself. To get\n a sorted copy, use <b>list.copy().sort()</b>.","constructors":["FloatList()","FloatList(items)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"FloatList_size_","name":"size()","desc":"Get the length of the list"},{"anchor":"FloatList_clear_","name":"clear()","desc":"Remove all entries from the list"},{"anchor":"FloatList_get_","name":"get()","desc":"Get an entry at a particular index"},{"anchor":"FloatList_set_","name":"set()","desc":"Set the entry at a particular index"},{"anchor":"FloatList_remove_","name":"remove()","desc":"Remove an element from the specified index"},{"anchor":"FloatList_append_","name":"append()","desc":"Add a new entry to the list"},{"anchor":"FloatList_hasValue_","name":"hasValue()","desc":"Check if a number is a part of the list"},{"anchor":"FloatList_add_","name":"add()","desc":"Add to a value"},{"anchor":"FloatList_sub_","name":"sub()","desc":"Subtract from a value"},{"anchor":"FloatList_mult_","name":"mult()","desc":"Multiply a value"},{"anchor":"FloatList_div_","name":"div()","desc":"Divide a value"},{"anchor":"FloatList_min_","name":"min()","desc":"Return the smallest value"},{"anchor":"FloatList_max_","name":"max()","desc":"Return the largest value"},{"anchor":"FloatList_sort_","name":"sort()","desc":"Sorts an array, lowest to highest"},{"anchor":"FloatList_sortReverse_","name":"sortReverse()","desc":"A sort in reverse"},{"anchor":"FloatList_reverse_","name":"reverse()","desc":"Reverse the order of the list"},{"anchor":"FloatList_shuffle_","name":"shuffle()","desc":"Randomize the order of the list elements"},{"anchor":"FloatList_array_","name":"array()","desc":"Create a new array with a copy of all the values"}],"related":["IntList","StringList"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"FloatList_0","internal":{"content":"FloatList inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new FloatList();\n  inventory.append(108.6);\n  inventory.append(5.8);\n  inventory.append(8.2);\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  float nums = inventory.get(2);\n  text(nums, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'HALF_PI':
        r''' {"json":{"name":"HALF_PI","classanchor":null,"description":"<b>HALF_PI</b> is a mathematical constant with the value 1.5707964. It is\n half the ratio of the circumference of a circle to its diameter. It is useful\n in combination with the trigonometric functions <b>sin()</b> and\n <b>cos()</b>.","syntax":null,"category":"constants","subcategory":"","parameters":null,"related":["PI","TWO_PI","TAU","QUARTER_PI"],"returns":null},"pdes":{"edges":[{"node":{"name":"HALF_PI","internal":{"content":"float x = width/2;\nfloat y = height/2;\nfloat d = width * 0.8;\nsize(400,400);\narc(x, y, d, d, 0, QUARTER_PI);\narc(x, y, d-80, d-80, 0, HALF_PI);\narc(x, y, d-160, d-160, 0, PI);\narc(x, y, d-240, d-240, 0, TWO_PI);\n"},"extension":"pde"}}]}} ''',
    'HashMap':
        r''' {"json":{"name":"HashMap","description":"A <b>HashMap</b> stores a collection of objects, each referenced by a key. This is similar to an <b>Array</b>, only instead of accessing elements with a numeric index, a <b>String</b> is used. (If you are familiar with associative arrays from other languages, this is the same idea.) The above example covers basic use, but there's a more extensive example included with the Processing examples.  In addition, for simple pairings of Strings and integers, Strings and floats, or Strings and Strings, you can now use the simpler IntDict, FloatDict, and StringDict classes.<br />\n<br />\nFor a list of the numerous <b>HashMap</b> features, please read the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html\">Java reference description</a>.\n","constructors":["HashMap&lt;Key, Value&gt;()","HashMap&lt;Key, Value&gt;(initialCapacity)","HashMap&lt;Key, Value&gt;(initialCapacity, loadFactor)","HashMap&lt;Key, Value&gt;(m)"],"category":"Data","subcategory":"Composite","classFields":[],"methods":[],"related":["IntDict","FloatDict","StringDict"],"parameters":[{"name":"Key","description":"Class Name: the data type for the HashMap's keys"},{"name":"Value","description":"Class Name: the data type for the HashMap's values"},{"name":"initialCapacity","description":"int: defines the initial capacity of the map; the default is 16"},{"name":"loadFactor","description":"float: the load factor for the map; the default is 0.75"},{"name":"m","description":"Map: gives the new HashMap the same mappings as this Map"}]},"pdes":{"edges":[{"node":{"name":"HashMap_0","internal":{"content":"import java.util.Map;\n\n// Note the HashMap's \"key\" is a String and \"value\" is an Integer\nHashMap<String,Integer> hm = new HashMap<String,Integer>();\n\n// Putting key-value pairs in the HashMap\nhm.put(\"Ava\", 1);\nhm.put(\"Cait\", 35);\nhm.put(\"Casey\", 36);\n\n// Using an enhanced loop to iterate over each entry\nfor (Map.Entry me : hm.entrySet()) {\n  print(me.getKey() + \" is \");\n  println(me.getValue());\n}\n\n// We can also access values by their key\nint val = hm.get(\"Casey\");\nprintln(\"Casey is \" + val);\n\n"},"extension":"pde"}}]}} ''',
    'IntDict':
        r''' {"json":{"name":"IntDict","description":"A simple class to use a <b>String</b> as a lookup for an int value. String \"keys\" are \n associated with integer values.","constructors":["IntDict()","IntDict(pairs)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"IntDict_size_","name":"size()","desc":"Returns the number of key/value pairs"},{"anchor":"IntDict_clear_","name":"clear()","desc":"Remove all entries from the data structure"},{"anchor":"IntDict_keys_","name":"keys()","desc":"Return the internal array being used to store the keys"},{"anchor":"IntDict_keyArray_","name":"keyArray()","desc":"Return a copy of the internal keys array"},{"anchor":"IntDict_values_","name":"values()","desc":"Return the internal array being used to store the values"},{"anchor":"IntDict_valueArray_","name":"valueArray()","desc":"Create a new array and copy each of the values into it"},{"anchor":"IntDict_get_","name":"get()","desc":"Return a value for the specified key"},{"anchor":"IntDict_set_","name":"set()","desc":"Create a new key/value pair or change the value of one"},{"anchor":"IntDict_hasKey_","name":"hasKey()","desc":"Check if a key is a part of the data structure"},{"anchor":"IntDict_increment_","name":"increment()","desc":"Increase the value of a specific key value by 1"},{"anchor":"IntDict_add_","name":"add()","desc":"Add to a value"},{"anchor":"IntDict_sub_","name":"sub()","desc":"Subtract from a value"},{"anchor":"IntDict_mult_","name":"mult()","desc":"Multiply a value"},{"anchor":"IntDict_div_","name":"div()","desc":"Divide a value"},{"anchor":"IntDict_remove_","name":"remove()","desc":"Remove a key/value pair"},{"anchor":"IntDict_sortKeys_","name":"sortKeys()","desc":"Sort the keys alphabetically"},{"anchor":"IntDict_sortKeysReverse_","name":"sortKeysReverse()","desc":"Sort the keys alphabetically in reverse"},{"anchor":"IntDict_sortValues_","name":"sortValues()","desc":"Sort by values in ascending order"},{"anchor":"IntDict_sortValuesReverse_","name":"sortValuesReverse()","desc":"Sort by values in descending order"}],"related":["FloatDict","StringDict"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"IntDict_0","internal":{"content":"IntDict inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new IntDict();\n  inventory.set(\"cd\", 84);\n  inventory.set(\"tapes\", 15);\n  inventory.set(\"records\", 102);\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  int numRecords = inventory.get(\"records\");\n  text(numRecords, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'IntList':
        r''' {"json":{"name":"IntList","description":"Helper class for a list of ints. Lists are designed to have some of the\n features of <b>ArrayLists</b>, but to maintain the simplicity and efficiency of\n working with arrays.\n\n Functions like <b>sort()</b> and <b>shuffle()</b> always act on the list itself. To get\n a sorted copy, use <b>list.copy().sort()</b>.","constructors":["IntList()","IntList(items)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"IntList_size_","name":"size()","desc":"Get the length of the list"},{"anchor":"IntList_clear_","name":"clear()","desc":"Remove all entries from the list"},{"anchor":"IntList_get_","name":"get()","desc":"Get an entry at a particular index"},{"anchor":"IntList_set_","name":"set()","desc":"Set the entry at a particular index"},{"anchor":"IntList_remove_","name":"remove()","desc":"Remove an element from the specified index"},{"anchor":"IntList_append_","name":"append()","desc":"Add a new entry to the list"},{"anchor":"IntList_hasValue_","name":"hasValue()","desc":"Check if a number is a part of the list"},{"anchor":"IntList_increment_","name":"increment()","desc":"Add one to a value"},{"anchor":"IntList_add_","name":"add()","desc":"Add to a value"},{"anchor":"IntList_sub_","name":"sub()","desc":"Subtract from a value"},{"anchor":"IntList_mult_","name":"mult()","desc":"Multiply a value"},{"anchor":"IntList_div_","name":"div()","desc":"Divide a value"},{"anchor":"IntList_min_","name":"min()","desc":"Return the smallest value"},{"anchor":"IntList_max_","name":"max()","desc":"Return the largest value"},{"anchor":"IntList_sort_","name":"sort()","desc":"Sorts the array, lowest to highest"},{"anchor":"IntList_sortReverse_","name":"sortReverse()","desc":"Reverse sort, orders values from highest to lowest"},{"anchor":"IntList_reverse_","name":"reverse()","desc":"Reverse the order of the list elements"},{"anchor":"IntList_shuffle_","name":"shuffle()","desc":"Randomize the order of the list elements"},{"anchor":"IntList_array_","name":"array()","desc":"Create a new array with a copy of all the values"}],"related":["FloatList","StringList"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"IntList_0","internal":{"content":"IntList inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new IntList();\n  inventory.append(84);\n  inventory.append(15);\n  inventory.append(102);\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  int nums = inventory.get(2);\n  text(nums, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'JSONArray':
        r''' {"json":{"name":"JSONArray","description":"A <b>JSONArray</b> stores an array of JSON objects. <b>JSONArray</b>s can \n be generated from scratch, dynamically, or using data from an existing file.  \n JSON can also be output and saved to disk, as in the example above.\n \n ","constructors":["JSONArray()"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"JSONArray_getString_","name":"getString()","desc":"Gets the String value associated with an index"},{"anchor":"JSONArray_getInt_","name":"getInt()","desc":"Gets the int value associated with the specified index"},{"anchor":"JSONArray_getFloat_","name":"getFloat()","desc":"Gets the float value associated with the specified index"},{"anchor":"JSONArray_getBoolean_","name":"getBoolean()","desc":"Gets the boolean value associated with the specified index"},{"anchor":"JSONArray_getJSONArray_","name":"getJSONArray()","desc":"Retrieves the <b>JSONArray</b> with the associated index value"},{"anchor":"JSONArray_getJSONObject_","name":"getJSONObject()","desc":"Retrieves the <b>JSONObject</b> with the associated index value"},{"anchor":"JSONArray_getStringArray_","name":"getStringArray()","desc":"Returns the entire <b>JSONArray</b> as an array of <b>Strings</b>"},{"anchor":"JSONArray_getIntArray_","name":"getIntArray()","desc":"Returns the entire <b>JSONArray</b> as an array of <b>ints</b>"},{"anchor":"JSONArray_append_","name":"append()","desc":"Appends a value, increasing the array's length by one"},{"anchor":"JSONArray_setString_","name":"setString()","desc":"Inserts a new value into the <b>JSONArray</b> at the specified index position"},{"anchor":"JSONArray_setInt_","name":"setInt()","desc":"Put an int value in the JSONArray"},{"anchor":"JSONArray_setFloat_","name":"setFloat()","desc":"Put a float value in the JSONArray"},{"anchor":"JSONArray_setBoolean_","name":"setBoolean()","desc":"Inserts a new value into the <b>JSONArray</b> at the specified index position"},{"anchor":"JSONArray_setJSONArray_","name":"setJSONArray()","desc":"Sets the value of the <b>JSONArray</b> with the associated index value"},{"anchor":"JSONArray_setJSONObject_","name":"setJSONObject()","desc":"Sets the value of the <b>JSONObject</b> with the index value"},{"anchor":"JSONArray_size_","name":"size()","desc":"Gets the total number of elements in a <b>JSONArray</b>"},{"anchor":"JSONArray_isNull_","name":"isNull()","desc":"Determines if the value associated with the index is <b>null</b>"},{"anchor":"JSONArray_remove_","name":"remove()","desc":"Removes the element from a <b>JSONArray</b> in the specified index position"}],"related":["JSONObject","loadJSONObject_","loadJSONArray_","saveJSONObject_","saveJSONArray_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"JSONArray_0","internal":{"content":"String[] species = { \"Capra hircus\", \"Panthera pardus\", \"Equus zebra\" };\nString[] names = { \"Goat\", \"Leopard\", \"Zebra\" };\n\nJSONArray values;\n\nvoid setup() {\n\n  values = new JSONArray();\n\n  for (int i = 0; i < species.length; i++) {\n\n    JSONObject animal = new JSONObject();\n\n    animal.setInt(\"id\", i);\n    animal.setString(\"species\", species[i]);\n    animal.setString(\"name\", names[i]);\n\n    values.setJSONObject(i, animal);\n  }\n\n  saveJSONArray(values, \"data/new.json\");\n}\n\n// Sketch saves the following to a file called \"new.json\":\n// [\n//   {\n//     \"id\": 0,\n//     \"species\": \"Capra hircus\",\n//     \"name\": \"Goat\"\n//   },\n//   {\n//     \"id\": 1,\n//     \"species\": \"Panthera pardus\",\n//     \"name\": \"Leopard\"\n//   },\n//   {\n//     \"id\": 2,\n//     \"species\": \"Equus zebra\",\n//     \"name\": \"Zebra\"\n//   }\n// ]\n"},"extension":"pde"}}]}} ''',
    'JSONObject':
        r''' {"json":{"name":"JSONObject","description":"A <b>JSONObject</b> stores JSON data with multiple name/value pairs. Values\n can be numeric, <b>Strings</b>, <b>booleans</b>, other <b>JSONObject</b>s or\n <b>JSONArray</b>s, or null. <b>JSONObject</b> and <b>JSONArray</b> objects\n are quite similar and share most of the same methods; the primary difference\n is that the latter stores an array of JSON objects, while the former\n represents a single JSON object.<br />\n <br />\n JSON can be generated from scratch, dynamically, or using data from an\n existing file. JSON can also be output and saved to disk, as in the example\n above.\n \n ","constructors":[],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"JSONObject_getString_","name":"getString()","desc":"Gets the <b>String</b> value associated with the specified key"},{"anchor":"JSONObject_getInt_","name":"getInt()","desc":"Gets the <b>int</b> value associated with the specified key"},{"anchor":"JSONObject_getFloat_","name":"getFloat()","desc":"Gets the <b>float</b> value associated with a key"},{"anchor":"JSONObject_getBoolean_","name":"getBoolean()","desc":"Gets the <b>boolean</b> value associated with the specified key"},{"anchor":"JSONObject_getJSONArray_","name":"getJSONArray()","desc":"Retrieves the <b>JSONArray</b> with the associated key"},{"anchor":"JSONObject_getJSONObject_","name":"getJSONObject()","desc":"Given a key value, retrieves the associated <b>JSONObject</b>"},{"anchor":"JSONObject_isNull_","name":"isNull()","desc":"Determines if the value associated with the key is <b>null</b>, that is has \n no defined value (<b>false</b>) or if it has a value (<b>true</b>)"},{"anchor":"JSONObject_setString_","name":"setString()","desc":"Inserts a new key/String pair into the <b>JSONObject</b>"},{"anchor":"JSONObject_setInt_","name":"setInt()","desc":"Inserts a new key/int pair into the <b>JSONObject</b>"},{"anchor":"JSONObject_setFloat_","name":"setFloat()","desc":"Put a key/float pair in the <b>JSONObject</b>"},{"anchor":"JSONObject_setBoolean_","name":"setBoolean()","desc":"Put a key/boolean pair in the <b>JSONObject</b>"},{"anchor":"JSONObject_setJSONObject_","name":"setJSONObject()","desc":"Sets the value of the <b>JSONObject</b> with the associated key"},{"anchor":"JSONObject_setJSONArray_","name":"setJSONArray()","desc":"Sets the value of the <b>JSONArray</b> with the associated key"}],"related":["JSONArray","loadJSONObject_","loadJSONArray_","saveJSONObject_","saveJSONArray_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"JSONObject_0","internal":{"content":"JSONObject json;\n\nvoid setup() {\n\n  json = new JSONObject();\n\n  json.setInt(\"id\", 0);\n  json.setString(\"species\", \"Panthera leo\");\n  json.setString(\"name\", \"Lion\");\n\n  saveJSONObject(json, \"data/new.json\");\n}\n\n// Sketch saves the following to a file called \"new.json\":\n// {\n//   \"id\": 0,\n//   \"species\": \"Panthera leo\",\n//   \"name\": \"Lion\"\n// }\n"},"extension":"pde"}}]}} ''',
    'Object':
        r''' {"json":{"name":"Object","description":"Objects are instances of classes. A class is a grouping of related methods (functions) and fields (variables and constants).\n","constructors":[],"category":"Data","subcategory":"Composite","classFields":[],"methods":[],"related":["class"],"parameters":[{"name":"ClassName","description":"the class from which to create the new object"},{"name":"instanceName","description":"the name for the new object"}]},"pdes":{"edges":[{"node":{"name":"Object_0","internal":{"content":"// Declare and construct two objects (h1, h2) from the class HLine \nHLine h1 = new HLine(20, 2.0); \nHLine h2 = new HLine(50, 2.5); \n \nvoid setup() \n{\n  size(200, 200);\n  frameRate(30);\n}\n\nvoid draw() { \n  background(204);\n  h1.update(); \n  h2.update();  \n} \n \nclass HLine { \n  float ypos, speed; \n  HLine (float y, float s) {  \n    ypos = y; \n    speed = s; \n  } \n  void update() { \n    ypos += speed; \n    if (ypos > height) { \n      ypos = 0; \n    } \n    line(0, ypos, width, ypos); \n  } \n} \n"},"extension":"pde"}}]}} ''',
    'PFont':
        r''' {"json":{"name":"PFont","description":"PFont is the font class for Processing. To create a font to use with\n Processing, select \"Create Font...\" from the Tools menu. This will create a\n font in the format Processing requires and also adds it to the current\n sketch's data directory. Processing displays fonts using the .vlw font\n format, which uses images for each letter, rather than defining them through\n vector data. The <b>loadFont()</b> function constructs a new font and\n <b>textFont()</b> makes a font active. The <b>list()</b> method creates a\n list of the fonts installed on the computer, which is useful information to\n use with the <b>createFont()</b> function for dynamically converting fonts\n into a format to use with Processing.<br />\n <br />\n To create a new font dynamically, use the <b>createFont()</b> function. Do\n not use the syntax <b>new PFont()</b>.\n\n ","constructors":[],"category":"typography","subcategory":"","classFields":[],"methods":[{"anchor":"PFont_list_","name":"list()","desc":"Gets a list of the fonts installed on the system"}],"related":["loadFont_","createFont_","PGraphics_textFont_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"PFont_0","internal":{"content":"size(400, 400);\nPFont font;\n// The font must be located in the sketch's \n// \"data\" directory to load successfully\nfont = createFont(\"LetterGothicStd.otf\", 128);\ntextFont(font);\ntext(\"word\", 50, 200);"},"extension":"pde"}}]}} ''',
    'PGraphics':
        r''' {"json":{"name":"PGraphics","description":"Main graphics and rendering context, as well as the base API implementation\n for processing \"core\". Use this class if you need to draw into an off-screen\n graphics buffer. A PGraphics object can be constructed with the\n <b>createGraphics()</b> function. The <b>beginDraw()</b> and <b>endDraw()</b>\n methods (see above example) are necessary to set up the buffer and to\n finalize it. The fields and methods for this class are extensive. For a\n complete list, visit the\n <a href=\"http://processing.github.io/processing-javadocs/core/\">developer's\n reference.</a><br />\n <br />\n To create a new graphics context, use the <b>createGraphics()</b> function.\n Do not use the syntax <b>new PGraphics()</b>.\n\n ","constructors":["PGraphics()"],"category":"rendering","subcategory":"","classFields":[],"methods":[{"anchor":"PGraphics_beginDraw_","name":"beginDraw()","desc":"Sets the default properties for a <b>PGraphics</b> object"},{"anchor":"PGraphics_endDraw_","name":"endDraw()","desc":"Finalizes the rendering of a <b>PGraphics</b> object so that it can be shown on screen"}],"related":["createGraphics_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"PGraphics_0","internal":{"content":"PGraphics pg;\n\nvoid setup() {\n  size(100, 100);\n  pg = createGraphics(40, 40);\n}\n\nvoid draw() {\n  pg.beginDraw();\n  pg.background(100);\n  pg.stroke(255);\n  pg.line(20, 20, mouseX, mouseY);\n  pg.endDraw();\n  image(pg, 9, 30); \n  image(pg, 51, 30);\n}\n"},"extension":"pde"}}]}} ''',
    'PI':
        r''' {"json":{"name":"PI","classanchor":null,"description":"<b>PI</b> is a mathematical constant with the value 3.1415927. It is the\n ratio of the circumference of a circle to its diameter. It is useful in\n combination with the trigonometric functions <b>sin()</b> and <b>cos()</b>.","syntax":null,"category":"constants","subcategory":"","parameters":null,"related":["TWO_PI","TAU","HALF_PI","QUARTER_PI"],"returns":null},"pdes":{"edges":[{"node":{"name":"PI","internal":{"content":"size(400, 400);\nfloat x = width/2;\nfloat y = height/2;\nfloat d = width * 0.8;\narc(x, y, d, d, 0, QUARTER_PI);\narc(x, y, d-80, d-80, 0, HALF_PI);\narc(x, y, d-160, d-160, 0, PI);\narc(x, y, d-240, d-240, 0, TWO_PI);\n"},"extension":"pde"}}]}} ''',
    'PImage':
        r''' {"json":{"name":"PImage","description":"Datatype for storing images. Processing can display <b>.gif</b>, <b>.jpg</b>,\n <b>.tga</b>, and <b>.png</b> images. Images may be displayed in 2D and 3D\n space. Before an image is used, it must be loaded with the <b>loadImage()</b>\n function. The <b>PImage</b> class contains fields for the <b>width</b> and\n <b>height</b> of the image, as well as an array called <b>pixels[]</b> that\n contains the values for every pixel in the image. The methods described below\n allow easy access to the image's pixels and alpha channel and simplify the\n process of compositing.<br />\n <br />\n Before using the <b>pixels[]</b> array, be sure to use the\n <b>loadPixels()</b> method on the image to make sure that the pixel data is\n properly loaded.<br />\n <br />\n To create a new image, use the <b>createImage()</b> function. Do not use the\n syntax <b>new PImage()</b>.","constructors":["PImage(width, height, format, factor)","PImage(width, height, pixels, requiresCheckAlpha, parent)","PImage(width, height, pixels, requiresCheckAlpha, parent, format, factor)","PImage(img)"],"category":"image","subcategory":"","classFields":[{"anchor":"PImage_pixels","name":"pixels[]","desc":"Array containing the color of every pixel in the image"},{"anchor":"PImage_width","name":"width","desc":"The width of the image in units of pixels"},{"anchor":"PImage_height","name":"height","desc":"The height of the image in units of pixels"}],"methods":[{"anchor":"PImage_loadPixels_","name":"loadPixels()","desc":"Loads the pixel data for the image into its <b>pixels[]</b> array"},{"anchor":"PImage_updatePixels_","name":"updatePixels()","desc":"Updates the image with the data in its <b>pixels[]</b> array"},{"anchor":"PImage_resize_","name":"resize()","desc":"Resize the image to a new width and height"},{"anchor":"PImage_get_","name":"get()","desc":"Reads the color of any pixel or grabs a rectangle of pixels"},{"anchor":"PImage_set_","name":"set()","desc":"Writes a color to any pixel or writes an image into another"},{"anchor":"PImage_mask_","name":"mask()","desc":"Masks part of an image with another image as an alpha channel"},{"anchor":"PImage_filter_","name":"filter()","desc":"Converts the image to grayscale or black and white"},{"anchor":"PImage_copy_","name":"copy()","desc":"Copies the entire image"},{"anchor":"PImage_blendColor_","name":"blendColor()","desc":"Blends two color values together based on the blending mode given as the\n <b>MODE</b> parameter"},{"anchor":"PImage_blend_","name":"blend()","desc":"Copies a pixel or rectangle of pixels using different blending modes"},{"anchor":"PImage_save_","name":"save()","desc":"Saves the image to a TIFF, TARGA, PNG, or JPEG file"}],"related":["loadImage_","imageMode_","createImage_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"PImage","internal":{"content":"PImage photo;\n\nvoid setup() {\n  size(400, 400);\n  photo = loadImage(\"Toyokawa-city.jpg\");\n}\n\nvoid draw() {\n  image(photo, 0, 0);\n}"},"extension":"pde"}}]}} ''',
    'PShader':
        r''' {"json":{"name":"PShader","description":"This class encapsulates a GLSL shader program, including a vertex and a\n fragment shader. It's compatible with the P2D and P3D renderers, but not with\n the default renderer. Use the <b>loadShader()</b> function to load your\n shader code. [Note: It's strongly encouraged to use <b>loadShader()</b> to\n create a <b>PShader</b> object, rather than calling the <b>PShader</b> constructor\n manually.]","constructors":["PShader()","PShader(parent)","PShader(parent, vertFilename, fragFilename)","PShader(parent, vertURL, fragURL)","PShader(parent, vertSource, fragSource)"],"category":"rendering","subcategory":"shaders","classFields":[],"methods":[{"anchor":"PShader_set_","name":"set()","desc":"Sets a variable within the shader"}],"related":[],"parameters":[{"name":"parent","description":"the parent program"},{"name":"vertFilename","description":"name of the vertex shader"},{"name":"fragFilename","description":"name of the fragment shader"},{"name":"vertURL","description":"network location of the vertex shader"},{"name":"fragURL","description":"network location of the fragment shader"}]},"pdes":{"edges":[{"node":{"name":"PShader_0","internal":{"content":"PShader blur;\n\nvoid setup() {\n  size(640, 360, P2D);\n  // Shaders files must be in the \"data\" folder to load correctly\n  blur = loadShader(\"blur.glsl\"); \n  stroke(0, 102, 153);\n  rectMode(CENTER);\n}\n\nvoid draw() {\n  filter(blur);  \n  rect(mouseX-75, mouseY, 150, 150); \n  ellipse(mouseX+75, mouseY, 150, 150);\n}\n"},"extension":"pde"}},{"node":{"name":"PShader_set_0","internal":{"content":"PImage tex;\nPShader deform;\n\nvoid setup() {\n  size(640, 360, P2D);\n  tex = loadImage(\"tex1.jpg\");\n  deform = loadShader(\"deform.glsl\");\n  deform.set(\"resolution\", float(width), float(height));\n}\n\nvoid draw() {\n  deform.set(\"time\", millis() / 1000.0);\n  deform.set(\"mouse\", float(mouseX), float(mouseY));\n  shader(deform);\n  image(tex, 0, 0, width, height);\n}\n"},"extension":"pde"}}]}} ''',
    'PShape':
        r''' {"json":{"name":"PShape","description":"Datatype for storing shapes. Before a shape is used, it must be loaded with\n the <b>loadShape()</b> or created with the <b>createShape()</b>. The\n <b>shape()</b> function is used to draw the shape to the display window.\n Processing can currently load and display SVG (Scalable Vector Graphics) and\n OBJ shapes. OBJ files can only be opened using the <b>P3D</b> renderer. The\n <b>loadShape()</b> function supports SVG files created with Inkscape and\n Adobe Illustrator. It is not a full SVG implementation, but offers some\n straightforward support for handling vector data. <br />\n <br />\n The <b>PShape</b> object contains a group of methods that can operate on the\n shape data. Some of the methods are listed below, but the full list used for\n creating and modifying shapes is\n <a href=\"http://processing.github.io/processing-javadocs/core/\">available\n here in the Processing Javadoc</a>.<br />\n <br />\n To create a new shape, use the <b>createShape()</b> function. Do not use the\n syntax <b>new PShape()</b>.\n\n ","constructors":["PShape(g, kind, params)"],"category":"shape","subcategory":"","classFields":[{"anchor":"PShape_width","name":"width","desc":"Shape document width"},{"anchor":"PShape_height","name":"height","desc":"Shape document height"}],"methods":[{"anchor":"PShape_isVisible_","name":"isVisible()","desc":"Returns a boolean value <b>true</b> if the image is set to be visible,\n           <b>false</b> if not"},{"anchor":"PShape_setVisible_","name":"setVisible()","desc":"Sets the shape to be visible or invisible"},{"anchor":"PShape_disableStyle_","name":"disableStyle()","desc":"Disables the shape's style data and uses Processing styles"},{"anchor":"PShape_enableStyle_","name":"enableStyle()","desc":"Enables the shape's style data and ignores the Processing styles"},{"anchor":"PShape_beginContour_","name":"beginContour()","desc":"Starts a new contour"},{"anchor":"PShape_endContour_","name":"endContour()","desc":"Ends a contour"},{"anchor":"PShape_beginShape_","name":"beginShape()","desc":"Starts the creation of a new <b>PShape</b>"},{"anchor":"PShape_endShape_","name":"endShape()","desc":"Finishes the creation of a new <b>PShape</b>"},{"anchor":"PShape_getChildCount_","name":"getChildCount()","desc":"Returns the number of children"},{"anchor":"PShape_getChild_","name":"getChild()","desc":"Returns a child element of a shape as a <b>PShape</b> object"},{"anchor":"PShape_addChild_","name":"addChild()","desc":"Adds a new child"},{"anchor":"PShape_getVertexCount_","name":"getVertexCount()","desc":"Returns the total number of vertices as an int"},{"anchor":"PShape_getVertex_","name":"getVertex()","desc":"Returns the vertex at the index position"},{"anchor":"PShape_setVertex_","name":"setVertex()","desc":"Sets the vertex at the index position"},{"anchor":"PShape_setFill_","name":"setFill()","desc":"Set the fill value"},{"anchor":"PShape_setStroke_","name":"setStroke()","desc":"Set the stroke value"},{"anchor":"PShape_translate_","name":"translate()","desc":"Displaces the shape"},{"anchor":"PShape_rotateX_","name":"rotateX()","desc":"Rotates the shape around the x-axis"},{"anchor":"PShape_rotateY_","name":"rotateY()","desc":"Rotates the shape around the y-axis"},{"anchor":"PShape_rotateZ_","name":"rotateZ()","desc":"Rotates the shape around the z-axis"},{"anchor":"PShape_rotate_","name":"rotate()","desc":"Rotates the shape"},{"anchor":"PShape_scale_","name":"scale()","desc":"Increases and decreases the size of a shape"},{"anchor":"PShape_resetMatrix_","name":"resetMatrix()","desc":"Replaces the current matrix of a shape with the identity matrix"}],"related":["loadShape_","createShape_","shapeMode_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"PShape","internal":{"content":"  \nPShape s;\n\nvoid setup() {\n  size(400, 400);\n  // The file \"bot.svg\" must be in the data folder\n  // of the current sketch to load successfully\n  s = loadShape(\"bot.svg\");\n}\n\nvoid draw() {\n shape(s, 40, 40, 320, 320);\n}"},"extension":"pde"}},{"node":{"name":"PShape_1","internal":{"content":"PShape square;  // The PShape object\n\nvoid setup() {  \n  size(100, 100);\n  // Creating the PShape as a square. The corner \n  // is 0,0 so that the center is at 40,40 \n  square = createShape(RECT, 0, 0, 80, 80);\n}\n\nvoid draw() {\n  shape(square, 10, 10);\n}\n"},"extension":"pde"}}]}} ''',
    'PVector':
        r''' {"json":{"name":"PVector","description":"A class to describe a two or three dimensional vector, specifically a\n Euclidean (also known as geometric) vector. A vector is an entity that has\n both magnitude and direction. The datatype, however, stores the components of\n the vector (x,y for 2D, and x,y,z for 3D). The magnitude and direction can be\n accessed via the methods <b>mag()</b> and <b>heading()</b>.<br />\n <br />\n In many of the Processing examples, you will see <b>PVector</b> used to\n describe a position, velocity, or acceleration. For example, if you consider\n a rectangle moving across the screen, at any given instant it has a position\n (a vector that points from the origin to its location), a velocity (the rate\n at which the object's position changes per time unit, expressed as a vector),\n and acceleration (the rate at which the object's velocity changes per time\n unit, expressed as a vector). Since vectors represent groupings of values, we\n cannot simply use traditional addition/multiplication/etc. Instead, we'll\n need to do some \"vector\" math, which is made easy by the methods inside the\n <b>PVector</b> class.\n\n ","constructors":["PVector()","PVector(x, y, z)","PVector(x, y)"],"category":"math","subcategory":"","classFields":[{"anchor":"PVector_x","name":"x","desc":"The x component of the vector"},{"anchor":"PVector_y","name":"y","desc":"The y component of the vector"},{"anchor":"PVector_z","name":"z","desc":"The z component of the vector"}],"methods":[{"anchor":"PVector_set_","name":"set()","desc":"Set the components of the vector"},{"anchor":"PVector_random2D_","name":"random2D()","desc":"Make a new 2D unit vector with a random direction"},{"anchor":"PVector_random3D_","name":"random3D()","desc":"Make a new 3D unit vector with a random direction"},{"anchor":"PVector_fromAngle_","name":"fromAngle()","desc":"Make a new 2D unit vector from an angle"},{"anchor":"PVector_copy_","name":"copy()","desc":"Get a copy of the vector"},{"anchor":"PVector_mag_","name":"mag()","desc":"Calculate the magnitude of the vector"},{"anchor":"PVector_magSq_","name":"magSq()","desc":"Calculate the magnitude of the vector, squared"},{"anchor":"PVector_add_","name":"add()","desc":"Adds x, y, and z components to a vector, one vector to another, or\n           two independent vectors"},{"anchor":"PVector_sub_","name":"sub()","desc":"Subtract x, y, and z components from a vector, one vector from\n           another, or two independent vectors"},{"anchor":"PVector_mult_","name":"mult()","desc":"Multiply a vector by a scalar"},{"anchor":"PVector_div_","name":"div()","desc":"Divide a vector by a scalar"},{"anchor":"PVector_dist_","name":"dist()","desc":"Calculate the distance between two points"},{"anchor":"PVector_dot_","name":"dot()","desc":"Calculate the dot product of two vectors"},{"anchor":"PVector_cross_","name":"cross()","desc":"Calculate and return the cross product"},{"anchor":"PVector_normalize_","name":"normalize()","desc":"Normalize the vector to a length of 1"},{"anchor":"PVector_limit_","name":"limit()","desc":"Limit the magnitude of the vector"},{"anchor":"PVector_setMag_","name":"setMag()","desc":"Set the magnitude of the vector"},{"anchor":"PVector_heading_","name":"heading()","desc":"Calculate the angle of rotation for this vector"},{"anchor":"PVector_rotate_","name":"rotate()","desc":"Rotate the vector by an angle (2D only)"},{"anchor":"PVector_lerp_","name":"lerp()","desc":"Linear interpolate the vector to another vector"},{"anchor":"PVector_angleBetween_","name":"angleBetween()","desc":"Calculate and return the angle between two vectors"},{"anchor":"PVector_array_","name":"array()","desc":"Return a representation of the vector as a float array"}],"related":[],"parameters":[{"name":"x","description":"the x coordinate."},{"name":"y","description":"the y coordinate."},{"name":"z","description":"the z coordinate."}]},"pdes":{"edges":[{"node":{"name":"PVector_0","internal":{"content":"PVector v1, v2;\n\nvoid setup() {\n  noLoop();\n  v1 = new PVector(40, 20);\n  v2 = new PVector(25, 50); \n}\n\nvoid draw() {\n  ellipse(v1.x, v1.y, 12, 12);\n  ellipse(v2.x, v2.y, 12, 12);\n  v2.add(v1);\n  ellipse(v2.x, v2.y, 24, 24);\n}\n"},"extension":"pde"}}]}} ''',
    'PrintWriter':
        r''' {"json":{"name":"PrintWriter","description":"Allows characters to print to a text-output stream. A new PrintWriter object is created with the <b>createWriter()</b> function. For the file to be made correctly, it should be flushed and must be closed with its <b>flush()</b> and <b>close()</b> methods (see above example). \n","constructors":[],"category":"output","subcategory":"files","classFields":[],"methods":[{"anchor":"PrintWriter_print_","name":"print()","desc":"Adds data to the stream"},{"anchor":"PrintWriter_println_","name":"println()","desc":"Adds data to the stream and starts a new line"},{"anchor":"PrintWriter_flush_","name":"flush()","desc":"Flushes the stream"},{"anchor":"PrintWriter_close_","name":"close()","desc":"Closes the stream"}],"related":["createWriter_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"PrintWriter_0","internal":{"content":"PrintWriter output;\n\nvoid setup() {\n  // Create a new file in the sketch directory\n  output = createWriter(\"positions.txt\"); \n}\n\nvoid draw() {\n  point(mouseX, mouseY);\n  output.println(mouseX);  // Write the coordinate to the file\n}\n\nvoid keyPressed() {\n  output.flush();  // Writes the remaining data to the file\n  output.close();  // Finishes the file\n  exit();  // Stops the program\n}\n\n"},"extension":"pde"}}]}} ''',
    'QUARTER_PI':
        r''' {"json":{"name":"QUARTER_PI","classanchor":null,"description":"<b>QUARTER_PI</b> is a mathematical constant with the value 0.7853982. It is\n one quarter the ratio of the circumference of a circle to its diameter.\n It is useful in combination with the trigonometric functions\n <b>sin()</b> and <b>cos()</b>.","syntax":null,"category":"constants","subcategory":"","parameters":null,"related":["PI","TWO_PI","TAU","HALF_PI"],"returns":null},"pdes":{"edges":[{"node":{"name":"QUARTER_PI","internal":{"content":"float x = width/2;\nfloat y = height/2;\nfloat d = width * 0.8;\nsize(400,400);\narc(x, y, d, d, 0, QUARTER_PI);\narc(x, y, d-80, d-80, 0, HALF_PI);\narc(x, y, d-160, d-160, 0, PI);\narc(x, y, d-240, d-240, 0, TWO_PI);\n"},"extension":"pde"}}]}} ''',
    'String':
        r''' {"json":{"name":"String","description":"A string is a sequence of characters. The class <b>String</b> includes methods for examining individual characters, comparing strings, searching strings, extracting parts of strings, and for converting an entire string uppercase and lowercase. Strings are always defined inside double quotes (<b>\"Abc\"</b>), and characters are always defined inside single quotes (<b>'A'</b>).<br />\n<br />\nTo compare the contents of two Strings, use the <b>equals()</b> method, as in <b>if (a.equals(b))</b>, instead of <b>if (a == b)</b>. A String is an Object, so comparing them with the <b>==</b> operator only compares whether both Strings are stored in the same memory location. Using the <b>equals()</b> method will ensure that the actual contents are compared. (The <a href=\"https://github.com/processing/processing/wiki/Troubleshooting#why-dont-these-strings-equal\">troubleshooting</a> reference has a longer explanation.)<br /> \n<br />\nBecause a String is defined between double quotation marks, to include such marks within the String itself you must use the <b>&#92;</b> (backslash) character.  (See the third example above.)  This is known as an <em>escape sequence</em>. Other escape sequences include <b>&#92;t</b> for the tab character and <b>&#92;n</b> for new line. Because backslash is the escape character, to include a single backslash within a String, you must use two consecutive backslashes, as in: <b>&#92;&#92;</b><br />\n<br />\nThere are more string methods than those linked from this page. Additional documentation is located online in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">official Java documentation</a>.\n","constructors":["String(data)","String(data, offset, length)"],"category":"Data","subcategory":"Composite","classFields":null,"methods":[{"anchor":"String_toUpperCase_","name":"toUpperCase()","desc":"Converts all of the characters in the string to uppercase"},{"anchor":"String_toLowerCase_","name":"toLowerCase()","desc":"Converts all of the characters in the string to lowercase"},{"anchor":"String_substring_","name":"substring()","desc":"Returns a new string that is a part of the original string"},{"anchor":"String_length_","name":"length()","desc":"Returns the total number of characters included in the <b>String</b> as an integer number"},{"anchor":"String_indexOf_","name":"indexOf()","desc":"Returns the index value of the first occurrence of a substring within the input string"},{"anchor":"String_equals_","name":"equals()","desc":"Compares two strings to see if they are the same"},{"anchor":"String_charAt_","name":"charAt()","desc":"Returns the character at the specified index"}],"related":["char","text_"],"parameters":[{"name":"data","description":"byte[] or char[]: either an array of bytes to be decoded into characters, or an array of characters to be combined into a string"},{"name":"offset","description":"int: index of the first character"},{"name":"length","description":"int: number of characters"}]},"pdes":{"edges":[{"node":{"name":"String_0","internal":{"content":"String str1 = \"CCCP\";\nchar data[] = {'C', 'C', 'C', 'P'};\nString str2 = new String(data);\nprintln(str1);  // Prints \"CCCP\" to the console\nprintln(str2);  // Prints \"CCCP\" to the console\n"},"extension":"pde"}},{"node":{"name":"String_1","internal":{"content":"// Comparing String objects, see reference below.\nString p = \"potato\";\n// The correct way to compare two Strings\nif (p.equals(\"potato\")) {\n  println(\"Yes, the values are the same.\");\n}\n"},"extension":"pde"}},{"node":{"name":"String_2","internal":{"content":"// Use a backslash to include quotes in a String\nString quoted = \"This one has \\\"quotes\\\"\";\nprintln(quoted);  // This one has \"quotes\"\n"},"extension":"pde"}}]}} ''',
    'StringDict':
        r''' {"json":{"name":"StringDict","description":"A simple class to use a <b>String</b> as a lookup for a <b>String</b> value. String \"keys\" \n are associated with <b>String</b> values.","constructors":["StringDict()","StringDict(pairs)","StringDict(row)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"StringDict_size_","name":"size()","desc":"Returns the number of key/value pairs"},{"anchor":"StringDict_clear_","name":"clear()","desc":"Remove all entries"},{"anchor":"StringDict_keys_","name":"keys()","desc":"Return the internal array being used to store the keys"},{"anchor":"StringDict_keyArray_","name":"keyArray()","desc":"Return a copy of the internal keys array"},{"anchor":"StringDict_values_","name":"values()","desc":"Return the internal array being used to store the values"},{"anchor":"StringDict_valueArray_","name":"valueArray()","desc":"Create a new array and copy each of the values into it"},{"anchor":"StringDict_get_","name":"get()","desc":"Return a value for the specified key"},{"anchor":"StringDict_set_","name":"set()","desc":"Create a new key/value pair or change the value of one"},{"anchor":"StringDict_hasKey_","name":"hasKey()","desc":"Check if a key is a part of the data structure"},{"anchor":"StringDict_remove_","name":"remove()","desc":"Remove a key/value pair"},{"anchor":"StringDict_sortKeys_","name":"sortKeys()","desc":"Sort the keys alphabetically"},{"anchor":"StringDict_sortKeysReverse_","name":"sortKeysReverse()","desc":"Sort the keys alphabetically in reverse"},{"anchor":"StringDict_sortValues_","name":"sortValues()","desc":"Sort by values in descending order"},{"anchor":"StringDict_sortValuesReverse_","name":"sortValuesReverse()","desc":"Sort by values in descending order"}],"related":["IntDict","FloatDict"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"StringDict_0","internal":{"content":"StringDict inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new StringDict();\n  inventory.set(\"coffee\",\"black\");\n  inventory.set(\"flour\",\"white\");\n  inventory.set(\"tea\",\"green\");\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  String s = inventory.get(\"tea\");\n  text(s, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'StringList':
        r''' {"json":{"name":"StringList","description":"Helper class for a list of <b>Strings</b>. Lists are designed to have some of the\n features of <b>ArrayLists</b>, but to maintain the simplicity and efficiency of\n working with arrays.\n\n Functions like <b>sort()</b> and <b>shuffle()</b> always act on the list itself. To get\n a sorted copy, use <b>list.copy().sort()</b>.","constructors":["StringList()"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"StringList_size_","name":"size()","desc":"Get the length of the list"},{"anchor":"StringList_clear_","name":"clear()","desc":"Remove all entries from the list"},{"anchor":"StringList_get_","name":"get()","desc":"Get an entry at a particular index"},{"anchor":"StringList_set_","name":"set()","desc":"Set an entry at a particular index"},{"anchor":"StringList_remove_","name":"remove()","desc":"Remove an element from the specified index"},{"anchor":"StringList_append_","name":"append()","desc":"Add a new entry to the list"},{"anchor":"StringList_hasValue_","name":"hasValue()","desc":"Check if a value is a part of the list"},{"anchor":"StringList_sort_","name":"sort()","desc":"Sorts the array in place"},{"anchor":"StringList_sortReverse_","name":"sortReverse()","desc":"A sort in reverse"},{"anchor":"StringList_reverse_","name":"reverse()","desc":"Reverse the order of the list"},{"anchor":"StringList_shuffle_","name":"shuffle()","desc":"Randomize the order of the list elements"},{"anchor":"StringList_lower_","name":"lower()","desc":"Make the entire list lower case"},{"anchor":"StringList_upper_","name":"upper()","desc":"Make the entire list upper case"},{"anchor":"StringList_array_","name":"array()","desc":"Create a new array with a copy of all the values"}],"related":["IntList","FloatList"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"StringList_0","internal":{"content":"StringList inventory;\n\nvoid setup() {\n  size(200, 200);\n  inventory = new StringList();\n  inventory.append(\"coffee\");\n  inventory.append(\"flour\");\n  inventory.append(\"tea\");\n  println(inventory);\n  noLoop();\n  fill(0);\n  textAlign(CENTER);\n}\n\nvoid draw() {\n  String item = inventory.get(2);\n  text(item, width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'TAU':
        r''' {"json":{"name":"TAU","classanchor":null,"description":"<b>TAU</b> is a mathematical constant with the value 6.2831855. It is the\n circle constant relating the circumference of a circle to its linear\n dimension, the ratio of the circumference of a circle to its radius. It is\n useful in combination with trigonometric functions such as <b>sin()</b> and\n <b>cos()</b>.","syntax":null,"category":"constants","subcategory":"","parameters":null,"related":["PI","TWO_PI","HALF_PI","QUARTER_PI"],"returns":null},"pdes":{"edges":[{"node":{"name":"TAU_0","internal":{"content":"float x = width/2;\nfloat y = height/2;\nfloat d = width * 0.8;\narc(x, y, d, d, 0, QUARTER_PI);\narc(x, y, d-20, d-20, 0, HALF_PI);\narc(x, y, d-40, d-40, 0, PI);\narc(x, y, d-60, d-60, 0, TAU);\n"},"extension":"pde"}}]}} ''',
    'TWO_PI':
        r''' {"json":{"name":"TWO_PI","classanchor":null,"description":"<b>TWO_PI</b> is a mathematical constant with the value 6.2831855.\n It is twice the ratio of the circumference of a circle to its diameter.\n It is useful in combination with the trigonometric functions\n <b>sin()</b> and <b>cos()</b>.","syntax":null,"category":"constants","subcategory":"","parameters":null,"related":["PI","TAU","HALF_PI","QUARTER_PI"],"returns":null},"pdes":{"edges":[{"node":{"name":"TWO_PI","internal":{"content":"float x = width/2;\nfloat y = height/2;\nfloat d = width * 0.8;\nsize(400,400)；\narc(x, y, d, d, 0, QUARTER_PI);\narc(x, y, d-80, d-80, 0, HALF_PI);\narc(x, y, d-160, d-160, 0, PI);\narc(x, y, d-240, d-240, 0, TWO_PI);\n"},"extension":"pde"}}]}} ''',
    'Table':
        r''' {"json":{"name":"Table","description":"<b>Table</b> objects store data with multiple rows and columns, much like in\n a traditional spreadsheet. Tables can be generated from scratch, dynamically,\n or using data from an existing file. Tables can also be output and saved to\n disk, as in the example above.<br />\n <br />\n Additional <b>Table</b> methods are documented in the <a href=\n \"http://processing.github.io/processing-javadocs/core/processing/data/Table.html\">Processing\n Table Javadoc</a>.\n\n ","constructors":["Table()","Table(rows)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"Table_addColumn_","name":"addColumn()","desc":"Adds a new column to a table"},{"anchor":"Table_removeColumn_","name":"removeColumn()","desc":"Removes a column from a table"},{"anchor":"Table_getColumnCount_","name":"getColumnCount()","desc":"Returns the total number of columns in a table"},{"anchor":"Table_getRowCount_","name":"getRowCount()","desc":"Returns the total number of rows in a <b>Table</b>"},{"anchor":"Table_clearRows_","name":"clearRows()","desc":"Removes all rows from a <b>Table</b>"},{"anchor":"Table_addRow_","name":"addRow()","desc":"Adds a new row of data to a <b>Table</b> object"},{"anchor":"Table_removeRow_","name":"removeRow()","desc":"Removes a row from a <b>Table</b> object"},{"anchor":"Table_getRow_","name":"getRow()","desc":"Returns a reference to the specified <b>TableRow</b>"},{"anchor":"Table_rows_","name":"rows()","desc":"Gets all rows from the table"},{"anchor":"Table_getInt_","name":"getInt()","desc":"Retrieves an integer value from the <b>Table</b>'s specified row and column"},{"anchor":"Table_setInt_","name":"setInt()","desc":"Stores an integer value in the <b>Table</b>'s specified row and column"},{"anchor":"Table_getFloat_","name":"getFloat()","desc":"Retrieves a float value from the <b>Table</b>'s specified row and column"},{"anchor":"Table_setFloat_","name":"setFloat()","desc":"Stores a float value in the <b>Table</b>'s specified row and column"},{"anchor":"Table_getString_","name":"getString()","desc":"Retrieves a String value from the <b>Table</b>'s specified row and column"},{"anchor":"Table_setString_","name":"setString()","desc":"Stores a String value in the <b>Table</b>'s specified row and column"},{"anchor":"Table_getStringColumn_","name":"getStringColumn()","desc":"Retrieves all values in the specified column"},{"anchor":"Table_findRow_","name":"findRow()","desc":"Finds a row that contains the given value"},{"anchor":"Table_findRows_","name":"findRows()","desc":"Finds multiple rows that contain the given value"},{"anchor":"Table_matchRow_","name":"matchRow()","desc":"Finds a row that matches the given expression"},{"anchor":"Table_matchRows_","name":"matchRows()","desc":"Finds multiple rows that match the given expression"},{"anchor":"Table_matchRowIterator_","name":"matchRowIterator()","desc":"Finds multiple rows that match the given expression"},{"anchor":"Table_removeTokens_","name":"removeTokens()","desc":"Removes characters from the table"},{"anchor":"Table_trim_","name":"trim()","desc":"Trims whitespace from values"},{"anchor":"Table_sort_","name":"sort()","desc":"Orders a table based on the values in a column"}],"related":["loadTable_","saveTable_","TableRow"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"Table_0","internal":{"content":"Table table;\n\nvoid setup() {\n\n  table = new Table();\n  \n  table.addColumn(\"id\");\n  table.addColumn(\"species\");\n  table.addColumn(\"name\");\n  \n  TableRow newRow = table.addRow();\n  newRow.setInt(\"id\", table.lastRowIndex());\n  newRow.setString(\"species\", \"Panthera leo\");\n  newRow.setString(\"name\", \"Lion\");\n  \n  saveTable(table, \"data/new.csv\");\n}\n\n// Sketch saves the following to a file called \"new.csv\":\n// id,species,name\n// 0,Panthera leo,Lion\n"},"extension":"pde"}}]}} ''',
    'TableRow':
        r''' {"json":{"name":"TableRow","description":"A <b>TableRow</b> object represents a single row of data values, \n stored in columns, from a <b>Table</b>.<br />\n <br />\n Additional <b>TableRow</b> methods are documented in the \n <a href=\"http://processing.github.io/processing-javadocs/core/\">Processing Data Javadoc</a>.","constructors":[],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"TableRow_getString_","name":"getString()","desc":"Get a <b>String</b> value from the specified column"},{"anchor":"TableRow_getInt_","name":"getInt()","desc":"Get an <b>integer</b> value from the specified column"},{"anchor":"TableRow_getFloat_","name":"getFloat()","desc":"Get a <b>float</b> value from the specified column"},{"anchor":"TableRow_setString_","name":"setString()","desc":"Store a <b>String</b> value in the specified column"},{"anchor":"TableRow_setInt_","name":"setInt()","desc":"Store an <b>integer</b> value in the specified column"},{"anchor":"TableRow_setFloat_","name":"setFloat()","desc":"Store a <b>float</b> value in the specified column"},{"anchor":"TableRow_getColumnCount_","name":"getColumnCount()","desc":"Get the column count"},{"anchor":"TableRow_getColumnTitle_","name":"getColumnTitle()","desc":"Get the column title."}],"related":["Table","Table_addRow_","Table_removeRow_","Table_clearRows_","Table_getRow_","Table_rows_"],"parameters":[]},"pdes":{"edges":[{"node":{"name":"TableRow_0","internal":{"content":"Table table;\n\nvoid setup() {\n\n  table = new Table();\n  \n  table.addColumn(\"number\", Table.INT);\n  table.addColumn(\"mass\", Table.FLOAT);\n  table.addColumn(\"name\", Table.STRING);\n  \n  TableRow row = table.addRow();\n  row.setInt(\"number\", 8);\n  row.setFloat(\"mass\", 15.9994);\n  row.setString(\"name\", \"Oxygen\");\n  \n  println(row.getInt(\"number\"));   // Prints 8\n  println(row.getFloat(\"mass\"));   // Prints 15.9994\n  println(row.getString(\"name\"));  // Prints \"Oxygen\n}\n"},"extension":"pde"}}]}} ''',
    'XML':
        r''' {"json":{"name":"XML","description":"<b>XML</b> is a representation of an <b>XML</b> object, able to parse <b>XML</b> code. Use\n <b>loadXML()</b> to load external XML files and create <b>XML</b>\n objects.<br />\n <br />\n Only files encoded as UTF-8 (or plain ASCII) are parsed properly; the\n encoding parameter inside <b>XML</b> files is ignored.","constructors":["XML(name)"],"category":"data","subcategory":"composite","classFields":[],"methods":[{"anchor":"XML_parse_","name":"parse()","desc":"Converts <b>String</b> content to an <b>XML</b> object"},{"anchor":"XML_getParent_","name":"getParent()","desc":"Gets a copy of the element's parent"},{"anchor":"XML_getName_","name":"getName()","desc":"Gets the element's full name"},{"anchor":"XML_setName_","name":"setName()","desc":"Sets the element's name"},{"anchor":"XML_getChildCount_","name":"getChildCount()","desc":"Returns the element's number of children"},{"anchor":"XML_hasChildren_","name":"hasChildren()","desc":"Checks whether or not an element has any children"},{"anchor":"XML_listChildren_","name":"listChildren()","desc":"Returns the names of all children as an array"},{"anchor":"XML_getChildren_","name":"getChildren()","desc":"Returns an array containing all child elements"},{"anchor":"XML_getChild_","name":"getChild()","desc":"Returns the child element with the specified index value or path"},{"anchor":"XML_addChild_","name":"addChild()","desc":"Appends a new child to the element"},{"anchor":"XML_removeChild_","name":"removeChild()","desc":"Removes the specified child"},{"anchor":"XML_getAttributeCount_","name":"getAttributeCount()","desc":"Counts the specified element's number of attributes"},{"anchor":"XML_listAttributes_","name":"listAttributes()","desc":"Returns a list of names of all attributes as an array"},{"anchor":"XML_hasAttribute_","name":"hasAttribute()","desc":"Checks whether or not an element has the specified attribute"},{"anchor":"XML_getString_","name":"getString()","desc":"Gets the content of an attribute as a <b>String</b>"},{"anchor":"XML_setString_","name":"setString()","desc":"Sets the content of an attribute as a <b>String</b>"},{"anchor":"XML_getInt_","name":"getInt()","desc":"Gets the content of an attribute as an <b>int</b>"},{"anchor":"XML_setInt_","name":"setInt()","desc":"Sets the content of an attribute as an <b>int</b>"},{"anchor":"XML_getFloat_","name":"getFloat()","desc":"Gets the content of an attribute as a <b>float</b>"},{"anchor":"XML_setFloat_","name":"setFloat()","desc":"Sets the content of an attribute as a <b>float</b>"},{"anchor":"XML_getContent_","name":"getContent()","desc":"Gets the content of an element"},{"anchor":"XML_getIntContent_","name":"getIntContent()","desc":"Gets the content of an element as an <b>int</b>"},{"anchor":"XML_getFloatContent_","name":"getFloatContent()","desc":"Gets the content of an element as a <b>float</b>"},{"anchor":"XML_setContent_","name":"setContent()","desc":"Sets the content of an element"},{"anchor":"XML_format_","name":"format()","desc":"Formats <b>XML</b> data as a <b>String</b>"},{"anchor":"XML_toString_","name":"toString()","desc":"Gets <b>XML</b> data as a <b>String</b> using default formatting"}],"related":["loadXML_","parseXML_","saveXML_"],"parameters":[{"name":"name","description":"creates a node with this name"}]},"pdes":{"edges":[{"node":{"name":"XML_0","internal":{"content":"// The following short XML file called \"mammals.xml\" is parsed\n// in the code below. It must be in the project's \"data\" folder.\n//\n// <?xml version=\"1.0\"?>\n// <mammals>\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>\n\nXML xml;\n\nvoid setup() {\n  xml = loadXML(\"mammals.xml\");\n  XML[] children = xml.getChildren(\"animal\");\n\n  for (int i = 0; i < children.length; i++) {\n    int id = children[i].getInt(\"id\");\n    String coloring = children[i].getString(\"species\");\n    String name = children[i].getContent();\n    println(id + \", \" + coloring + \", \" + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n"},"extension":"pde"}}]}} ''',
    'abs_':
        r''' {"json":{"name":"abs()","description":"Calculates the absolute value (magnitude) of a number. The absolute\n value of a number is always positive.","syntax":["abs(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number to compute","type":["float","int"]}],"related":[],"returns":"float or int","classanchor":null},"pdes":{"edges":[{"node":{"name":"abs_0","internal":{"content":"int a = abs(153);      // Sets 'a' to 153\nint b = abs(-15);      // Sets 'b' to 15\nfloat c = abs(12.234); // Sets 'c' to 12.234\nfloat d = abs(-9.23);  // Sets 'd' to 9.23 \n"},"extension":"pde"}}]}} ''',
    'acos_':
        r''' {"json":{"name":"acos()","description":"The inverse of <b>cos()</b>, returns the arc cosine of a value. This\n function expects the values in the range of -1 to 1 and values are\n returned in the range <b>0</b> to <b>PI (3.1415927)</b>.","syntax":["acos(value)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"value","description":"the value whose arc cosine is to be returned","type":["float"]}],"related":["cos_","asin_","atan_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"acos_0","internal":{"content":"float a = PI;\nfloat c = cos(a);\nfloat ac = acos(c);\n// Prints \"3.1415927 : -1.0 : 3.1415927\"\nprintln(a + \" : \" + c + \" : \" +  ac);\n"},"extension":"pde"}},{"node":{"name":"acos_1","internal":{"content":"float a = PI + PI/4.0;\nfloat c = cos(a);\nfloat ac = acos(c);\n// Prints \"3.926991 : -0.70710665 : 2.3561943\"\nprintln(a + \" : \" + c + \" : \" +  ac);\n"},"extension":"pde"}}]}} ''',
    'addassign':
        r''' {"json":{"name":"+= (add assign)","description":"Combines addition with assignment. The expression <b>a += b</b> is equivalent to <b>a = a + b</b>. \n","syntax":["value1 += value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"any numerical value the same datatype as value1","type":[]}],"related":["assign","addition","subtractassign"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"addassign_0","internal":{"content":"int a = 50;\nint b = 23;\na += b;  // Sets 'a' to 73\n"},"extension":"pde"}}]}} ''',
    'addition':
        r''' {"json":{"name":"+ (addition)","description":"Adds two values or concatenates string values. As a mathematical operator, it calculates the sum of two values. As a string operator, it combines two strings into one and converts from primitive datatypes into the String datatype if necessary. \n","syntax":["value1 + value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"String, int, float, char, byte, boolean","type":[]},{"name":"value2","description":"String, int, float, char, byte, boolean","type":[]}],"related":["increment","addassign","minus"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"addition_0","internal":{"content":"int a = 50 + 5;  // Sets 'a' to 55\nint b = a + 5;   // Sets 'b' to 60\n"},"extension":"pde"}},{"node":{"name":"addition_1","internal":{"content":"String s1 = \"Chernenko\";\nString s2 = \"Brezhnev\";\nString sc1 = s1 + s2;\nString sc2 = s1 + \", Andropov, \" + s2;\nprintln(sc1);  // Prints \"ChernenkoBrezhnev\"\nprintln(sc2);  // Prints \"Chernenko, Andropov, Brezhnev\"\n"},"extension":"pde"}},{"node":{"name":"addition_2","internal":{"content":"String s1 = \"Gorbachev\";\nint i = 1987;\nString sc1 = s1 + i;\nprintln(sc1);  // Prints \"Gorbachev1987\"\n"},"extension":"pde"}}]}} ''',
    'alpha_':
        r''' {"json":{"name":"alpha()","description":"Extracts the alpha value from a color.","syntax":["alpha(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","green_","blue_","hue_","saturation_","brightness_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"alpha_","internal":{"content":"size(400,400);\nnoStroke();\ncolor c = color(0, 126, 255, 102);\nfill(c);\nrect(60, 60, 140, 280);\nfloat value = alpha(c);  // Sets 'value' to 102\nfill(value);\nrect(200, 60, 140, 280);\n"},"extension":"pde"}}]}} ''',
    'ambientLight_':
        r''' {"json":{"name":"ambientLight()","description":"Adds an ambient light. Ambient light doesn't come from a specific direction,\n the rays of light have bounced around so much that objects are evenly lit\n from all sides. Ambient lights are almost always used in combination with\n other types of lights. Lights need to be included in the <b>draw()</b> to\n remain persistent in a looping program. Placing them in the <b>setup()</b> of\n a looping program will cause them to only have an effect the first time\n through the loop. The <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters are\n interpreted as either RGB or HSB values, depending on the current color mode.","syntax":["ambientLight(v1, v2, v3)","ambientLight(v1, v2, v3, x, y, z)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]},{"name":"x","description":"x-coordinate of the light","type":["float"]},{"name":"y","description":"y-coordinate of the light","type":["float"]},{"name":"z","description":"z-coordinate of the light","type":["float"]}],"related":["lights_","directionalLight_","pointLight_","spotLight_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"AmbientLight_0","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\n// The spheres are white by default so\n// the ambient light changes their color\nambientLight(51, 102, 126);\ntranslate(40, 200, 0);\nsphere(120);\ntranslate(240, 0, 0);\nsphere(120);\n"},"extension":"pde"}},{"node":{"name":"AmbientLight_1","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\ndirectionalLight(126, 126, 126, 0, 0, -1);\nambientLight(102, 102, 102);\ntranslate(128, 200, 0);\nrotateY(PI/5);\nbox(160);\ntranslate(240, 0, 0);\nsphere(120);\n"},"extension":"pde"}}]}} ''',
    'ambient_':
        r''' {"json":{"name":"ambient()","description":"Sets the ambient reflectance for shapes drawn to the screen. This is\n combined with the ambient light component of environment. The color\n components set through the parameters define the reflectance. For\n example in the default color mode, setting v1=255, v2=126, v3=0, would\n cause all the red light to reflect and half of the green light to\n reflect. Used in combination with <b>emissive()</b>, <b>specular()</b>,\n and <b>shininess()</b> in setting the material properties of shapes.","syntax":["ambient(rgb)","ambient(gray)","ambient(v1, v2, v3)"],"category":"lights_camera","subcategory":"material properties","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]},{"name":"gray","description":"number specifying value between white and black","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["emissive_","specular_","shininess_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"ambient_0","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\ndirectionalLight(153, 153, 153, .5, 0, -1);\nambientLight(153, 102, 0);\nambient(51, 26, 0);\ntranslate(280, 200, 0);\nsphere(120);\n"},"extension":"pde"}}]}} ''',
    'append_':
        r''' {"json":{"name":"append()","description":"Expands an array by one element and adds data to the new position. The\n datatype of the <b>element</b> parameter must be the same as the\n datatype of the array.\n <br/> <br/>\n When using an array of objects, the data returned from the function must\n be cast to the object array's data type. For example: <em>SomeClass[]\n items = (SomeClass[]) append(originalArray, element)</em>.","syntax":["append(array, value)"],"category":"data","subcategory":"array functions","parameters":[{"name":"array","description":"array to append","type":["byte[]","char[]","int[]","float[]","String[]","Object"]},{"name":"value","description":"new data for the array","type":["byte","char","int","float","String","Object"]}],"related":["shorten_","expand_"],"returns":"byte[], char[], int[], float[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"append_0","internal":{"content":"String[] sa1 = { \"OH\", \"NY\", \"CA\"}; \nString[] sa2 = append(sa1, \"MA\");\nprintln(sa2);\n// Prints updated array contents to the console:\n// [0] \"OH\"\n// [1] \"NY\"\n// [2] \"CA\"\n// [3] \"MA\"\n"},"extension":"pde"}}]}} ''',
    'applyMatrix_':
        r''' {"json":{"name":"applyMatrix()","description":"Multiplies the current matrix by the one specified through the\n parameters. This is very slow because it will try to calculate the\n inverse of the transform, so avoid it whenever possible. The equivalent\n function in OpenGL is <b>glMultMatrix()</b>.","syntax":["applyMatrix(source)","applyMatrix(n00, n01, n02, n10, n11, n12)","applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33)"],"category":"transform","subcategory":"","parameters":[{"name":"n00","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n01","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n02","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n10","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n11","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n12","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n03","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n13","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n20","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n21","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n22","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n23","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n30","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n31","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n32","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]},{"name":"n33","description":"numbers which define the 4x4 matrix to be multiplied","type":["float"]}],"related":["pushMatrix_","popMatrix_","resetMatrix_","printMatrix_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"applyMatrix_","internal":{"content":"size(400, 400, P3D);\nnoFill();\ntranslate(200, 200, 0);\nrotateY(PI/6); \nstroke(153);\nbox(140);\n// Set rotation angles\nfloat ct = cos(PI/9.0);\nfloat st = sin(PI/9.0);          \n// Matrix for rotation around the Y axis\napplyMatrix(  ct, 0.0,  st,  0.0,\n             0.0, 1.0, 0.0,  0.0,\n             -st, 0.0,  ct,  0.0,\n             0.0, 0.0, 0.0,  1.0);  \nstroke(255);\nbox(200);"},"extension":"pde"}}]}} ''',
    'arc_':
        r''' {"json":{"name":"arc()","description":"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse\n defined by the <b>a</b>, <b>b</b>, <b>c</b>, and <b>d</b> parameters. The\n origin of the arc's ellipse may be changed with the <b>ellipseMode()</b>\n function. Use the <b>start</b> and <b>stop</b> parameters to specify the\n angles (in radians) at which to draw the arc. The start/stop values must be\n in clockwise order. <br />\n <br />\n There are three ways to draw an arc; the rendering technique used is defined\n by the optional seventh parameter. The three options, depicted in the above\n examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with\n a PIE fill. <br />\n <br />\n In some cases, the <b>arc()</b> function isn't accurate enough for smooth\n drawing. For example, the shape may jitter on screen when rotating slowly. If\n you're having an issue with how arcs are rendered, you'll need to draw the\n arc yourself with <b>beginShape()</b>/<b>endShape()</b> or a <b>PShape</b>.","syntax":["arc(a, b, c, d, start, stop)","arc(a, b, c, d, start, stop, mode)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"a","description":"x-coordinate of the arc's ellipse","type":["float"]},{"name":"b","description":"y-coordinate of the arc's ellipse","type":["float"]},{"name":"c","description":"width of the arc's ellipse by default","type":["float"]},{"name":"d","description":"height of the arc's ellipse by default","type":["float"]},{"name":"start","description":"angle to start the arc, specified in radians","type":["float"]},{"name":"stop","description":"angle to stop the arc, specified in radians","type":["float"]}],"related":["ellipse_","ellipseMode_","radians_","degrees_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"arc_0","internal":{"content":"size(400,400);\narc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI+QUARTER_PI);\narc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);"},"extension":"pde"}},{"node":{"name":"arc_1","internal":{"content":"size(400,400);\narc(200, 200, 320, 320, 0, PI+QUARTER_PI, OPEN);"},"extension":"pde"}},{"node":{"name":"arc_2","internal":{"content":"size(400,400);\narc(200, 200, 320, 320, 0, PI+QUARTER_PI, CHORD);"},"extension":"pde"}},{"node":{"name":"arc_3","internal":{"content":"size(400,400);\narc(200, 200, 320, 320, 0, PI+QUARTER_PI, PIE);"},"extension":"pde"}}]}} ''',
    'arrayCopy_':
        r''' {"json":{"name":"arrayCopy()","description":"Copies an array (or part of an array) to another array. The <b>src</b>\n array is copied to the <b>dst</b> array, beginning at the position\n specified by <b>srcPosition</b> and into the position specified by\n <b>dstPosition</b>. The number of elements to copy is determined by\n <b>length</b>. Note that copying values overwrites existing values in the\n destination array. To append values instead of overwriting them, use\n <b>concat()</b>.<br />\n <br />\n The simplified version with only two arguments &mdash; <b>arrayCopy(src,\n dst)</b> &mdash; copies an entire array to another of the same size. It is\n equivalent to <b>arrayCopy(src, 0, dst, 0, src.length)</b>.<br />\n <br />\n Using this function is far more efficient for copying array data than\n iterating through a <b>for()</b> loop and copying each element\n individually. This function only copies references, which means that for\n most purposes it only copies one-dimensional arrays (a single set of\n brackets). If used with a two (or three or more) dimensional array, it will\n only copy the references at the first level, because a two dimensional\n array is simply an \"array of arrays\". This does not produce an error,\n however, because this is often the desired behavior. Internally, this\n function calls Java's <a href=\n \"https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-\">System.arraycopy()</a>\n method, so most things that apply there are inherited.","syntax":["arrayCopy(src, srcPosition, dst, dstPosition, length)","arrayCopy(src, dst, length)","arrayCopy(src, dst)"],"category":"data","subcategory":"array functions","parameters":[{"name":"src","description":"the source array","type":["Object"]},{"name":"srcPosition","description":"starting position in the source array","type":["int"]},{"name":"dst","description":"the destination array of the same data type as the source array","type":["Object"]},{"name":"dstPosition","description":"starting position in the destination array","type":["int"]},{"name":"length","description":"number of array elements to be copied","type":["int"]}],"related":["concat_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"arrayCopy_0","internal":{"content":"String[] north = { \"OH\", \"IN\", \"MI\"};\nString[] south = { \"GA\", \"FL\", \"NC\"};\narrayCopy(north, 1, south, 0, 2);\nprintln(south);\n// Prints updated array contents to the console:\n// [0] \"IN\"\n// [1] \"MI\"\n// [2] \"NC\"\n"},"extension":"pde"}},{"node":{"name":"arrayCopy_1","internal":{"content":"String[] north = { \"OH\", \"IN\", \"MI\" };\nString[] south = { \"GA\", \"FL\", \"NC\" };\narrayCopy(north, south);\nprintln(south);\n// Prints updated array contents to the console:\n// [0] \"OH\"\n// [1] \"IN\"\n// [2] \"MI\"\n"},"extension":"pde"}}]}} ''',
    'arrayaccess':
        r''' {"json":{"name":"[] (array access)","description":"The array access operator is used to specify a location within an array. The data at this location can be defined with the syntax <b>array[element] = value</b> and read with the syntax <b>value = array[element]</b> as shown in the above example.\n","syntax":["datatype[]","array[element]"],"category":"structure","subcategory":"","parameters":[{"name":"datatype","description":"any primitive or compound datatype, including user-defined classes","type":[]},{"name":"array","description":"any valid variable name","type":[]},{"name":"element","description":"int: must not exceed the length of the array minus 1","type":[]}],"related":["Array"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"arrayaccess_0","internal":{"content":"int[] numbers = new int[3]; \nnumbers[0] = 90; \nnumbers[1] = 150; \nnumbers[2] = 30; \nint a = numbers[0] + numbers[1]; // Sets variable 'a' to 240 \nint b = numbers[1] + numbers[2]; // Sets variable 'b' to 180 \n"},"extension":"pde"}}]}} ''',
    'asin_':
        r''' {"json":{"name":"asin()","description":"The inverse of <b>sin()</b>, returns the arc sine of a value. This\n function expects the values in the range of -1 to 1 and values are\n returned in the range <b>-PI/2</b> to <b>PI/2</b>.","syntax":["asin(value)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"value","description":"the value whose arc sine is to be returned","type":["float"]}],"related":["sin_","acos_","atan_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"asin_0","internal":{"content":"float a = PI/3;\nfloat s = sin(a);\nfloat as = asin(s);\n// Prints \"1.0471976 : 0.86602545 : 1.0471976\"\nprintln(a + \" : \" + s + \" : \" +  as);\n"},"extension":"pde"}},{"node":{"name":"asin_1","internal":{"content":"float a = PI + PI/3.0;\nfloat s = sin(a);\nfloat as = asin(s);\n// Prints \"4.1887903 : -0.86602545 : -1.0471976\"\nprintln(a + \" : \" + s + \" : \" +  as);\n"},"extension":"pde"}}]}} ''',
    'assign':
        r''' {"json":{"name":"= (assign)","description":"Assigns a value to a variable. The \"=\" sign does not mean \"equals\", but is used to place data within a variable. The \"=\" operator is formally called the assignment operator. There are many different types of variables (int, floats, strings, etc.) and the assignment operator can only assign values which are the same type as the variable it is assigning. For example, if the variable is of type <b>int</b>, the value must also be an <b>int</b>.\n","syntax":["var = value"],"category":"structure","subcategory":"","parameters":[{"name":"var","description":"any valid variable name","type":[]},{"name":"value","description":"any value of the same type as the variable. For example, if the variable is of type \"int\", the value must also be an int","type":[]}],"related":["addassign","subtractassign"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"assign_0","internal":{"content":"int a;\na = 30;  // Assigns for value 30 to the variable 'a'\na = a + 40;  // Assigns the value 70 to the variable 'a'\n"},"extension":"pde"}}]}} ''',
    'atan2_':
        r''' {"json":{"name":"atan2()","description":"Calculates the angle (in radians) from a specified point to the\n coordinate origin as measured from the positive x-axis. Values are\n returned as a <b>float</b> in the range from <b>PI</b> to <b>-PI</b>.\n The <b>atan2()</b> function is most often used for orienting geometry to\n the position of the cursor.  Note: The y-coordinate of the point is the\n first parameter and the x-coordinate is the second due the the structure\n of calculating the tangent.","syntax":["atan2(y, x)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"y","description":"y-coordinate of the point","type":["float"]},{"name":"x","description":"x-coordinate of the point","type":["float"]}],"related":["tan_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"atan2_0","internal":{"content":"void draw() {\n  background(204);\n  translate(width/2, height/2);\n  float a = atan2(mouseY-height/2, mouseX-width/2);\n  rotate(a);\n  rect(-30, -5, 60, 10);\n}\n"},"extension":"pde"}}]}} ''',
    'atan_':
        r''' {"json":{"name":"atan()","description":"The inverse of <b>tan()</b>, returns the arc tangent of a value. This\n function expects the values in the range of -Infinity to Infinity\n (exclusive) and values are returned in the range <b>-PI/2</b> to <b>PI/2 </b>.","syntax":["atan(value)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"value","description":"-Infinity to Infinity (exclusive)","type":["float"]}],"related":["tan_","asin_","acos_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"atan_0","internal":{"content":"float a = PI/3;\nfloat t = tan(a);\nfloat at = atan(t);\n// Prints \"1.0471976 : 1.7320509 : 1.0471976\"\nprintln(a + \" : \" + t + \" : \" +  at);\n"},"extension":"pde"}},{"node":{"name":"atan_1","internal":{"content":"float a = PI + PI/3.0;\nfloat t = tan(a);\nfloat at = atan(t);\n// Prints \"4.1887903 : 1.7320513 : 1.0471977\"\nprintln(a + \" : \" + t + \" : \" +  at);\n"},"extension":"pde"}}]}} ''',
    'background_':
        r''' {"json":{"name":"background()","description":"The <b>background()</b> function sets the color used for the background of\n the Processing window. The default background is light gray. This function is\n typically used within <b>draw()</b> to clear the display window at the\n beginning of each frame, but it can be used inside <b>setup()</b> to set the\n background on the first frame of animation or if the background need only be\n set once. <br />\n <br />\n An image can also be used as the background for a sketch, although the\n image's width and height must match that of the sketch window. Images used\n with <b>background()</b> will ignore the current <b>tint()</b> setting. To\n resize an image to the size of the sketch window, use image.resize(width,\n height). <br />\n <br />\n It is not possible to use the transparency <b>alpha</b> parameter with\n background colors on the main drawing surface. It can only be used along with\n a <b>PGraphics</b> object and <b>createGraphics()</b>.\n\n\n ","syntax":["background(rgb)","background(rgb, alpha)","background(gray)","background(gray, alpha)","background(v1, v2, v3)","background(v1, v2, v3, alpha)","background(image)"],"category":"color","subcategory":"setting","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]},{"name":"alpha","description":"opacity of the background","type":["float"]},{"name":"gray","description":"specifies a value between white and black","type":["float"]},{"name":"v1","description":"red or hue value (depending on the current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on the current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on the current color mode)","type":["float"]},{"name":"image","description":"PImage to set as background (must be same size as the sketch window)","type":["PImage"]}],"related":["stroke_","fill_","tint_","colorMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"background_0","internal":{"content":"background(51);"},"extension":"pde"}},{"node":{"name":"background_1","internal":{"content":"background(152,190,100);"},"extension":"pde"}},{"node":{"name":"background_2","internal":{"content":"PImage img;\nimg = loadImage(\"Hokkaido.jpg\");\nbackground(img);"},"extension":"pde"}}]}} ''',
    'beginCamera_':
        r''' {"json":{"name":"beginCamera()","description":"The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n advanced customization of the camera space. The functions are useful if\n you want to more control over camera movement, however for most users,\n the <b>camera()</b> function will be sufficient.<br /><br />The camera\n functions will replace any transformations (such as <b>rotate()</b> or\n <b>translate()</b>) that occur before them in <b>draw()</b>, but they\n will not automatically replace the camera transform itself. For this\n reason, camera functions should be placed at the beginning of\n <b>draw()</b> (so that transformations happen afterwards), and the\n <b>camera()</b> function can be used after <b>beginCamera()</b> if you\n want to reset the camera before applying transformations.<br /><br\n />This function sets the matrix mode to the camera matrix so calls such\n as <b>translate()</b>, <b>rotate()</b>, applyMatrix() and resetMatrix()\n affect the camera. <b>beginCamera()</b> should always be used with a\n following <b>endCamera()</b> and pairs of <b>beginCamera()</b> and\n <b>endCamera()</b> cannot be nested.","syntax":["beginCamera()"],"category":"lights_camera","subcategory":"camera","parameters":[],"related":["camera_","endCamera_","applyMatrix_","resetMatrix_","translate_","scale_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"beginCamera_0","internal":{"content":"size(400, 400, P3D);\nnoFill();\n\nbeginCamera();\ncamera();\nrotateX(-PI/6);\nendCamera();\n\ntranslate(200, 200, 0);\nrotateY(PI/3);\nbox(180);\n\n"},"extension":"pde"}}]}} ''',
    'beginContour_':
        r''' {"json":{"name":"beginContour()","description":"Use the <b>beginContour()</b> and <b>endContour()</b> function to\n create negative shapes within shapes such as the center of the\n letter 'O'. <b>beginContour()</b> begins recording vertices for the\n shape and <b>endContour()</b> stops recording. The vertices that\n define a negative shape must \"wind\" in the opposite direction from\n the exterior shape. First draw vertices for the exterior shape in\n clockwise order, then for internal shapes, draw vertices counterclockwise.<br />\n <br />\n These functions can only be used within a <b>beginShape()</b>/<b>endShape()</b>\n pair and transformations such as <b>translate()</b>, <b>rotate()</b>, and\n <b>scale()</b> do not work within a <b>beginContour()</b>/<b>endContour()</b>\n pair. It is also not possible to use other shapes, such as <b>ellipse()</b>\n or <b>rect()</b> within.","syntax":["beginContour()"],"category":"shape","subcategory":"vertex","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"beginContour_","internal":{"content":"size(400,400);\ntranslate(200, 200);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-160, -160);\nvertex(160, -160);\nvertex(160, 160);\nvertex(-160, 160);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-80, -80);\nvertex(-80, 80);\nvertex(80, 80);\nvertex(80, -80);\nendContour();\nendShape(CLOSE);\n"},"extension":"pde"}}]}} ''',
    'beginRaw_':
        r''' {"json":{"name":"beginRaw()","description":"To create vectors from 3D data, use the <b>beginRaw()</b> and\n <b>endRaw()</b> commands. These commands will grab the shape data just\n before it is rendered to the screen. At this stage, your entire scene is\n nothing but a long list of individual lines and triangles. This means\n that a shape created with <b>sphere()</b> function will be made up of\n hundreds of triangles, rather than a single object. Or that a\n multi-segment line shape (such as a curve) will be rendered as\n individual segments.\n <br /><br />\n When using <b>beginRaw()</b> and <b>endRaw()</b>, it's possible to write\n to either a 2D or 3D renderer. For instance, <b>beginRaw()</b> with the\n PDF library will write the geometry as flattened triangles and lines,\n even if recording from the <b>P3D</b> renderer.\n <br /><br />\n If you want a background to show up in your files, use <b>rect(0, 0,\n width, height)</b> after setting the <b>fill()</b> to the background\n color. Otherwise the background will not be rendered to the file because\n the background is not shape.\n <br /><br />\n Using <b>hint(ENABLE_DEPTH_SORT)</b> can improve the appearance of 3D\n geometry drawn to 2D file formats. See the <b>hint()</b> reference for\n more details.\n <br /><br />\n See examples in the reference for the <b>PDF</b> and <b>DXF</b>\n libraries for more information.","syntax":["beginRaw(renderer, filename)"],"category":"output","subcategory":"files","parameters":[{"name":"renderer","description":"for example, PDF or DXF","type":["String"]},{"name":"filename","description":"filename for output","type":["String"]}],"related":["endRaw_"],"returns":"PGraphics or void","classanchor":null},"pdes":{"edges":[{"node":{"name":"beginRaw_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(400, 400);\n  beginRaw(PDF, \"raw.pdf\");\n}\n\nvoid draw() {\n  line(pmouseX, pmouseY, mouseX, mouseY);\n}\n\nvoid keyPressed() {\n  if (key == ' ') {\n    endRaw();\n    exit();\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'beginRecord_':
        r''' {"json":{"name":"beginRecord()","description":"Opens a new file and all subsequent drawing functions are echoed to this\n file as well as the display window. The <b>beginRecord()</b> function\n requires two parameters, the first is the renderer and the second is the\n file name. This function is always used with <b>endRecord()</b> to stop the\n recording process and close the file. <br />\n <br />\n Note that <b>beginRecord()</b> will only pick up any settings that happen\n after it has been called. For instance, if you call <b>textFont()</b>\n before <b>beginRecord()</b>, then that font will not be set for the file\n that you're recording to. <br />\n <br />\n <b>beginRecord()</b> works only with the PDF and SVG renderers.","syntax":["beginRecord(renderer, filename)"],"category":"output","subcategory":"files","parameters":[{"name":"renderer","description":"PDF or SVG","type":["String"]},{"name":"filename","description":"filename for output","type":["String"]}],"related":["endRecord_"],"returns":"PGraphics or void","classanchor":null},"pdes":{"edges":[{"node":{"name":"beginRecord_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(400, 400);\n  beginRecord(PDF, \"everything.pdf\");\n}\n\nvoid draw() {\n  ellipse(mouseX, mouseY, 10, 10);\n}\n\nvoid mousePressed() {\n  endRecord();\n  exit();\n} \n"},"extension":"pde"}}]}} ''',
    'beginShape_':
        r''' {"json":{"name":"beginShape()","description":"Using the <b>beginShape()</b> and <b>endShape()</b> functions allow creating\n more complex forms. <b>beginShape()</b> begins recording vertices for a shape\n and <b>endShape()</b> stops recording. The value of the <b>kind</b> parameter\n tells it which types of shapes to create from the provided vertices. With no\n mode specified, the shape can be any irregular polygon. The parameters\n available for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN,\n TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the <b>beginShape()</b>\n function, a series of <b>vertex()</b> commands must follow. To stop drawing\n the shape, call <b>endShape()</b>. The <b>vertex()</b> function with two\n parameters specifies a position in 2D and the <b>vertex()</b> function with\n three parameters specifies a position in 3D. Each shape will be outlined with\n the current stroke color and filled with the fill color. <br />\n <br />\n Transformations such as <b>translate()</b>, <b>rotate()</b>, and\n <b>scale()</b> do not work within <b>beginShape()</b>. It is also not\n possible to use other shapes, such as <b>ellipse()</b> or <b>rect()</b>\n within <b>beginShape()</b>. <br />\n <br />\n The P2D and P3D renderers allow <b>stroke()</b> and <b>fill()</b> to be\n altered on a per-vertex basis, but the default renderer does not. Settings\n such as <b>strokeWeight()</b>, <b>strokeCap()</b>, and <b>strokeJoin()</b>\n cannot be changed while inside a <b>beginShape()</b>/<b>endShape()</b> block\n with any renderer.","syntax":["beginShape()","beginShape(kind)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"kind","description":"Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP,\n             QUADS, or QUAD_STRIP","type":["int"]}],"related":["PShape","endShape_","vertex_","curveVertex_","bezierVertex_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"beginShape_0","internal":{"content":"beginShape();\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape(CLOSE);"},"extension":"pde"}},{"node":{"name":"beginShape_1","internal":{"content":"beginShape(POINTS);\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape();"},"extension":"pde"}},{"node":{"name":"beginShape_10","internal":{"content":"beginShape();\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape(CLOSE);"},"extension":"pde"}},{"node":{"name":"beginShape_2","internal":{"content":"beginShape(LINES);\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape();"},"extension":"pde"}},{"node":{"name":"beginShape_3","internal":{"content":"noFill();\nbeginShape();\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape();\n"},"extension":"pde"}},{"node":{"name":"beginShape_4","internal":{"content":"noFill();\nbeginShape();\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape(CLOSE);"},"extension":"pde"}},{"node":{"name":"beginShape_5","internal":{"content":"beginShape(TRIANGLES);\nvertex(120, 300);\nvertex(160, 120);\nvertex(200, 300);\nvertex(270, 80);\nvertex(280, 300);\nvertex(320, 80);\nendShape();\n"},"extension":"pde"}},{"node":{"name":"beginShape_6","internal":{"content":"beginShape(TRIANGLE_STRIP);\nvertex(120, 300);\nvertex(160, 80);\nvertex(200, 300);\nvertex(240, 80);\nvertex(280, 300);\nvertex(320, 80);\nvertex(360, 300);\nendShape();"},"extension":"pde"}},{"node":{"name":"beginShape_7","internal":{"content":"beginShape(TRIANGLE_FAN);\nvertex(230, 200);\nvertex(230, 60); \nvertex(368, 200); \nvertex(230, 340); \nvertex(88, 200); \nvertex(230, 60); \nendShape();"},"extension":"pde"}},{"node":{"name":"beginShape_8","internal":{"content":"beginShape(QUADS);\nvertex(120, 80);\nvertex(120, 300);\nvertex(200, 300);\nvertex(200, 80);\nvertex(260, 80);\nvertex(260, 300);\nvertex(340, 300);\nvertex(340, 80);\nendShape();"},"extension":"pde"}},{"node":{"name":"beginShape_9","internal":{"content":"beginShape(QUAD_STRIP); \nvertex(120, 80);\nvertex(120, 300);\nvertex(200, 80);\nvertex(200, 300);\nvertex(260, 80); \nvertex(260, 300); \nvertex(340, 80);\nvertex(340, 300); \nendShape();\n"},"extension":"pde"}}]}} ''',
    'bezierDetail_':
        r''' {"json":{"name":"bezierDetail()","description":"Sets the resolution at which Beziers display. The default value is 20. This\n function is only useful when using the <b>P3D</b> renderer; the default\n <b>P2D</b> renderer does not use this information.","syntax":["bezierDetail(detail)"],"category":"shape","subcategory":"curves","parameters":[{"name":"detail","description":"resolution of the curves","type":["int"]}],"related":["curve_","curveVertex_","curveTightness_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"bezierDetail_0","internal":{"content":"// Move the mouse left and right to see the detail change\n\nvoid setup() {\n  size(100, 100, P3D);\n  noFill();\n}\n\nvoid draw() {\n  background(204);\n  int d = int(map(mouseX, 0, 100, 1, 20));\n  bezierDetail(d);\n  bezier(85, 20, 10, 10, 90, 90, 15, 80);\n}\n"},"extension":"pde"}}]}} ''',
    'bezierPoint_':
        r''' {"json":{"name":"bezierPoint()","description":"Evaluates the Bezier at point t for points a, b, c, d. The parameter t\n varies between 0 and 1, a and d are points on the curve, and b and c are\n the control points. This can be done once with the x coordinates and a\n second time with the y coordinates to get the location of a bezier curve\n at t.\n\n\n ","syntax":["bezierPoint(a, b, c, d, t)"],"category":"shape","subcategory":"curves","parameters":[{"name":"a","description":"coordinate of first point on the curve","type":["float"]},{"name":"b","description":"coordinate of first control point","type":["float"]},{"name":"c","description":"coordinate of second control point","type":["float"]},{"name":"d","description":"coordinate of second point on the curve","type":["float"]},{"name":"t","description":"value between 0 and 1","type":["float"]}],"related":["bezier_","bezierVertex_","curvePoint_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"bezierPoint_","internal":{"content":"size(400,400);\nnoFill();\nbezier(340, 80, 40, 40, 360, 360, 60, 320);\nfill(255);\nint steps = 10;\nfor (int i = 0; i <= steps; i++) {\n  float t = i / float(steps);\n  float x = bezierPoint(340, 40, 360, 60, t);\n  float y = bezierPoint(80, 40, 360, 320, t);\n  ellipse(x, y, 10, 10);\n}"},"extension":"pde"}}]}} ''',
    'bezierTangent_':
        r''' {"json":{"name":"bezierTangent()","description":"Calculates the tangent of a point on a Bezier curve. There is a good\n definition of <a href=\"http://en.wikipedia.org/wiki/Tangent\"\n target=\"new\"><em>tangent</em> on Wikipedia</a>.\n\n\n ","syntax":["bezierTangent(a, b, c, d, t)"],"category":"shape","subcategory":"curves","parameters":[{"name":"a","description":"coordinate of first point on the curve","type":["float"]},{"name":"b","description":"coordinate of first control point","type":["float"]},{"name":"c","description":"coordinate of second control point","type":["float"]},{"name":"d","description":"coordinate of second point on the curve","type":["float"]},{"name":"t","description":"value between 0 and 1","type":["float"]}],"related":["bezier_","bezierVertex_","curvePoint_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"bezierTangent_0","internal":{"content":"size(400,400);\nnoFill();\nbezier(340, 80, 40, 40, 360, 360, 60, 320);\n\nint steps = 6;\nfill(255);\nfor (int i = 0; i <= steps; i++) {\n  float t = i / float(steps);\n  // Get the location of the point\n  float x = bezierPoint(340, 40, 360, 60, t);\n  float y = bezierPoint(80, 40, 360, 320, t);\n  // Get the tangent points\n  float tx = bezierTangent(340, 40, 360, 60, t);\n  float ty = bezierTangent(80, 40, 360, 320, t);\n  // Calculate an angle from the tangent points\n  float a = atan2(ty, tx);\n  a += PI;\n  stroke(255, 102, 0);\n  line(x, y, cos(a)*120 + x, sin(a)*120 + y);\n  // The following line of code makes a line \n  // inverse of the above line\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n  stroke(0);\n  ellipse(x, y, 10, 10);\n}"},"extension":"pde"}},{"node":{"name":"bezierTangent_1","internal":{"content":"size(400,400);\n\nnoFill();\nbezier(340, 80, 40, 40, 360, 360, 60, 320);\nstroke(255, 102, 0);\nint steps = 16;\nfor (int i = 0; i <= steps; i++) {\n  float t = i / float(steps);\n  float x = bezierPoint(340, 40, 360, 60, t);\n  float y = bezierPoint(80, 40, 360, 320, t);\n  float tx = bezierTangent(340, 40, 360, 60, t);\n  float ty = bezierTangent(80, 40, 360, 320, t);\n  float a = atan2(ty, tx);\n  a -= HALF_PI;\n  line(x, y, cos(a)*32 + x, sin(a)*32 + y);\n}\n"},"extension":"pde"}}]}} ''',
    'bezierVertex_':
        r''' {"json":{"name":"bezierVertex()","description":"Specifies vertex coordinates for Bezier curves. Each call to\n <b>bezierVertex()</b> defines the position of two control points and one\n anchor point of a Bezier curve, adding a new segment to a line or shape.\n The first time <b>bezierVertex()</b> is used within a\n <b>beginShape()</b> call, it must be prefaced with a call to\n <b>vertex()</b> to set the first anchor point. This function must be\n used between <b>beginShape()</b> and <b>endShape()</b> and only when\n there is no MODE parameter specified to <b>beginShape()</b>. Using the\n 3D version requires rendering with P3D (see the Environment reference\n for more information).","syntax":["bezierVertex(x2, y2, x3, y3, x4, y4)","bezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"x2","description":"the x-coordinate of the 1st control point","type":["float"]},{"name":"y2","description":"the y-coordinate of the 1st control point","type":["float"]},{"name":"z2","description":"the z-coordinate of the 1st control point","type":["float"]},{"name":"x3","description":"the x-coordinate of the 2nd control point","type":["float"]},{"name":"y3","description":"the y-coordinate of the 2nd control point","type":["float"]},{"name":"z3","description":"the z-coordinate of the 2nd control point","type":["float"]},{"name":"x4","description":"the x-coordinate of the anchor point","type":["float"]},{"name":"y4","description":"the y-coordinate of the anchor point","type":["float"]},{"name":"z4","description":"the z-coordinate of the anchor point","type":["float"]}],"related":["curveVertex_","vertex_","quadraticVertex_","bezier_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"bezierVertex_0","internal":{"content":"size(400,400);\nnoFill();\nbeginShape();\nvertex(120, 80);\nbezierVertex(320, 0, 320, 300, 120, 300);\nendShape();\n"},"extension":"pde"}},{"node":{"name":"bezierVertex_1","internal":{"content":"size(400,400);\nbeginShape();\nvertex(120, 80);\nbezierVertex(320, 0, 320, 300, 90, 300);\nbezierVertex(200, 320, 240, 100, 120, 80);\nendShape();"},"extension":"pde"}}]}} ''',
    'bezier_':
        r''' {"json":{"name":"bezier()","description":"Draws a Bezier curve on the screen. These curves are defined by a series\n of anchor and control points. The first two parameters specify the first\n anchor point and the last two parameters specify the other anchor point.\n The middle parameters specify the control points which define the shape\n of the curve. Bezier curves were developed by French engineer Pierre\n Bezier. Using the 3D version requires rendering with P3D (see the\n Environment reference for more information).\n\n\n ","syntax":["bezier(x1, y1, x2, y2, x3, y3, x4, y4)","bezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)"],"category":"shape","subcategory":"curves","parameters":[{"name":"x1","description":"coordinates for the first anchor point","type":["float"]},{"name":"y1","description":"coordinates for the first anchor point","type":["float"]},{"name":"z1","description":"coordinates for the first anchor point","type":["float"]},{"name":"x2","description":"coordinates for the first control point","type":["float"]},{"name":"y2","description":"coordinates for the first control point","type":["float"]},{"name":"z2","description":"coordinates for the first control point","type":["float"]},{"name":"x3","description":"coordinates for the second control point","type":["float"]},{"name":"y3","description":"coordinates for the second control point","type":["float"]},{"name":"z3","description":"coordinates for the second control point","type":["float"]},{"name":"x4","description":"coordinates for the second anchor point","type":["float"]},{"name":"y4","description":"coordinates for the second anchor point","type":["float"]},{"name":"z4","description":"coordinates for the second anchor point","type":["float"]}],"related":["bezierVertex_","curve_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"bezier_0","internal":{"content":"noFill();\nstroke(255, 102, 0);\nline(340, 80, 40, 40);\nline(360, 360, 60, 320);\nstroke(0, 0, 0);\nbezier(340, 80, 40, 40, 360, 360, 60, 320);"},"extension":"pde"}},{"node":{"name":"bezier_1","internal":{"content":"size(400,400);\nnoFill();\nstroke(255, 102, 0);\nline(120, 80, 320, 20);\nline(320, 300, 120, 300);\nstroke(0, 0, 0);\nbezier(120, 80,  320, 20,  320, 300,  120, 300);"},"extension":"pde"}}]}} ''',
    'binary_':
        r''' {"json":{"name":"binary()","description":"Converts an <b>int</b>, <b>byte</b>, <b>char</b>, or <b>color</b> to a\n <b>String</b> containing the equivalent binary notation. For example, the\n <b>color</b> value produced by <b>color(0, 102, 153, 255)</b> will convert\n to the <b>String</b> value <b>\"11111111000000000110011010011001\"</b>. This\n function can help make your geeky debugging sessions much happier.<br />\n <br />\n Note that the maximum number of digits is 32, because an <b>int</b> value\n can only represent up to 32 bits. Specifying more than 32 digits will have\n no effect.","syntax":["binary(value)","binary(value, digits)"],"category":"data","subcategory":"conversion","parameters":[{"name":"value","description":"value to convert","type":["int","char"]},{"name":"digits","description":"number of digits to return","type":["int"]}],"related":["unbinary_","hex_","unhex_"],"returns":"String","classanchor":null},"pdes":{"edges":[{"node":{"name":"binary_0","internal":{"content":"color c = color(255, 204, 0);\nprintln(c);             // Prints \"-13312\"\nprintln(binary(c));     // Prints \"11111111111111111100110000000000\"\nprintln(binary(c, 16)); // Prints \"1100110000000000\"\n\n"},"extension":"pde"}}]}} ''',
    'bitwiseAND':
        r''' {"json":{"name":"& (bitwise AND)","description":"Compares each corresponding bit in the binary representation of the values. For each comparison two 1's yield 1, 1 and 0 yield 0, and two 0's yield 0. This is easy to see when we look at the binary representation of numbers<br />\n<br />\n<pre>  11010110  // 214\n& 01011100  // 92\n  --------\n  01010100  // 84</pre>\n<br />\nTo see the binary representation of a number, use the <b>binary()</b> function with <b>println()</b>.\n","syntax":[],"category":"math","subcategory":"Bitwise Operators","parameters":[{"name":"value1","description":"int, char, byte","type":[]},{"name":"value2","description":"int, char, byte","type":[]}],"related":["bitwiseOR","binary_"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"bitwiseAND_0","internal":{"content":"int a = 207;    // In binary: 11001111\nint b = 61;     // In binary: 00111101\nint c = a & b; // In binary: 00001101\nprintln(c);     // Prints \"13\", the decimal equivalent to 00001101\n"},"extension":"pde"}},{"node":{"name":"bitwiseAND_1","internal":{"content":"color argb = color(204, 204, 51, 255);\n// The sytax \"& 0xFF\" compares the binary\n// representation of the two values and\n// makes all but the last 8 bits into a 0.\n// \"0xFF\" is 00000000000000000000000011111111\nint a = argb >> 24 & 0xFF;\nint r = argb >> 16 & 0xFF;\nint g = argb >> 8 & 0xFF;\nint b = argb & 0xFF;\nfill(r, g, b, a);\nrect(30, 20, 55, 55);\n"},"extension":"pde"}}]}} ''',
    'bitwiseOR':
        r''' {"json":{"name":"| (bitwise OR)","description":"Compares each corresponding bit in the binary representation of the values. For each comparison two 1's yield 1, 1 and 0 yield 1, and two 0's yield 0. This is easy to see when we look at the binary representation of numbers<br />\n<br />\n<pre>  11010110  // 214\n| 01011100  // 92\n  --------\n  11011110  // 222</pre>\n<br />\nTo see the binary representation of a number, use the <b>binary()</b> function with <b>println()</b>.\n","syntax":["value | value2"],"category":"math","subcategory":"Bitwise Operators","parameters":[{"name":"value1","description":"int, char, byte","type":[]},{"name":"value2","description":"int, char, byte","type":[]}],"related":["bitwiseAND","binary_"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"bitwiseOR_0","internal":{"content":"int a = 205;   // In binary: 11001101\nint b = 45;    // In binary: 00101101\nint c = a | b; // In binary: 11101101\nprintln(c);    // Prints \"237\", the decimal equivalent to 11101101\n"},"extension":"pde"}},{"node":{"name":"bitwiseOR_1","internal":{"content":"\nint a = 255 << 24; // Binary: 11111111000000000000000000000000\nint r = 204 << 16; // Binary: 00000000110011000000000000000000\nint g = 204 << 8;  // Binary  00000000000000001100110000000000\nint b = 51;        // Binary: 00000000000000000000000000110011\n// OR the values together:    11111111110011001100110000110011 \ncolor argb = a | r | g | b; \nfill(argb); \nrect(30, 20, 55, 55); \n"},"extension":"pde"}}]}} ''',
    'blendMode_':
        r''' {"json":{"name":"blendMode()","description":"Blends the pixels in the display window according to a defined mode.\n There is a choice of the following modes to blend the source pixels (A)\n with the ones of pixels already in the display window (B). Each pixel's\n final color is the result of applying one of the blend modes with each\n channel of (A) and (B) independently. The red channel is compared with\n red, green with green, and blue with blue.<br />\n <br />\n BLEND - linear interpolation of colors: <b>C = A*factor + B</b>. This is the default.<br />\n <br />\n ADD - additive blending with white clip: <b>C = min(A*factor + B, 255)</b><br />\n <br />\n SUBTRACT - subtractive blending with black clip: <b>C = max(B - A*factor, 0)</b><br />\n <br />\n DARKEST - only the darkest color succeeds: <b>C = min(A*factor, B)</b><br />\n <br />\n LIGHTEST - only the lightest color succeeds: <b>C = max(A*factor, B)</b><br />\n <br />\n DIFFERENCE - subtract colors from underlying image.<br />\n <br />\n EXCLUSION - similar to DIFFERENCE, but less extreme.<br />\n <br />\n MULTIPLY - multiply the colors, result will always be darker.<br />\n <br />\n SCREEN - opposite multiply, uses inverse values of the colors.<br />\n <br />\n REPLACE - the pixels entirely replace the others and don't utilize alpha (transparency) values<br />\n <br />\n We recommend using <b>blendMode()</b> and not the previous <b>blend()</b>\n function. However, unlike <b>blend()</b>, the <b>blendMode()</b> function\n does not support the following: HARD_LIGHT, SOFT_LIGHT, OVERLAY, DODGE,\n BURN. On older hardware, the LIGHTEST, DARKEST, and DIFFERENCE modes might\n not be available as well.","syntax":["blendMode(mode)"],"category":"rendering","subcategory":"","parameters":[{"name":"mode","description":"the blending mode to use","type":["int"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"blendMode_0","internal":{"content":"size(100, 100);\nbackground(0);\nblendMode(ADD);\nstroke(102);\nstrokeWeight(30);\nline(25, 25, 75, 75);\nline(75, 25, 25, 75);\n"},"extension":"pde"}},{"node":{"name":"blendMode_1","internal":{"content":"size(100, 100, P2D);\nblendMode(MULTIPLY);\nstroke(51);\nstrokeWeight(30);\nline(25, 25, 75, 75);\nline(75, 25, 25, 75);\n"},"extension":"pde"}}]}} ''',
    'blend_':
        r''' {"json":{"name":"blend()","description":"Blends a region of pixels into the image specified by the <b>img</b>\n parameter. These copies utilize full alpha channel support and a choice\n of the following modes to blend the colors of source pixels (A) with the\n ones of pixels in the destination image (B):<br />\n <br />\n BLEND - linear interpolation of colours: <b>C = A*factor + B</b><br />\n <br />\n ADD - additive blending with white clip: <b>C = min(A*factor + B, 255)</b><br />\n <br />\n SUBTRACT - subtractive blending with black clip: <b>C = max(B - A*factor,\n 0)</b><br />\n <br />\n DARKEST - only the darkest colour succeeds: <b>C = min(A*factor, B)</b><br />\n <br />\n LIGHTEST - only the lightest colour succeeds: <b>C = max(A*factor, B)</b><br />\n <br />\n DIFFERENCE - subtract colors from underlying image.<br />\n <br />\n EXCLUSION - similar to DIFFERENCE, but less extreme.<br />\n <br />\n MULTIPLY - Multiply the colors, result will always be darker.<br />\n <br />\n SCREEN - Opposite multiply, uses inverse values of the colors.<br />\n <br />\n OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,\n and screens light values.<br />\n <br />\n HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.<br />\n <br />\n SOFT_LIGHT - Mix of DARKEST and LIGHTEST.\n Works like OVERLAY, but not as harsh.<br />\n <br />\n DODGE - Lightens light tones and increases contrast, ignores darks.\n Called \"Color Dodge\" in Illustrator and Photoshop.<br />\n <br />\n BURN - Darker areas are applied, increasing contrast, ignores lights.\n Called \"Color Burn\" in Illustrator and Photoshop.<br />\n <br />\n All modes use the alpha information (highest byte) of source image\n pixels as the blending factor. If the source and destination regions are\n different sizes, the image will be automatically resized to match the\n destination size. If the <b>srcImg</b> parameter is not used, the\n display window is used as the source image.<br />\n <br />\n As of release 0149, this function ignores <b>imageMode()</b>.","syntax":["blend(sx, sy, sw, sh, dx, dy, dw, dh, mode)","blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode)"],"category":"image","subcategory":"pixels","parameters":[{"name":"src","description":"an image variable referring to the source image","type":["PImage"]},{"name":"sx","description":"X coordinate of the source's upper left corner","type":["int"]},{"name":"sy","description":"Y coordinate of the source's upper left corner","type":["int"]},{"name":"sw","description":"source image width","type":["int"]},{"name":"sh","description":"source image height","type":["int"]},{"name":"dx","description":"X coordinate of the destination's upper left corner","type":["int"]},{"name":"dy","description":"Y coordinate of the destination's upper left corner","type":["int"]},{"name":"dw","description":"destination image width","type":["int"]},{"name":"dh","description":"destination image height","type":["int"]},{"name":"mode","description":"Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN","type":["int"]}],"related":["alpha_","copy_","PImage_blendColor_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"blend_0","internal":{"content":"size(400,400);\nbackground(loadImage(\"mt-fuji.jpg\"));\nPImage img = loadImage(\"dandelions.jpg\");\nimage(img, 0, 0);\nblend(img, 0, 0, 132, 400, 268, 0, 132, 400, ADD); "},"extension":"pde"}},{"node":{"name":"blend_1","internal":{"content":"size(400,400);\nbackground(loadImage(\"mt-fuji.jpg\"));\nPImage img = loadImage(\"dandelions.jpg\");\nimage(img, 0, 0);\nblend(img, 0, 0, 132, 400, 268, 0, 132, 400, SUBTRACT); "},"extension":"pde"}},{"node":{"name":"blend_2","internal":{"content":"size(400,400);\nbackground(loadImage(\"mt-fuji.jpg\"));\nPImage img = loadImage(\"dandelions.jpg\");\nimage(img, 0, 0);\nblend(img, 0, 0, 132, 400, 268, 0, 132, 400, DARKEST); "},"extension":"pde"}},{"node":{"name":"blend_3","internal":{"content":"size(400,400);\nbackground(loadImage(\"mt-fuji.jpg\"));\nPImage img = loadImage(\"dandelions.jpg\");\nimage(img, 0, 0);\nblend(img, 0, 0, 132, 400, 268, 0, 132, 400, LIGHTEST); "},"extension":"pde"}}]}} ''',
    'blue_':
        r''' {"json":{"name":"blue()","description":"Extracts the blue value from a color, scaled to match current\n <b>colorMode()</b>. The value is always returned as a float, so be careful\n not to assign it to an int value.<br />\n <br />\n The <b>blue()</b> function is easy to use and understand, but it is slower\n than a technique called bit masking. When working in <b>colorMode(RGB,\n 255)</b>, you can achieve the same results as <b>blue()</b> but with greater\n speed by using a bit mask to remove the other color components. For example,\n the following two lines of code are equivalent means of getting the blue\n value of the color value <b>c</b>:<br />\n <br />\n\n <pre>\n float b1 = blue(c); // Simpler, but slower to calculate\n float b2 = c & 0xFF; // Very fast to calculate\n </pre>","syntax":["blue(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","green_","alpha_","hue_","saturation_","brightness_","rightshift_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"blue_","internal":{"content":"size(400,400);\ncolor c = color(175, 100, 220);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(60, 80, 140, 240);  // Draw left rectangle\n\nfloat blueValue = blue(c);  // Get blue in 'c'\nprintln(blueValue);  // Prints \"220.0\"\nfill(0, 0, blueValue);  // Use 'blueValue' in new fill\nrect(200, 80, 140, 240);  // Draw right rectangle\n"},"extension":"pde"}}]}} ''',
    'boolean':
        r''' {"json":{"name":"boolean","description":"Datatype for the Boolean values <b>true</b> and <b>false</b>. It is common to use <b>boolean</b> values with control statements to determine the flow of a program. The first time a variable is written, it must be declared with a statement expressing its datatype.\n","syntax":["boolean var","boolean var = booleanvalue"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the value","type":[]},{"name":"booleanvalue","description":"true or false","type":[]}],"related":["true","false"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"boolean_","internal":{"content":"\nsize(400,400);\nboolean a = false; \nif (!a) { \n  rect(120, 80, 200, 200); \n} \na = true; \nif (a) { \n  line(80, 40, 360, 320); \n  line(80, 320, 360, 40); \n} \n"},"extension":"pde"}}]}} ''',
    'booleanconvert_':
        r''' {"json":{"name":"boolean()","description":"Converts an <b>int</b> or <b>String</b> to its boolean representation.  For an <b>int</b>, any non-zero value (positive or negative) evaluates to true, while zero evaluates to false. For a <b>String</b>, the value <b>\"true\"</b> evaluates to true, while any other value (including <b>\"false\"</b> or <b>\"hippopotamus\"</b>) evaluates to false.<br />\n<br />\nWhen an array of <b>int</b> or <b>String</b> values is passed in, then a <b>boolean</b> array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":null,"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"booleanconvert_0","internal":{"content":"String s = \"true\";\nboolean b = boolean(s);\nif (b) {\n  println(\"The boolean is true\");\n} else {\n  println(\"The boolean is false\");\n}\n"},"extension":"pde"}}]}} ''',
    'box_':
        r''' {"json":{"name":"box()","description":"A box is an extruded <b>rectangle</b>. A box with equal dimension on all sides\n is a cube.","syntax":["box(size)","box(w, h, d)"],"category":"shape","subcategory":"3d primitives","parameters":[{"name":"size","description":"dimension of the box in all dimensions (creates a cube)","type":["float"]},{"name":"w","description":"dimension of the box in the x-dimension","type":["float"]},{"name":"h","description":"dimension of the box in the y-dimension","type":["float"]},{"name":"d","description":"dimension of the box in the z-dimension","type":["float"]}],"related":["sphere_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"box_0","internal":{"content":"size(400,400,P3D);\ntranslate(232, 192, 0); \nrotateY(0.5);\nnoFill();\nbox(160);"},"extension":"pde"}},{"node":{"name":"box_1","internal":{"content":"translate(232, 192, 0); \nrotateY(0.5);\nnoFill();\nbox(160, 80, 200);"},"extension":"pde"}}]}} ''',
    'break':
        r''' {"json":{"name":"break","description":"Ends the execution of a structure such as <b>switch</b>, <b>for</b>, or <b>while</b> and jumps to the next statement after.\n","syntax":[],"category":"Control","subcategory":"Conditionals","parameters":null,"related":["switch","for","while"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"break_0","internal":{"content":"char letter = 'B';\n\nswitch(letter) {\n  case 'A': \n    println(\"Alpha\");  // Does not execute\n    break;\n  case 'B': \n    println(\"Bravo\");  // Prints \"Bravo\"\n    break;\n  default:\n    println(\"Zulu\");   // Does not execute\n    break;\n}\n"},"extension":"pde"}}]}} ''',
    'brightness_':
        r''' {"json":{"name":"brightness()","description":"Extracts the brightness value from a color.","syntax":["brightness(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","green_","blue_","alpha_","hue_","saturation_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"brightness_","internal":{"content":"size(400,400);\nnoStroke();\ncolorMode(HSB, 255);\ncolor c = color(0, 126, 255);\nfill(c);\nrect(60, 80, 140, 240);\nfloat value = brightness(c);  // Sets 'value' to 255\nfill(value);\nrect(200, 80, 140, 240);\n"},"extension":"pde"}}]}} ''',
    'byte':
        r''' {"json":{"name":"byte","description":"Datatype for bytes, 8 bits of information storing numerical values from 127 to -128. Bytes are a convenient datatype for sending information to and from the serial port and for representing letters in a simpler format than the <b>char</b> datatype. The first time a variable is written, it must be declared with a statement expressing its datatype. Subsequent uses of this variable must not reference the datatype because Processing will think the variable is being declared again.\n","syntax":["byte var","byte var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the value","type":[]},{"name":"value","description":"a number between 127 to -128","type":[]}],"related":["int","float","boolean"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"byte_0","internal":{"content":" // Declare variable 'a' of type byte\nbyte a;\n\n// Assign 23 to 'a'\na = 23;\n\n// Declare variable 'b' and assign it the value -128\nbyte b = -128;\n\n// Declare variable 'c' and assign it the sum of 'a' and 'b'.\n// By default, when two bytes are added, they are converted\n// to an integer. To keep the answer as a byte, cast them\n// to a byte with the byte() conversion function\nbyte c = byte(a + b);\n"},"extension":"pde"}}]}} ''',
    'byteconvert_':
        r''' {"json":{"name":"byte()","description":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>double</b>, <b>float</b>, <b>int</b>, or <b>long</b>) to its byte representation. A byte can only be a whole number between <b>-128</b> and <b>127</b>, so when a value outside of this range is converted, it wraps around to the corresponding byte representation.  (For example, <b>byte(128)</b> evaluates to <b>-128</b>.)<br />\n<br />\nWhen an array of values is passed in, then a <b>byte</b> array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":null,"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"byteconvert_0","internal":{"content":"char c = 'E';\nbyte b = byte(c);\nprintln(c + \" : \" + b);  // Prints \"E : 69\"\n\nint i = 130;\nb = byte(i);\nprintln(i + \" : \" + b);  // Prints \"130 : -126\"\n"},"extension":"pde"}}]}} ''',
    'camera_':
        r''' {"json":{"name":"camera()","description":"Sets the position of the camera through setting the eye position, the\n center of the scene, and which axis is facing upward. Moving the eye\n position and the direction it is pointing (the center of the scene)\n allows the images to be seen from different angles. The version without\n any parameters sets the camera to the default position, pointing to the\n center of the display window with the Y axis as up. The default values\n are <b>camera(width/2.0, height/2.0, (height/2.0) / tan(PI*30.0 /\n 180.0), width/2.0, height/2.0, 0, 0, 1, 0)</b>. This function is similar\n to <b>gluLookAt()</b> in OpenGL, but it first clears the current camera settings.","syntax":["camera()","camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)"],"category":"lights_camera","subcategory":"camera","parameters":[{"name":"eyeX","description":"x-coordinate for the eye","type":["float"]},{"name":"eyeY","description":"y-coordinate for the eye","type":["float"]},{"name":"eyeZ","description":"z-coordinate for the eye","type":["float"]},{"name":"centerX","description":"x-coordinate for the center of the scene","type":["float"]},{"name":"centerY","description":"y-coordinate for the center of the scene","type":["float"]},{"name":"centerZ","description":"z-coordinate for the center of the scene","type":["float"]},{"name":"upX","description":"usually 0.0, 1.0, or -1.0","type":["float"]},{"name":"upY","description":"usually 0.0, 1.0, or -1.0","type":["float"]},{"name":"upZ","description":"usually 0.0, 1.0, or -1.0","type":["float"]}],"related":["beginCamera_","endCamera_","frustum_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"camera_","internal":{"content":"size(400, 400, P3D);\nnoFill();\nbackground(204);\ncamera(70.0, 35.0, 120.0, 50.0, 50.0, 0.0, \n       0.0, 1.0, 0.0);\ntranslate(50, 50, 0);\nrotateX(-PI/6);\nrotateY(PI/3);\nbox(45);"},"extension":"pde"}}]}} ''',
    'case':
        r''' {"json":{"name":"case","description":"Denotes the different names to be evaluated with the parameter in the <b>switch</b> structure.\n","syntax":["case name: statements"],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"name","description":"byte, char, or int","type":[]},{"name":"statements","description":"one or more valid statements","type":[]}],"related":["switch","default","break"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"case_0","internal":{"content":"char letter = 'B';\n\nswitch(letter) {\n  case 'A': \n    println(\"Alpha\");  // Does not execute\n    break;\n  case 'B': \n    println(\"Bravo\");  // Prints \"Bravo\"\n    break;\n  default:\n    println(\"Zulu\");   // Does not execute\n    break;\n}\n"},"extension":"pde"}}]}} ''',
    'catch':
        r''' {"json":{"name":"catch","description":"The <b>catch</b> keyword is used with <b>try</b> to handle exceptions. Sun's Java documentation defines an exception as \"an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.\" This could be, for example, an error while a file is read.\n","syntax":["try {","  tryStatements","} catch (exception) {","  catchStatements","} "],"category":"structure","subcategory":"","parameters":[{"name":"tryStatements","description":"if this code throws an exception, then the code in \"catch\" is run","type":[]},{"name":"exception","description":"the Java exception that was thrown","type":[]},{"name":"catchStatements","description":"code that handles the exception","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"catch_0","internal":{"content":"BufferedReader reader;\nString line;\n \nvoid setup() {\n  // Open the file from the createWriter() example\n  reader = createReader(\"positions.txt\");    \n}\n \nvoid draw() {\n  try {\n    line = reader.readLine();\n  } catch (IOException e) {\n    e.printStackTrace();\n    line = null;\n  }\n  if (line == null) {\n    // Stop reading because of an error or file is empty\n    noLoop();  \n  } else {\n    String[] pieces = split(line, TAB);\n    int x = int(pieces[0]);\n    int y = int(pieces[1]);\n    point(x, y);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'ceil_':
        r''' {"json":{"name":"ceil()","description":"Calculates the closest int value that is greater than or equal to the\n value of the parameter. For example, <b>ceil(9.03)</b> returns the value 10.","syntax":["ceil(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number to round up","type":["float"]}],"related":["floor_","round_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"ceil_0","internal":{"content":"float x = 8.22;  \nint a = ceil(x);  // Sets 'a' to 9\n"},"extension":"pde"}}]}} ''',
    'char':
        r''' {"json":{"name":"char","description":"Datatype for characters, typographic symbols such as A, d, and $. A <b>char</b> stores letters and symbols in the Unicode format, a coding system developed to support a variety of world languages. Each <b>char</b> is two bytes (16 bits) in length and is distinguished by surrounding it with single quotes. Character escapes may also stored as a <b>char</b>. For example, the representation for the \"delete\" key is 127. The first time a variable is written, it must be declared with a statement expressing its datatype. Subsequent uses of this variable must not reference the datatype because Processing will think the variable is being declared again.\n","syntax":["char var","char var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the value","type":[]},{"name":"value","description":"any character","type":[]}],"related":["String"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"char_0","internal":{"content":"char m;      // Declare variable 'm' of type char\nm = 'A';     // Assign 'm' the value \"A\"\nint n = '&amp;'; // Declare variable 'n' and assign it the value \"&amp;\"\n"},"extension":"pde"}}]}} ''',
    'charconvert_':
        r''' {"json":{"name":"char()","description":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>double</b>, <b>float</b>, <b>int</b>, or <b>long</b>) to its numeric character representation.<br />\n<br />\nWhen an array of values is passed in, then a <b>char</b> array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":null,"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"charconvert_0","internal":{"content":"int i = 65;\nchar c = char(i);\nprintln(i + \" : \" + c);  // Prints \"65 : A\"\n\nbyte b = 65;\nc = char(b);\nprintln(b + \" : \" + c);  // Prints \"65 : A\"\n"},"extension":"pde"}}]}} ''',
    'circle_':
        r''' {"json":{"name":"circle()","description":"Draws a circle to the screen. By default, the first two parameters\n set the location of the center, and the third sets the shape's width\n and height. The origin may be changed with the <b>ellipseMode()</b>\n function.","syntax":["circle(x, y, extent)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x","description":"x-coordinate of the ellipse","type":["float"]},{"name":"y","description":"y-coordinate of the ellipse","type":["float"]},{"name":"extent","description":"width and height of the ellipse by default","type":["float"]}],"related":["ellipse_","ellipseMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"circle","internal":{"content":"circle(224, 184, 220);"},"extension":"pde"}}]}} ''',
    'class':
        r''' {"json":{"name":"class","description":"\rKeyword used to indicate the declaration of a class. A class is a composite of fields (data) and methods (functions that are a part of the class) which may be instantiated as objects. The first letter of a class name is usually uppercase to separate it from other kinds of variables. A related tutorial on <a href=\"https://docs.oracle.com/javase/tutorial/java/concepts/index.html\" target=\"_blank\">Object-Oriented Programming</a> is hosted on the Oracle website.\r\n","syntax":["class ClassName {\r","  statements\r","}\r"],"category":"structure","subcategory":"","parameters":[{"name":"ClassName","description":"Any valid variable name","type":[]},{"name":"statements","description":"any valid statements","type":[]}],"related":["Object"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"class_0","internal":{"content":"\r// Declare and construct two objects (h1, h2) from the class HLine \r\nHLine h1 = new HLine(20, 2.0); \r\nHLine h2 = new HLine(50, 2.5); \r\n \r\nvoid setup() \r\n{\r\n  size(200, 200);\r\n  frameRate(30);\r\n}\r\n\r\nvoid draw() { \r\n  background(204);\r\n  h1.update(); \r\n  h2.update();  \r\n} \r\n \r\nclass HLine { \r\n  float ypos, speed; \r\n  HLine (float y, float s) {  \r\n    ypos = y; \r\n    speed = s; \r\n  } \r\n  void update() { \r\n    ypos += speed; \r\n    if (ypos > height) { \r\n      ypos = 0; \r\n    } \r\n    line(0, ypos, width, ypos); \r\n  } \r\n} \r\n"},"extension":"pde"}}]}} ''',
    'clear_':
        r''' {"json":{"name":"clear()","description":"Clears the pixels within a buffer. This function only works on\n <b>PGraphics</b> objects created with the <b>createGraphics()</b>\n function. Unlike the main graphics context (the display window),\n pixels in additional graphics areas created with <b>createGraphics()</b>\n can be entirely or partially transparent. This function clears\n everything in a <b>PGraphics</b> object to make all of the pixels\n 100% transparent.","syntax":["clear()"],"category":"color","subcategory":"setting","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"clear_0","internal":{"content":"PGraphics pg;\n\nvoid setup() {\n  size(200, 200);\n  pg = createGraphics(width, height);\n}\n\nvoid draw() {\n  background(204);\n  \n  // Clear the PGraphics when the mouse is pressed\n  if (mousePressed == true) {\n    pg.beginDraw(); \n    pg.clear();\n    pg.endDraw();\n  } else {\n    pg.beginDraw();\n    pg.stroke(0, 102, 153);\n    pg.line(width/2, height/2, mouseX, mouseY);\n    pg.endDraw();\n  }\n\n  image(pg, 0, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'clip_':
        r''' {"json":{"name":"clip()","description":"Limits the rendering to the boundaries of a rectangle defined\n by the parameters. The boundaries are drawn based on the state\n of the <b>imageMode()</b> function, either CORNER, CORNERS, or CENTER.","syntax":["clip(a, b, c, d)"],"category":"rendering","subcategory":"","parameters":[{"name":"a","description":"x-coordinate of the rectangle, by default","type":["float"]},{"name":"b","description":"y-coordinate of the rectangle, by default","type":["float"]},{"name":"c","description":"width of the rectangle, by default","type":["float"]},{"name":"d","description":"height of the rectangle, by default","type":["float"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"clip_0","internal":{"content":"void setup() {\n  size(200, 200);\n  imageMode(CENTER);\n}\n\nvoid draw() {\n  background(204);\n  if (mousePressed) {\n    clip(mouseX, mouseY, 100, 100);\n  } else {\n    noClip();\n  }\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'colorMode_':
        r''' {"json":{"name":"colorMode()","description":"Changes the way Processing interprets color data. By default, the parameters\n for <b>fill()</b>, <b>stroke()</b>, <b>background()</b>, and <b>color()</b>\n are defined by values between 0 and 255 using the RGB color model. The\n <b>colorMode()</b> function is used to change the numerical range used for\n specifying colors and to switch color systems. For example, calling\n <b>colorMode(RGB, 1.0)</b> will specify that values are specified between 0\n and 1. The limits for defining colors are altered by setting the parameters\n <b>max</b>, <b>max1</b>, <b>max2</b>, <b>max3</b>, and <b>maxA</b>. <br />\n <br />\n After changing the range of values for colors with code like\n <b>colorMode(HSB, 360, 100, 100)</b>, those ranges remain in use until they\n are explicitly changed again. For example, after running <b>colorMode(HSB,\n 360, 100, 100)</b> and then changing back to <b>colorMode(RGB)</b>, the range\n for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid\n this, be explicit about the ranges when changing the color mode. For\n instance, instead of <b>colorMode(RGB)</b>, write <b>colorMode(RGB, 255, 255,\n 255)</b>.","syntax":["colorMode(mode)","colorMode(mode, max)","colorMode(mode, max1, max2, max3)","colorMode(mode, max1, max2, max3, maxA)"],"category":"color","subcategory":"setting","parameters":[{"name":"mode","description":"Either RGB or HSB, corresponding to Red/Green/Blue and\n             Hue/Saturation/Brightness","type":["int"]},{"name":"max","description":"range for all color elements","type":["float"]},{"name":"max1","description":"range for the red or hue depending on the current color mode","type":["float"]},{"name":"max2","description":"range for the green or saturation depending on the current color mode","type":["float"]},{"name":"max3","description":"range for the blue or brightness depending on the current color mode","type":["float"]},{"name":"maxA","description":"range for the alpha","type":["float"]}],"related":["background_","fill_","stroke_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"colorMode_0","internal":{"content":"size(400,400);\nnoStroke();\ncolorMode(RGB, 400);\nfor (int i = 0; i < 400; i++) {\n  for (int j = 0; j < 400; j++) {\n    stroke(i, j, 0);\n    point(i, j);\n  }\n}\n"},"extension":"pde"}},{"node":{"name":"colorMode_1","internal":{"content":"noStroke();\ncolorMode(HSB, 400);\nfor (int i = 0; i < 400; i++) {\n  for (int j = 0; j < 400; j++) {\n    stroke(i, j, 400);\n    point(i, j);\n  }\n}\n"},"extension":"pde"}},{"node":{"name":"colorMode_2","internal":{"content":"// If the color is defined here, it won't be \n// affected by the colorMode() in setup(). \n// Instead, just declare the variable here and \n// assign the value after the colorMode() in setup()\n//color bg = color(180, 50, 50);  // No\ncolor bg;  // Yes, but assign it in setup()\n\nvoid setup() {\n  size(400, 400);\n  colorMode(HSB, 360, 100, 100);\n  bg = color(180, 50, 50);\n}\n\nvoid draw() {\n  background(bg);\t\n}"},"extension":"pde"}}]}} ''',
    'color_':
        r''' {"json":{"name":"color()","description":"Creates colors for storing in variables of the <b>color</b> datatype. The\n parameters are interpreted as RGB or HSB values depending on the current\n <b>colorMode()</b>. The default mode is RGB values from 0 to 255 and,\n therefore, <b>color(255, 204, 0)</b> will return a bright yellow color (see\n the first example above).<br />\n <br />\n Note that if only one value is provided to <b>color()</b>, it will be\n interpreted as a grayscale value. Add a second value, and it will be used\n for alpha transparency. When three values are specified, they are\n interpreted as either RGB or HSB values. Adding a fourth value applies\n alpha transparency.<br />\n <br />\n Note that when using hexadecimal notation, it is not necessary to use\n <b>color()</b>, as in: <b>color c = #006699</b><br />\n <br />\n More about how colors are stored can be found in the reference for the\n <a href=\"color_datatype.html\">color</a> datatype.","syntax":["color(gray)","color(gray, alpha)","color(v1, v2, v3)","color(v1, v2, v3, alpha)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"gray","description":"number specifying value between white and black","type":["int"]},{"name":"alpha","description":"relative to current color range","type":["int","float"]},{"name":"v1","description":"red or hue values relative to the current color range","type":["int","float"]},{"name":"v2","description":"green or saturation values relative to the current color range","type":["int","float"]},{"name":"v3","description":"blue or brightness values relative to the current color range","type":["int","float"]}],"related":["colorMode_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"color_0","internal":{"content":"size(400,400);\ncolor c = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(120, 80, 220, 220);  // Draw rectangle"},"extension":"pde"}},{"node":{"name":"color_1","internal":{"content":"size(400,400);\ncolor c = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nellipse(100, 100, 320, 320);  // Draw left circle\n\n// Using only one value with color()\n// generates a grayscale value.\nc = color(65);  // Update 'c' with grayscale value\nfill(c);  // Use updated 'c' as fill color\nellipse(300, 300, 320, 320);  // Draw right circle"},"extension":"pde"}},{"node":{"name":"color_2","internal":{"content":"size(400,400);\ncolor c;  // Declare color 'c'\nnoStroke();  // Don't draw a stroke around shapes\n\n// If no colorMode is specified, then the\n// default of RGB with scale of 0-255 is used.\nc = color(50, 55, 100);  // Create a color for 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(0, 40, 180, 320);  // Draw left rect\n\ncolorMode(HSB, 100);  // Use HSB with scale of 0-100\nc = color(50, 55, 100);  // Update 'c' with new color\nfill(c);  // Use updated 'c' as fill color\nrect(220, 40, 180, 320);  // Draw right rect"},"extension":"pde"}}]}} ''',
    'color_datatype':
        r''' {"json":{"name":"color","description":"Datatype for storing color values. Colors may be assigned with <b>get()</b> and <b>color()</b> or they may be specified directly using hexadecimal notation such as <b>#FFCC00</b> or <b>0xFFFFCC00</b>. \n<br /> <br />\nUsing <b>print()</b> or <b>println()</b> on a color will produce strange results (usually negative numbers) because of the way colors are stored in memory. A better technique is to use the <b>hex()</b> function to format the color data, or use the <b>red()</b>, <b>green()</b>, and <b>blue()</b> functions to get individual values and print those. The <b>hue()</b>, <b>saturation()</b>, and <b>brightness()</b> functions work in a similar fashion. To extract red, green, and blue values more quickly (for instance when analyzing an image or a frame of video), use <a href=\"rightshift.html\">bit shifting</a>.\n<br /> <br />\nValues can also be created using web color notation. For example: <b>color c = #006699</b>\n<br /> <br />\nWeb color notation only works for opaque colors. To define a color with an alpha value, you can either use <b>color()</b> or hexadecimal notation. For hex notation, prefix the values with <b>0x</b>, for instance <b>color c = 0xCC006699</b>. In that example, <b>CC</b> (the hex value of 204) is the alpha value, and the remainder is identical to a web color. Note that in hexadecimal notation, the alpha value appears in the first position. (The alpha value appears last when used within <b>color()</b>, <b>fill()</b>, and <b>stroke()</b>.) The following is an equivalent way of writing the preceding example, but using <b>color()</b> and specifying the alpha value as its second parameter: <b>color c = color(#006699, 191)</b>\n<br /> <br />\nFrom a technical standpoint, colors are 32 bits of information ordered as <b>AAAAAAAARRRRRRRRGGGGGGGGBBBBBBBB</b> where the A's contain the alpha value, the R's are the red value, G's are green, and B's are blue. Each component is 8 bits (a number between 0 and 255). These values can be manipulated with <a href=\"rightshift.html\">bit shifting</a>.\n","syntax":[],"category":"Data","subcategory":"Primitive","parameters":null,"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"color_datatype_0","internal":{"content":"color c1 = color(204, 153, 0);\ncolor c2 = #FFCC00;\nnoStroke();\nfill(c1);\nrect(0, 0, 25, 100);\nfill(c2);\nrect(25, 0, 25, 100);\ncolor c3 = get(10, 50);\nfill(c3);\nrect(50, 0, 50, 100);\n"},"extension":"pde"}}]}} ''',
    'comma':
        r''' {"json":{"name":", (comma)","description":"Separates parameters in function calls and elements during assignment.\n","syntax":["value1, ..., valueN"],"category":"structure","subcategory":"","parameters":[{"name":"value1, ..., valueN","description":"any int, float, byte, boolean, color, char, String","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"comma_0","internal":{"content":"// Comma used to separate a list of variable declarations\nint a=20, b=30, c=80;\n\n// Comma used to separate a list of values assigned to an array\nint[] d = { 20, 60, 80 };\n\n// Comma used to separate a list of parameters passed to a function\nline(a, b, c, b);\nline(d[0], d[1], d[2], d[1]);\n"},"extension":"pde"}}]}} ''',
    'comment':
        r''' {"json":{"name":"// (comment)","description":"Explanatory notes embedded within the code. Comments are used to remind yourself and to inform others about the details of the code. Single-line comments are signified with the two forward slash characters. Comments are ignored by the compiler.\n","syntax":["// comment"],"category":"structure","subcategory":"","parameters":[{"name":"comment","description":"any sequence of characters","type":[]}],"related":["multilinecomment","doccomment"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"comment_0","internal":{"content":"// Draws two lines which divides the window\n// into four quadrants\nline(0, 50, 100, 50);  // Draw the horizontal line\nline(50, 0, 50, 100);  // Draw the vertical line\n"},"extension":"pde"}}]}} ''',
    'concat_':
        r''' {"json":{"name":"concat()","description":"Concatenates two arrays. For example, concatenating the array { 1, 2, 3 }\n and the array { 4, 5, 6 } yields { 1, 2, 3, 4, 5, 6 }. Both parameters must\n be arrays of the same datatype. <br />\n <br />\n When using an array of objects, the data returned from the function must be\n cast to the object array's data type. For example: <em>SomeClass[] items =\n (SomeClass[]) concat(array1, array2)</em>.","syntax":["concat(a, b)"],"category":"data","subcategory":"array functions","parameters":[{"name":"a","description":"first array to concatenate","type":["boolean[]","byte[]","char[]","int[]","float[]","String[]","Object"]},{"name":"b","description":"second array to concatenate","type":["boolean[]","byte[]","char[]","int[]","float[]","String[]","Object"]}],"related":["splice_","arrayCopy_"],"returns":"boolean[], byte[], char[], int[], float[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"concat_0","internal":{"content":"String[] sa1 = { \"OH\", \"NY\", \"CA\"};\nString[] sa2 = { \"KY\", \"IN\", \"MA\"};\nString[] sa3 = concat(sa1, sa2);\nprintln(sa3);\n// Prints updated array contents to the console:\n// [0] \"OH\"\n// [1] \"NY\"\n// [2] \"CA\"\n// [3] \"KY\"\n// [4] \"IN\"\n// [5] \"MA\"\n"},"extension":"pde"}}]}} ''',
    'conditional':
        r''' {"json":{"name":"?: (conditional)","description":"A shortcut for writing an <b>if</b> and <b>else</b> structure. The conditional operator, <b>?:</b> is sometimes called the ternary operator, an operator that takes three arguments. If the <b>test</b> evaluates to <b>true</b>, <b>expression1</b> is evaluated and returned. If the <b>condition</b> evaluates to <b>false</b>, <b>expression2</b> is evaluated and returned.\n<br /><br />\nThe following conditional expression: <br />\n<pre>result = test ? expression1 : expression2</pre><br />\nis equivalent to this structure: <br />\n<pre>if (test) {<br />\n  result = expression1 <br />\n} else { <br />\n  result = expression2 <br />\n}</pre>\n","syntax":["test ? expression1 : expression2"],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"test","description":"any valid expression which evaluates to true or false","type":[]},{"name":"expression1","description":"any valid expression","type":[]},{"name":"expression2","description":"any valid expression","type":[]}],"related":["if","else"],"returns":"Variable, dependent on the datatype of the expressions","classanchor":null},"pdes":{"edges":[{"node":{"name":"conditional_0","internal":{"content":"int s = 0;\nfor (int i = 5; i < 100; i += 5) {\n  s = (i < 50) ? 0 : 255;\n  stroke(s);\n  line(30, i, 80, i);\n}\n"},"extension":"pde"}}]}} ''',
    'constrain_':
        r''' {"json":{"name":"constrain()","description":"Constrains a value to not exceed a maximum and minimum value.","syntax":["constrain(amt, low, high)"],"category":"math","subcategory":"calculation","parameters":[{"name":"amt","description":"the value to constrain","type":["float","int"]},{"name":"low","description":"minimum limit","type":["float","int"]},{"name":"high","description":"maximum limit","type":["float","int"]}],"related":["max_","min_"],"returns":"float or int","classanchor":null},"pdes":{"edges":[{"node":{"name":"constrain_0","internal":{"content":"void draw() \n{ \n  background(204);\n  float mx = constrain(mouseX, 30, 70);\n  rect(mx-10, 40, 20, 20);\n}\n"},"extension":"pde"}}]}} ''',
    'continue':
        r''' {"json":{"name":"continue","description":"When run inside of a <b>for</b> or <b>while</b>, it skips the remainder of the block and starts the next iteration.\n","syntax":["continue"],"category":"Control","subcategory":"Conditionals","parameters":null,"related":["for","while"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"continue_0","internal":{"content":"for (int i = 0; i < 100; i += 10) {\n  if (i == 70) {  // If 'i' is 70,\n    continue;     // skip to the next iteration,\n  }               // therefore not drawing the line.\n  line(i, 0, i, height);\n}\n"},"extension":"pde"}}]}} ''',
    'copy_':
        r''' {"json":{"name":"copy()","description":"Copies a region of pixels from one image into another. If the source and\n destination regions aren't the same size, it will automatically resize\n source pixels to fit the specified target region. No alpha information\n is used in the process, however if the source image has an alpha channel\n set, it will be copied as well.\n <br /><br />\n As of release 0149, this function ignores <b>imageMode()</b>.","syntax":["copy()","copy(sx, sy, sw, sh, dx, dy, dw, dh)","copy(src, sx, sy, sw, sh, dx, dy, dw, dh)"],"category":"image","subcategory":"pixels","parameters":[{"name":"sx","description":"X coordinate of the source's upper left corner","type":["int"]},{"name":"sy","description":"Y coordinate of the source's upper left corner","type":["int"]},{"name":"sw","description":"source image width","type":["int"]},{"name":"sh","description":"source image height","type":["int"]},{"name":"dx","description":"X coordinate of the destination's upper left corner","type":["int"]},{"name":"dy","description":"Y coordinate of the destination's upper left corner","type":["int"]},{"name":"dw","description":"destination image width","type":["int"]},{"name":"dh","description":"destination image height","type":["int"]},{"name":"src","description":"an image variable referring to the source image.","type":["PImage"]}],"related":["alpha_","blend_"],"returns":"void or PImage","classanchor":null},"pdes":{"edges":[{"node":{"name":"copy_","internal":{"content":"size(400,400);\nPImage img = loadImage(\"hometown.jpg\");\nimage(img, 0, 0, width, height);\ncopy(56, 176, 80, 80, 280, 200, 400, 400);\nstroke(255);\nnoFill();\n// Rectangle shows area being copied\nrect(56, 176, 80, 80);"},"extension":"pde"}}]}} ''',
    'cos_':
        r''' {"json":{"name":"cos()","description":"Calculates the cosine of an angle. This function expects the values of\n the <b>angle</b> parameter to be provided in radians (values from 0 to\n PI*2). Values are returned in the range -1 to 1.","syntax":["cos(angle)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"angle","description":"an angle in radians","type":["float"]}],"related":["sin_","tan_","radians_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"cos_","internal":{"content":"size(400,400);\nfloat a = 0.0;\nfloat inc = TWO_PI/25.0;\nfor (int i = 0; i < 25; i++) {\n  line(i*16, 200, i*16, 200+cos(a)*160.0);\n  a = a + inc;\n}"},"extension":"pde"}}]}} ''',
    'createFont_':
        r''' {"json":{"name":"createFont()","description":"Dynamically converts a font to the format used by Processing from a .ttf or\n .otf file inside the sketch's \"data\" folder or a font that's installed\n elsewhere on the computer. If you want to use a font installed on your\n computer, use the <b>PFont.list()</b> method to first determine the names\n for the fonts recognized by the computer and are compatible with this\n function. Not all fonts can be used and some might work with one operating\n system and not others. When sharing a sketch with other people or posting\n it on the web, you may need to include a .ttf or .otf version of your font\n in the data directory of the sketch because other people might not have the\n font installed on their computer. Only fonts that can legally be\n distributed should be included with a sketch.<br />\n <br />\n The <b>size</b> parameter states the font size you want to generate. The\n <b>smooth</b> parameter specifies if the font should be anti-aliased or not.\n The <b>charset</b> parameter is an array of chars that specifies the\n characters to generate.<br />\n <br />\n This function allows Processing to work with the font natively in the\n default renderer, so the letters are defined by vector geometry and are\n rendered quickly. In the <b>P2D</b> and <b>P3D</b> renderers, the function\n sets the project to render the font as a series of small textures. For\n instance, when using the default renderer, the actual native version of the\n font will be employed by the sketch, improving drawing quality and\n performance. With the <b>P2D</b> and <b>P3D</b> renderers, the bitmapped\n version will be used to improve speed and appearance, but the results are\n poor when exporting if the sketch does not include the .otf or .ttf file,\n and the requested font is not available on the machine running the sketch.","syntax":["createFont(name, size)","createFont(name, size, smooth)","createFont(name, size, smooth, charset)"],"category":"typography","subcategory":"loading & displaying","parameters":[{"name":"name","description":"name of the font to load","type":["String"]},{"name":"size","description":"point size of the font","type":["float"]},{"name":"smooth","description":"true for an anti-aliased font, false for aliased","type":["boolean"]},{"name":"charset","description":"array containing characters to be generated","type":["char[]"]}],"related":["PFont","textFont_","text_","loadFont_"],"returns":"PFont","classanchor":null},"pdes":{"edges":[{"node":{"name":"createFont_0","internal":{"content":"PFont myFont;\n\nvoid setup() {\n  size(200, 200);\n  // Uncomment the following two lines to see the available fonts \n  //String[] fontList = PFont.list();\n  //printArray(fontList);\n  myFont = createFont(\"Georgia\", 32);\n  textFont(myFont);\n  textAlign(CENTER, CENTER);\n  text(\"!@#$%\", width/2, height/2);\n}\n\n"},"extension":"pde"}}]}} ''',
    'createGraphics_':
        r''' {"json":{"name":"createGraphics()","description":"Creates and returns a new <b>PGraphics</b> object. Use this class if you\n need to draw into an off-screen graphics buffer. The first two parameters\n define the width and height in pixels. The third, optional parameter\n specifies the renderer. It can be defined as P2D, P3D, PDF, or SVG. If the\n third parameter isn't used, the default renderer is set. The PDF and SVG\n renderers require the filename parameter.<br />\n <br />\n It's important to consider the renderer used with <b>createGraphics()</b>\n in relation to the main renderer specified in <b>size()</b>. For example,\n it's only possible to use P2D or P3D with <b>createGraphics()</b> when one\n of them is defined in <b>size()</b>. Unlike Processing 1.0, P2D and P3D use\n OpenGL for drawing, and when using an OpenGL renderer it's necessary for\n the main drawing surface to be OpenGL-based. If P2D or P3D are used as the\n renderer in <b>size()</b>, then any of the options can be used with\n <b>createGraphics()</b>. If the default renderer is used in <b>size()</b>,\n then only the default, PDF, or SVG can be used with\n <b>createGraphics()</b>.<br />\n <br />\n It's important to run all drawing functions between the <b>beginDraw()</b>\n and <b>endDraw()</b>. As the exception to this rule, <b>smooth()</b> should\n be run on the PGraphics object before <b>beginDraw()</b>. See the reference\n for <b>smooth()</b> for more detail.<br />\n <br />\n The <b>createGraphics()</b> function should almost never be used inside\n <b>draw()</b> because of the memory and time needed to set up the graphics.\n One-time or occasional use during <b>draw()</b> might be acceptable, but\n code that calls <b>createGraphics()</b> at 60 frames per second might run\n out of memory or freeze your sketch.<br />\n <br />\n Unlike the main drawing surface which is completely opaque, surfaces\n created with <b>createGraphics()</b> can have transparency. This makes it\n possible to draw into a graphics and maintain the alpha channel. By using\n <b>save()</b> to write a PNG or TGA file, the transparency of the graphics\n object will be honored.\n\n ","syntax":["createGraphics(w, h)","createGraphics(w, h, renderer)","createGraphics(w, h, renderer, path)"],"category":"rendering","subcategory":"","parameters":[{"name":"w","description":"width in pixels","type":["int"]},{"name":"h","description":"height in pixels","type":["int"]},{"name":"renderer","description":"Either P2D, P3D, or PDF","type":["String"]},{"name":"path","description":"the name of the file (can be an absolute or relative path)","type":["String"]}],"related":[],"returns":"PGraphics","classanchor":null},"pdes":{"edges":[{"node":{"name":"createGraphics_0","internal":{"content":"PGraphics pg;\n\nvoid setup() {\n  size(200, 200);\n  pg = createGraphics(100, 100);\n}\n\nvoid draw() {\n  pg.beginDraw();\n  pg.background(102);\n  pg.stroke(255);\n  pg.line(pg.width*0.5, pg.height*0.5, mouseX, mouseY);\n  pg.endDraw();\n  image(pg, 50, 50); \n}\n"},"extension":"pde"}}]}} ''',
    'createImage_':
        r''' {"json":{"name":"createImage()","description":"Creates a new PImage (the datatype for storing images). This provides a\n fresh buffer of pixels to play with. Set the size of the buffer with the\n <b>width</b> and <b>height</b> parameters. The <b>format</b> parameter\n defines how the pixels are stored. See the PImage reference for more information.\n <br/> <br/>\n Be sure to include all three parameters, specifying only the width and\n height (but no format) will produce a strange error.\n <br/> <br/>\n Advanced users please note that createImage() should be used instead of\n the syntax <tt>new PImage()</tt>.\n\n\n ","syntax":["createImage(w, h, format)"],"category":"image","subcategory":"","parameters":[{"name":"w","description":"width in pixels","type":["int"]},{"name":"h","description":"height in pixels","type":["int"]},{"name":"format","description":"Either RGB, ARGB, ALPHA (grayscale alpha channel)","type":["int"]}],"related":["PImage","PGraphics"],"returns":"PImage","classanchor":null},"pdes":{"edges":[{"node":{"name":"createImage_0","internal":{"content":"size(400,400);\nPImage img = createImage(264, 264, RGB);\nimg.loadPixels();\nfor (int i = 0; i < img.pixels.length; i++) {\n  img.pixels[i] = color(0, 90, 102); \n}\nimg.updatePixels();\nimage(img, 68, 68);\n"},"extension":"pde"}},{"node":{"name":"createImage_1","internal":{"content":"size(400,400);\nPImage img = createImage(264, 264, ARGB);\nimg.loadPixels();\nfor (int i = 0; i < img.pixels.length; i++) {\n  img.pixels[i] = color(0, 90, 102, i % img.width); \n}\nimg.updatePixels();\nimage(img, 68, 68);\nimage(img, 136, 136);"},"extension":"pde"}}]}} ''',
    'createInput_':
        r''' {"json":{"name":"createInput()","description":"This is a function for advanced programmers to open a Java InputStream.\n It's useful if you want to use the facilities provided by PApplet to\n easily open files from the data folder or from a URL, but want an\n InputStream object so that you can use other parts of Java to take more\n control of how the stream is read.<br />\n <br />\n The filename passed in can be:<br />\n - A URL, for instance <b>openStream(\"http://processing.org/\")</b><br />\n - A file in the sketch's <b>data</b> folder<br />\n - The full path to a file to be opened locally (when running as an\n application)<br />\n <br />\n If the requested item doesn't exist, <b>null</b> is returned. If not online,\n this will also check to see if the user is asking for a file whose name\n isn't properly capitalized. If capitalization is different, an error\n will be printed to the console. This helps prevent issues that appear\n when a sketch is exported to the web, where case sensitivity matters, as\n opposed to running from inside the Processing Development Environment on\n Windows or Mac OS, where case sensitivity is preserved but ignored.<br />\n <br />\n If the file ends with <b>.gz</b>, the stream will automatically be gzip\n decompressed. If you don't want the automatic decompression, use the\n related function <b>createInputRaw()</b>.\n <br />\n In earlier releases, this function was called <b>openStream()</b>.<br />\n <br />\n\n\n ","syntax":["createInput(filename)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"the name of the file to use as input","type":["String"]}],"related":["createOutput_","selectOutput_","selectInput_"],"returns":"InputStream","classanchor":null},"pdes":{"edges":[{"node":{"name":"createInput_0","internal":{"content":"// Load the local file 'data.txt' and initialize a new InputStream\nInputStream input = createInput(\"data.txt\");\n\nString content = \"\";\n\ntry {\n  int data = input.read();\n  while (data != -1) {\n    content += data;\n    data = input.read();\n  }\n}\ncatch (IOException e) {\n  e.printStackTrace();\n}\nfinally {\n  try {\n    input.close();\n  } \n  catch (IOException e) {\n    e.printStackTrace();\n  }\n}\n\nprintln(content);\n"},"extension":"pde"}}]}} ''',
    'createOutput_':
        r''' {"json":{"name":"createOutput()","description":"Similar to <b>createInput()</b>, this creates a Java <b>OutputStream</b>\n for a given filename or path. The file will be created in the sketch\n folder, or in the same folder as an exported application. <br />\n <br />\n If the path does not exist, intermediate folders will be created. If an\n exception occurs, it will be printed to the console, and <b>null</b> will\n be returned. <br />\n <br />\n This function is a convenience over the Java approach that requires you to\n 1) create a FileOutputStream object, 2) determine the exact file location,\n and 3) handle exceptions. Exceptions are handled internally by the\n function, which is more appropriate for \"sketch\" projects. <br />\n <br />\n If the output filename ends with <b>.gz</b>, the output will be\n automatically GZIP compressed as it is written.","syntax":["createOutput(filename)"],"category":"output","subcategory":"files","parameters":[{"name":"filename","description":"name of the file to open","type":["String"]}],"related":["createInput_","selectOutput_"],"returns":"OutputStream","classanchor":null},"pdes":{"edges":[]}} ''',
    'createReader_':
        r''' {"json":{"name":"createReader()","description":"Creates a <b>BufferedReader</b> object that can be used to read files\n line-by-line as individual <b>String</b> objects. This is the complement to\n the <b>createWriter()</b> function. For more information about the\n <b>BufferedReader</b> class and its methods like <b>readLine()</b> and\n <b>close</b> used in the above example, please consult a Java\n reference.<br />\n <br />\n Starting with Processing release 0134, all files loaded and saved by the\n Processing API use UTF-8 encoding. In previous releases, the default\n encoding for your platform was used, which causes problems when files are\n moved to other platforms.","syntax":["createReader(filename)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of the file to be opened","type":["String"]}],"related":["createWriter_"],"returns":"BufferedReader","classanchor":null},"pdes":{"edges":[{"node":{"name":"createReader_0","internal":{"content":"void setup() {\n  size(100, 100);\n  parseFile();\n}\n\nvoid parseFile() {\n  // Open the file from the createWriter() example\n  BufferedReader reader = createReader(\"positions.txt\");\n  String line = null;\n  try {\n    while ((line = reader.readLine()) != null) {\n      String[] pieces = split(line, TAB);\n      int x = int(pieces[0]);\n      int y = int(pieces[1]);\n      point(x, y);\n    }\n    reader.close();\n  } catch (IOException e) {\n    e.printStackTrace();\n  }\n} \n"},"extension":"pde"}}]}} ''',
    'createShape_':
        r''' {"json":{"name":"createShape()","description":"The <b>createShape()</b> function is used to define a new shape.\n Once created, this shape can be drawn with the <b>shape()</b>\n function. The basic way to use the function defines new primitive\n shapes. One of the following parameters are used as the first\n parameter: <b>ELLIPSE</b>, <b>RECT</b>, <b>ARC</b>, <b>TRIANGLE</b>,\n <b>SPHERE</b>, <b>BOX</b>, <b>QUAD</b>, or <b>LINE</b>. The\n parameters for each of these different shapes are the same as their\n corresponding functions: <b>ellipse()</b>, <b>rect()</b>, <b>arc()</b>,\n <b>triangle()</b>, <b>sphere()</b>, <b>box()</b>, <b>quad()</b>, and\n <b>line()</b>. The first example above clarifies how this works.<br />\n <br />\n Custom, unique shapes can be made by using <b>createShape()</b> without\n a parameter. After the shape is started, the drawing attributes and\n geometry can be set directly to the shape within the <b>beginShape()</b>\n and <b>endShape()</b> methods. See the second example above for specifics,\n and the reference for <b>beginShape()</b> for all of its options.<br />\n <br />\n The  <b>createShape()</b> function can also be used to make a complex\n shape made of other shapes. This is called a \"group\" and it's created by\n using the parameter <b>GROUP</b> as the first parameter. See the fourth\n example above to see how it works.<br />\n <br />\n After using <b>createShape()</b>, stroke and fill color can be set by\n calling methods like <b>setFill()</b> and <b>setStroke()</b>, as seen\n in the examples above. The complete list of methods and fields for the\n PShape class are in the <a href=\"http://processing.github.io/processing-javadocs/core/\">Processing Javadoc</a>.","syntax":["createShape()","createShape(type)","createShape(kind, p)"],"category":"shape","subcategory":"","parameters":[{"name":"kind","description":"either POINT, LINE, TRIANGLE, QUAD, RECT, ELLIPSE, ARC, BOX, SPHERE","type":["int"]},{"name":"p","description":"parameters that match the kind of shape","type":["float[]"]}],"related":["PShape","endShape_","loadShape_"],"returns":"PShape","classanchor":null},"pdes":{"edges":[{"node":{"name":"createShape_0","internal":{"content":"PShape square;  // The PShape object\n\nvoid setup() {\n  size(100, 100);\n  // Creating the PShape as a square. The\n  // numeric arguments are similar to rect().\n  square = createShape(RECT, 0, 0, 50, 50);\n  square.setFill(color(0, 0, 255));\n  square.setStroke(false);\n}\n\nvoid draw() {\n  shape(square, 25, 25);\n}\n"},"extension":"pde"}},{"node":{"name":"createShape_1","internal":{"content":"PShape s;  // The PShape object\n\nvoid setup() {\n  size(100, 100);\n  // Creating a custom PShape as a square, by\n  // specifying a series of vertices.\n  s = createShape();\n  s.beginShape();\n  s.fill(0, 0, 255);\n  s.noStroke();\n  s.vertex(0, 0);\n  s.vertex(0, 50);\n  s.vertex(50, 50);\n  s.vertex(50, 0);\n  s.endShape(CLOSE);\n}\n\nvoid draw() {\n  shape(s, 25, 25);\n}\n"},"extension":"pde"}},{"node":{"name":"createShape_2","internal":{"content":"PShape s;\n\nvoid setup() {\n  size(100, 100, P2D);\n  s = createShape();\n  s.beginShape(TRIANGLE_STRIP);\n  s.vertex(30, 75);\n  s.vertex(40, 20);\n  s.vertex(50, 75);\n  s.vertex(60, 20);\n  s.vertex(70, 75);\n  s.vertex(80, 20);\n  s.vertex(90, 75);\n  s.endShape();\n}\n\nvoid draw() {\n  shape(s, 0, 0);\n}\n"},"extension":"pde"}},{"node":{"name":"createShape_3","internal":{"content":"PShape alien, head, body;\n\nvoid setup() {\n  size(100, 100);\n\n  // Create the shape group\n  alien = createShape(GROUP);\n\n  // Make two shapes\n  ellipseMode(CORNER);\n  head = createShape(ELLIPSE, -25, 0, 50, 50);\n  head.setFill(color(255));\n  body = createShape(RECT, -25, 45, 50, 40);\n  body.setFill(color(0));\n\n  // Add the two \"child\" shapes to the parent group\n  alien.addChild(body);\n  alien.addChild(head);\n}\n\nvoid draw() {\n  background(204);\n  translate(50, 15);\n  shape(alien); // Draw the group\n}\n"},"extension":"pde"}}]}} ''',
    'createWriter_':
        r''' {"json":{"name":"createWriter()","description":"Creates a new file in the sketch folder, and a <b>PrintWriter</b> object\n to write to it. For the file to be made correctly, it should be flushed\n and must be closed with its <b>flush()</b> and <b>close()</b> methods\n (see above example).\n <br/> <br/>\n Starting with Processing release 0134, all files loaded and saved by the\n Processing API use UTF-8 encoding. In previous releases, the default\n encoding for your platform was used, which causes problems when files\n are moved to other platforms.","syntax":["createWriter(filename)"],"category":"output","subcategory":"files","parameters":[{"name":"filename","description":"name of the file to be created","type":["String"]}],"related":["createReader_"],"returns":"PrintWriter","classanchor":null},"pdes":{"edges":[{"node":{"name":"createWriter_0","internal":{"content":"PrintWriter output;\n\nvoid setup() {\n  // Create a new file in the sketch directory\n  output = createWriter(\"positions.txt\"); \n}\n\nvoid draw() {\n  point(mouseX, mouseY);\n  output.println(mouseX + \"\\t\" + mouseY); // Write the coordinate to the file\n}\n\nvoid keyPressed() {\n  output.flush(); // Writes the remaining data to the file\n  output.close(); // Finishes the file\n  exit(); // Stops the program\n}\n\n"},"extension":"pde"}}]}} ''',
    'curlybraces':
        r''' {"json":{"name":"{} (curly braces)","description":"Define the beginning and end of functions blocks and statement blocks such as the <b>for</b> and <b>if</b> structures. Curly braces are also used for defining initial values in array declarations.\n","syntax":["{ statements }","{ ele0, ..., eleN }"],"category":"structure","subcategory":"","parameters":[{"name":"statements","description":"any sequence of valid statements","type":[]},{"name":"ele0, ..., eleN","description":"list of elements separated by commas","type":[]}],"related":["parentheses"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"curlybraces_0","internal":{"content":"int[] a = { 5, 20, 25, 45, 70 };\n\nvoid setup() {\n  size(100, 100);\n}\n\nvoid draw() {\n  for (int i=0; i < a.length; i++) {\n    line(0, a[i], 50, a[i]);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'cursor_':
        r''' {"json":{"name":"cursor()","description":"Sets the cursor to a predefined symbol or an image, or makes it visible if\n already hidden. If you are trying to set an image as the cursor, the\n recommended size is 16x16 or 32x32 pixels. The values for parameters\n <b>x</b> and <b>y</b> must be less than the dimensions of the image. <br />\n <br />\n Setting or hiding the cursor does not generally work with \"Present\" mode\n (when running full-screen). <br />\n <br />\n With the P2D and P3D renderers, a generic set of cursors are used because\n the OpenGL renderer doesn't have access to the default cursor images for\n each platform\n (<a href=\"https://github.com/processing/processing/issues/3791\">Issue\n 3791</a>).","syntax":["cursor(kind)","cursor(img)","cursor(img, x, y)","cursor()"],"category":"environment","subcategory":"","parameters":[{"name":"kind","description":"either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT","type":["int"]},{"name":"img","description":"any variable of type PImage","type":["PImage"]},{"name":"x","description":"the horizontal active spot of the cursor","type":["int"]},{"name":"y","description":"the vertical active spot of the cursor","type":["int"]}],"related":["noCursor_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"cursor_0","internal":{"content":"// Move the mouse left and right across the image\n// to see the cursor change from a cross to a hand\n\nvoid setup() {\n  size(100, 100);\n}\n\nvoid draw() {\n  if (mouseX < 50) {\n    cursor(CROSS);\n  } else {\n    cursor(HAND);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'curveDetail_':
        r''' {"json":{"name":"curveDetail()","description":"Sets the resolution at which curves display. The default value is 20.\n This function is only useful when using the P3D renderer as the default\n P2D renderer does not use this information.","syntax":["curveDetail(detail)"],"category":"shape","subcategory":"curves","parameters":[{"name":"detail","description":"resolution of the curves","type":["int"]}],"related":["curve_","curveVertex_","curveTightness_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"curveDetail_","internal":{"content":"void setup(){\n  size(400,400);\n}\n\nvoid draw() {\n  curveDetail(1);\n  drawCurves(-60);\n  stroke(126);\n  curveDetail(2);\n  drawCurves(0);\n  stroke(255);\n  curveDetail(4);\n  drawCurves(60);\n}\n\nvoid drawCurves(float y) {\n  noFill();\n  curve( 20, 112+y,  20, 112+y, 292, 104+y, 292, 252+y);\n  curve( 20, 112+y, 292, 104+y, 292, 252+y, 60, 268+y); \n  curve(292, 104+y, 292, 252+y, 60, 268+y, 60, 268+y);\n}"},"extension":"pde"}}]}} ''',
    'curvePoint_':
        r''' {"json":{"name":"curvePoint()","description":"Evaluates the curve at point <b>t</b> for points <b>a</b>, <b>b</b>,\n <b>c</b>, <b>d</b>. The parameter <b>t</b> may range from 0 (the start of the\n curve) and 1 (the end of the curve). <b>a</b> and <b>d</b> are the control\n points, and <b>b</b> and <b>c</b> are points on the curve. As seen in the\n example above, this can be used once with the <b>x</b> coordinates and a\n second time with the <b>y</b> coordinates to get the location of a curve at\n <b>t</b>.","syntax":["curvePoint(a, b, c, d, t)"],"category":"shape","subcategory":"curves","parameters":[{"name":"a","description":"coordinate of first control point","type":["float"]},{"name":"b","description":"coordinate of first point on the curve","type":["float"]},{"name":"c","description":"coordinate of second point on the curve","type":["float"]},{"name":"d","description":"coordinate of second control point","type":["float"]},{"name":"t","description":"value between 0 and 1","type":["float"]}],"related":["curve_","curveVertex_","bezierPoint_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"curvePoint_","internal":{"content":"size(400,400);\n\nnoFill();\ncurve(20, 104, 20, 104, 292, 96, 292, 244);\ncurve(20, 104, 292, 96, 292, 244, 60, 260);\n\nfill(255);\nellipseMode(CENTER);\nint steps = 6;\nfor (int i = 0; i <= steps; i++) {\n  float t = i / float(steps);\n  float x = curvePoint(20, 20, 292, 292, t);\n  float y = curvePoint(104, 104, 96, 244, t);\n  ellipse(x, y, 10, 10);\n  x = curvePoint(20, 292, 292, 60, t);\n  y = curvePoint(104, 96, 244, 260, t);\n  ellipse(x, y, 10, 10);\n}"},"extension":"pde"}}]}} ''',
    'curveTangent_':
        r''' {"json":{"name":"curveTangent()","description":"Calculates the tangent of a point on a curve. There's a good definition\n of <em><a href=\"http://en.wikipedia.org/wiki/Tangent\"\n target=\"new\">tangent</em> on Wikipedia</a>.\n\n\n ","syntax":["curveTangent(a, b, c, d, t)"],"category":"shape","subcategory":"curves","parameters":[{"name":"a","description":"coordinate of first point on the curve","type":["float"]},{"name":"b","description":"coordinate of first control point","type":["float"]},{"name":"c","description":"coordinate of second control point","type":["float"]},{"name":"d","description":"coordinate of second point on the curve","type":["float"]},{"name":"t","description":"value between 0 and 1","type":["float"]}],"related":["curve_","curveVertex_","curvePoint_","bezierTangent_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"curveTangent_","internal":{"content":"size(400, 400);\nnoFill();\ncurve(20, 104, 292, 96, 292, 244, 60, 260); \nint steps = 6;\nfor (int i = 0; i <= steps; i++) {\n  float t = i / float(steps);\n  float x = curvePoint(20, 292, 292, 60, t);\n  float y = curvePoint(104, 96, 244, 260, t);\n  //ellipse(x, y, 20, 20);\n  float tx = curveTangent(20, 292, 292, 60, t);\n  float ty = curveTangent(104, 96, 244, 260, t);\n  float a = atan2(ty, tx);\n  a -= PI/2.0;\n  line(x, y, cos(a)*32 + x, sin(a)*32 + y);\n}"},"extension":"pde"}}]}} ''',
    'curveTightness_':
        r''' {"json":{"name":"curveTightness()","description":"Modifies the quality of forms created with <b>curve()</b> and\n <b>curveVertex()</b>. The parameter <b>tightness</b> determines how the curve\n fits to the vertex points. The value 0.0 is the default value for\n <b>tightness</b> (this value defines the curves to be Catmull-Rom splines)\n and the value 1.0 connects all the points with straight lines. Values within\n the range -5.0 and 5.0 will deform the curves but will leave them\n recognizable and as values increase in magnitude, they will continue to\n deform.","syntax":["curveTightness(tightness)"],"category":"shape","subcategory":"curves","parameters":[{"name":"tightness","description":"amount of deformation from the original vertices","type":["float"]}],"related":["curve_","curveVertex_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"curveTightness_0","internal":{"content":"// Move the mouse left and right to see the curve change\n\nvoid setup() {\n  size(100, 100);\n  noFill();\n}\n\nvoid draw() {\n  background(204);\n  float t = map(mouseX, 0, width, -5, 5);\n  curveTightness(t);\n  beginShape();\n  curveVertex(10, 26);\n  curveVertex(10, 26);\n  curveVertex(83, 24);\n  curveVertex(83, 61);\n  curveVertex(25, 65); \n  curveVertex(25, 65);\n  endShape();\n}\n"},"extension":"pde"}}]}} ''',
    'curveVertex_':
        r''' {"json":{"name":"curveVertex()","description":"Specifies vertex coordinates for curves. This function may only be used\n between <b>beginShape()</b> and <b>endShape()</b> and only when there is\n no MODE parameter specified to <b>beginShape()</b>. The first and last\n points in a series of <b>curveVertex()</b> lines will be used to guide\n the beginning and end of a the curve. A minimum of four points is\n required to draw a tiny curve between the second and third points.\n Adding a fifth point with <b>curveVertex()</b> will draw the curve\n between the second, third, and fourth points. The <b>curveVertex()</b>\n function is an implementation of Catmull-Rom splines. Using the 3D\n version requires rendering with P3D (see the Environment reference for\n more information).","syntax":["curveVertex(x, y)","curveVertex(x, y, z)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"x","description":"the x-coordinate of the vertex","type":["float"]},{"name":"y","description":"the y-coordinate of the vertex","type":["float"]},{"name":"z","description":"the z-coordinate of the vertex","type":["float"]}],"related":["curve_","beginShape_","endShape_","vertex_","bezier_","quadraticVertex_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"curveVertex_","internal":{"content":"size(400, 400);\nnoFill();\nbeginShape();\ncurveVertex(336,  364);\ncurveVertex(336,  364);\ncurveVertex(272,  76);\ncurveVertex(84,  68);\ncurveVertex(128, 400);\ncurveVertex(128, 400);\nendShape();"},"extension":"pde"}}]}} ''',
    'curve_':
        r''' {"json":{"name":"curve()","description":"Draws a curved line on the screen. The first and second parameters\n specify the beginning control point and the last two parameters specify\n the ending control point. The middle parameters specify the start and\n stop of the curve. Longer curves can be created by putting a series of\n <b>curve()</b> functions together or using <b>curveVertex()</b>. An\n additional function called <b>curveTightness()</b> provides control for\n the visual quality of the curve. The <b>curve()</b> function is an\n implementation of Catmull-Rom splines. Using the 3D version requires\n rendering with P3D (see the Environment reference for more information).\n\n\n ","syntax":["curve(x1, y1, x2, y2, x3, y3, x4, y4)","curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4)"],"category":"shape","subcategory":"curves","parameters":[{"name":"x1","description":"coordinates for the beginning control point","type":["float"]},{"name":"y1","description":"coordinates for the beginning control point","type":["float"]},{"name":"x2","description":"coordinates for the first point","type":["float"]},{"name":"y2","description":"coordinates for the first point","type":["float"]},{"name":"x3","description":"coordinates for the second point","type":["float"]},{"name":"y3","description":"coordinates for the second point","type":["float"]},{"name":"x4","description":"coordinates for the ending control point","type":["float"]},{"name":"y4","description":"coordinates for the ending control point","type":["float"]},{"name":"z1","description":"coordinates for the beginning control point","type":["float"]},{"name":"z2","description":"coordinates for the first point","type":["float"]},{"name":"z3","description":"coordinates for the second point","type":["float"]},{"name":"z4","description":"coordinates for the ending control point","type":["float"]}],"related":["curveVertex_","curveTightness_","bezier_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"curve_","internal":{"content":"size(400, 400);\nnoFill();\nstroke(255, 102, 0);\ncurve(20, 104, 20, 104, 292, 96, 292, 244);\nstroke(0); \ncurve(20, 104, 292, 96, 292, 244, 60, 260); \nstroke(255, 102, 0);\ncurve(292, 96, 292, 244, 60, 260, 60, 260);"},"extension":"pde"}}]}} ''',
    'day_':
        r''' {"json":{"name":"day()","description":"Processing communicates with the clock on your computer. The\n <b>day()</b> function returns the current day as a value from 1 - 31.\n\n\n ","syntax":["day()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","second_","minute_","hour_","month_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"day_0","internal":{"content":"int d = day();    // Values from 1 - 31\nint m = month();  // Values from 1 - 12\nint y = year();   // 2003, 2004, 2005, etc.\n\nString s = String.valueOf(d);\ntext(s, 10, 28);\ns = String.valueOf(m);\ntext(s, 10, 56); \ns = String.valueOf(y);\ntext(s, 10, 84);\n"},"extension":"pde"}}]}} ''',
    'decrement':
        r''' {"json":{"name":"-- (decrement)","description":"Substracts the value of an integer variable by 1. Equivalent to the operation <b>i = i - 1</b>. If the value of the variable <b>i</b> is five, then the expression <b>i--</b> decreases the value of <b>i</b> to 4.\n","syntax":["var--"],"category":"math","subcategory":"Operators","parameters":[{"name":"var","description":"int","type":[]}],"related":["minus","subtractassign","increment"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"decrement_0","internal":{"content":"int a = 5;    // Sets 'a' to 5 \nint b = a--;  // Sets 'b' to 5, then decrements 'a' to 4\nint c = a;    // Sets 'c' to 4 \n"},"extension":"pde"}}]}} ''',
    'default':
        r''' {"json":{"name":"default","description":"Keyword for defining the default condition of a <b>switch</b>. If none of the case names match the <b>switch</b> parameter, the statement(s) after the <b>default</b> syntax are executed. Switch structures don't require a <b>default</b>.\n","syntax":["default: statements"],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"statements","description":"one or more valid statements to be executed","type":[]}],"related":["switch","break","case"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"default_0","internal":{"content":"char letter = 'F';\n\nswitch(letter) {\n  case 'A': \n    println(\"Alpha\");  // Does not execute\n    break;\n  case 'B': \n    println(\"Bravo\");  // Does not execute\n    break;\n  default:\n    println(\"Zulu\");   // Prints \"Zulu\"\n    break;\n}\n"},"extension":"pde"}}]}} ''',
    'degrees_':
        r''' {"json":{"name":"degrees()","description":"Converts a radian measurement to its corresponding value in degrees.\n Radians and degrees are two ways of measuring the same thing. There are\n 360 degrees in a circle and 2*PI radians in a circle. For example,\n 90&deg; = PI/2 = 1.5707964. All trigonometric functions in Processing\n require their parameters to be specified in radians.","syntax":["degrees(radians)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"radians","description":"radian value to convert to degrees","type":["float"]}],"related":["radians_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"degrees_0","internal":{"content":"float rad = PI/4;\nfloat deg = degrees(rad);\nprintln(rad + \" radians is \" + deg + \" degrees\");\n"},"extension":"pde"}}]}} ''',
    'delay_':
        r''' {"json":{"name":"delay()","description":"The <b>delay()</b> function causes the program to halt for a specified time.\n Delay times are specified in thousandths of a second. For example,\n running <b>delay(3000)</b> will stop the program for three seconds and\n <b>delay(500)</b> will stop the program for a half-second.\n\n The screen only updates when the end of <b>draw()</b> is reached, so <b>delay()</b>\n cannot be used to slow down drawing. For instance, you cannot use <b>delay()</b>\n to control the timing of an animation.\n\n The <b>delay()</b> function should only be used for pausing scripts (i.e.\n a script that needs to pause a few seconds before attempting a download,\n or a sketch that needs to wait a few milliseconds before reading from\n the serial port).","syntax":["delay(napTime)"],"category":"environment","subcategory":"","parameters":[{"name":"napTime","description":"milliseconds to pause before running draw() again","type":["int"]}],"related":["frameRate","draw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"delay_0","internal":{"content":"import processing.serial.*;\n\nSerial myPort;  // The serial port\n\nvoid setup() {\n  printArray(Serial.list());\n  myPort = new Serial(this, Serial.list()[0], 9600);\n}\n\nvoid draw() {\n  while (myPort.available() > 0) {\n    int inByte = myPort.read();\n    println(inByte);\n  }\n  delay(100);\n}\n"},"extension":"pde"}}]}} ''',
    'directionalLight_':
        r''' {"json":{"name":"directionalLight()","description":"Adds a directional light. Directional light comes from one direction and\n is stronger when hitting a surface squarely and weaker if it hits at a a\n gentle angle. After hitting a surface, a directional lights scatters in\n all directions. Lights need to be included in the <b>draw()</b> to\n remain persistent in a looping program. Placing them in the\n <b>setup()</b> of a looping program will cause them to only have an\n effect the first time through the loop. The affect of the <b>v1</b>,\n <b>v2</b>, and <b>v3</b> parameters is determined by the current color\n mode. The <b>nx</b>, <b>ny</b>, and <b>nz</b> parameters specify the\n direction the light is facing. For example, setting <b>ny</b> to -1 will\n cause the geometry to be lit from below (the light is facing directly upward).","syntax":["directionalLight(v1, v2, v3, nx, ny, nz)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]},{"name":"nx","description":"direction along the x-axis","type":["float"]},{"name":"ny","description":"direction along the y-axis","type":["float"]},{"name":"nz","description":"direction along the z-axis","type":["float"]}],"related":["lights_","ambientLight_","pointLight_","spotLight_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"directionalLight_0","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\ndirectionalLight(51, 102, 126, -1, 0, 0);\ntranslate(80, 200, 0);\nsphere(120);"},"extension":"pde"}},{"node":{"name":"directionalLight_1","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\ndirectionalLight(51, 102, 126, 0, -1, 0);\ntranslate(320, 200, 0);\nsphere(120);"},"extension":"pde"}}]}} ''',
    'displayDensity_':
        r''' {"json":{"name":"displayDensity()","description":"This function returns the number \"2\" if the screen is a high-density\n screen (called a Retina display on OS X or high-dpi on Windows and Linux)\n and a \"1\" if not. This information is useful for a program to adapt to\n run at double the pixel density on a screen that supports it.","syntax":["displayDensity()","displayDensity(display)"],"category":"environment","subcategory":"","parameters":[{"name":"display","description":"the display number to check\n (1-indexed to match the Preferences dialog box)","type":["int"]}],"related":["pixelDensity_","size_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"displayDensity_0","internal":{"content":"void setup() {\n  size(100, 100);\n  pixelDensity(displayDensity());\n  noStroke();\n}\n\nvoid draw() {\n  background(0);\n  ellipse(30, 48, 36, 36);\n  ellipse(70, 48, 36, 36);\n}\n"},"extension":"pde"}}]}} ''',
    'displayHeight':
        r''' {"json":{"name":"displayHeight","classanchor":null,"description":"System variable that stores the height of the computer screen. For\n example, if the current screen resolution is 1920x1080,\n <b>displayWidth</b> is 1920 and <b>displayHeight</b> is 1080.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["displayWidth","size_"],"returns":null},"pdes":{"edges":[{"node":{"name":"displayHeight_0","internal":{"content":"size(displayWidth, displayHeight);\nline(0, 0, width, height);\n"},"extension":"pde"}}]}} ''',
    'displayWidth':
        r''' {"json":{"name":"displayWidth","classanchor":null,"description":"System variable that stores the width of the computer screen. For\n example, if the current screen resolution is 1920x1080,\n <b>displayWidth</b> is 1920 and <b>displayHeight</b> is 1080.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["displayHeight","size_"],"returns":null},"pdes":{"edges":[{"node":{"name":"displayWidth_0","internal":{"content":"size(displayWidth, displayHeight);\nline(0, 0, width, height);\n"},"extension":"pde"}}]}} ''',
    'dist_':
        r''' {"json":{"name":"dist()","description":"Calculates the distance between two points.","syntax":["dist(x1, y1, x2, y2)","dist(x1, y1, z1, x2, y2, z2)"],"category":"math","subcategory":"calculation","parameters":[{"name":"x1","description":"x-coordinate of the first point","type":["float"]},{"name":"y1","description":"y-coordinate of the first point","type":["float"]},{"name":"z1","description":"z-coordinate of the first point","type":["float"]},{"name":"x2","description":"x-coordinate of the second point","type":["float"]},{"name":"y2","description":"y-coordinate of the second point","type":["float"]},{"name":"z2","description":"z-coordinate of the second point","type":["float"]}],"related":[],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"dist_0","internal":{"content":"// Sets the background gray value based on the distance \n// of the mouse from the center of the screen\nvoid draw() {\n  noStroke();\n  float d = dist(width/2, height/2, mouseX, mouseY);\n  float maxDist = dist(0, 0, width/2, height/2);\n  float gray = map(d, 0, maxDist, 0, 255);\n  fill(gray);\n  rect(0, 0, width, height);\n}\n"},"extension":"pde"}}]}} ''',
    'divide':
        r''' {"json":{"name":"/ (divide)","description":"Divides the value of the first parameter by the value of the second parameter. The answer to the equation 20 / 4 is 5. The number 20 is the sum of four occurences of the number 5. As an equation we see that 5 + 5 + 5 + 5 = 20.\n","syntax":["value1 / value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"int or float, but not zero (it is not possible  divide by zero)","type":[]}],"related":["multiply","modulo"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"divide_0","internal":{"content":"int g = 50 / 5;  // Assigns 10 to 'g'\nint h = g / 5;   // Assigns 2 to 'h'\n"},"extension":"pde"}}]}} ''',
    'divideassign':
        r''' {"json":{"name":"/= (divide assign)","description":"Combines division with assignment. The expression <b>a /= b</b> is equivalent to <b>a = a / b</b>. \n","syntax":["value1 /= value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"any numerical value the same datatype as value1","type":[]}],"related":["divide","assign"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"divideassign_0","internal":{"content":"int a = 12;\nint b = 3;\na /= b;  // Sets 'a' to 4\n"},"extension":"pde"}}]}} ''',
    'doccomment':
        r''' {"json":{"name":"/** */ (doc comment)","description":"Explanatory notes embedded within the code. Doc comments (documentation comments) are used to describe and document your sketch, classes, and methods. Comments are ignored by the compiler.\n<br><br>\nDoc comments may be converted into browseable documentation using external editors and tools such as the command line javadoc, doc generators such as Doxygen, or IDEs such as Eclipse, Netbeans, or IntelliJ IDEA.\n","syntax":["/**","  comment","*/"],"category":"structure","subcategory":"","parameters":[{"name":"comment","description":"any sequence of characters","type":[]}],"related":["comment","multilinecomment"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"doccomment_0","internal":{"content":"/**\n   Draws two lines which divides the window \n   into four quadrants. First draws a horizontal\n   line and then the vertical line \n*/ \nline(0, 50, 100, 50);\nline(50, 0, 50, 100);\n"},"extension":"pde"}}]}} ''',
    'dot':
        r''' {"json":{"name":". (dot)","description":"Provides access to an object's methods and data. An object is one instance of a class and may contain both methods (object functions) and data (object variables and constants), as specified in the class definition. The dot operator directs the program to the information encapsulated within an object.\n","syntax":["object.method()","object.data"],"category":"structure","subcategory":"","parameters":[{"name":"object","description":"the object to be accessed","type":[]},{"name":"method()","description":"a method encapsulated in the object","type":[]},{"name":"data","description":"a variable or constant encapsulated in the object","type":[]}],"related":["Object"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"dot_0","internal":{"content":"// Declare and construct two objects (h1 and h2) of the class HLine\nHLine h1 = new HLine(20, 1.0);\nHLine h2 = new HLine(50, 5.0);\n\nvoid setup() {\n  size(200, 200);\n}\n\nvoid draw() {\n  if (h2.speed > 1.0) {  // Dot syntax can be used to get a value\n    h2.speed -= 0.01;    // or set a value.\n  }\n  h1.update();  // Calls the h1 object's update() function\n  h2.update();  // Calls the h2 object's update() function\n}\n\nclass HLine {  // Class definition\n  float ypos, speed;  // Data\n  HLine (float y, float s) {  // Object constructor\n    ypos = y;\n    speed = s;\n  }\n  void update() {  // Update method\n    ypos += speed;\n    if (ypos > width) {\n      ypos = 0;\n    }\n    line(0, ypos, width, ypos);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'double':
        r''' {"json":{"name":"double","description":"Datatype for floating-point numbers larger than those that can be stored in a <b>float</b>. A <b>float</b> is a 32-bit values that can be as large as 3.40282347E+38 and as low as -3.40282347E+38. A <b>double</b> can be used similarly to a float, but can have a greater magnitude because it's a 64-bit number. Processing functions don't use this datatype, so while they work in the language, you'll usually have to convert to a <b>float</b> using the <b>(float)</b> syntax before passing into a function.","syntax":["double var","double var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the float","type":[]},{"name":"value","description":"any floating-point value","type":[]}],"related":["float"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"double_0","internal":{"content":"double a;             // Declare variable 'a' of type double\na = 1.5387D;          // Assign 'a' the value 1.5387\ndouble b = -2.984D;   // Declare variable 'b' and assign it the value -2.984\ndouble c = a + b;     // Declare variable 'c' and assign it the sum of 'a' and 'b'\nfloat f = (float)c;   // Converts the value of 'c' from a double to a float\n"},"extension":"pde"}}]}} ''',
    'draw_':
        r''' {"json":{"name":"draw()","description":"Called directly after <b>setup()</b>, the <b>draw()</b> function continuously\n executes the lines of code contained inside its block until the program is\n stopped or <b>noLoop()</b> is called. <b>draw()</b> is called automatically\n and should never be called explicitly. All Processing programs update the\n screen at the end of draw(), never earlier.<br />\n <br />\n To stop the code inside of <b>draw()</b> from running continuously, use\n <b>noLoop()</b>, <b>redraw()</b> and <b>loop()</b>. If <b>noLoop()</b> is\n used to stop the code in <b>draw()</b> from running, then <b>redraw()</b>\n will cause the code inside <b>draw()</b> to run a single time, and\n <b>loop()</b> will cause the code inside <b>draw()</b> to resume running\n continuously.<br />\n <br />\n The number of times <b>draw()</b> executes in each second may be controlled\n with the <b>frameRate()</b> function.<br />\n <br />\n It is common to call <b>background()</b> near the beginning of the\n <b>draw()</b> loop to clear the contents of the window, as shown in the first\n example above.  Since pixels drawn to the window are cumulative, omitting\n <b>background()</b> may result in unintended results.<br />\n <br />\n There can only be one <b>draw()</b> function for each sketch, and <b>draw()</b>\n must exist if you want the code to run continuously, or to process events such\n as <b>mousePressed()</b>. Sometimes, you might have an empty call to\n <b>draw()</b> in your program, as shown in the second example above.","syntax":["draw()"],"category":"structure","subcategory":"","parameters":[],"related":["setup_","loop_","noLoop_","redraw_","frameRate_","background_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"draw_0","internal":{"content":"float yPos = 0.0;\n\nvoid setup() {  // setup() runs once\n  size(200, 200);\n  frameRate(30);\n}\n \nvoid draw() {  // draw() loops forever, until stopped\n  background(204);\n  yPos = yPos - 1.0;\n  if (yPos < 0) {\n    yPos = height;\n  }\n  line(0, yPos, width, yPos);\n}\n"},"extension":"pde"}},{"node":{"name":"draw_1","internal":{"content":"void setup() {\n  size(200, 200);\n}\n\n// Although empty here, draw() is needed so\n// the sketch can process user input events\n// (mouse presses in this case).\nvoid draw() { }\n\nvoid mousePressed() {\n  line(mouseX, 10, mouseX, 90);\n}\n"},"extension":"pde"}}]}} ''',
    'ellipseMode_':
        r''' {"json":{"name":"ellipseMode()","description":"Modifies the location from which ellipses are drawn by changing the way in\n which parameters given to <b>ellipse()</b> are interpreted.<br />\n <br />\n The default mode is <b>ellipseMode(CENTER)</b>, which interprets the first\n two parameters of <b>ellipse()</b> as the shape's center point, while the\n third and fourth parameters are its width and height.<br />\n <br />\n <b>ellipseMode(RADIUS)</b> also uses the first two parameters of\n <b>ellipse()</b> as the shape's center point, but uses the third and fourth\n parameters to specify half of the shape's width and height.<br />\n <br />\n <b>ellipseMode(CORNER)</b> interprets the first two parameters of\n <b>ellipse()</b> as the upper-left corner of the shape, while the third and\n fourth parameters are its width and height.<br />\n <br />\n <b>ellipseMode(CORNERS)</b> interprets the first two parameters of\n <b>ellipse()</b> as the location of one corner of the ellipse's bounding box,\n and the third and fourth parameters as the location of the opposite\n corner.<br />\n <br />\n The parameter must be written in ALL CAPS because Processing is a\n case-sensitive language.","syntax":["ellipseMode(mode)"],"category":"shape","subcategory":"attributes","parameters":[{"name":"mode","description":"either CENTER, RADIUS, CORNER, or CORNERS","type":["int"]}],"related":["ellipse_","arc_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"ellipseMode_0","internal":{"content":"size(400, 400);\n\nellipseMode(RADIUS);  // Set ellipseMode to RADIUS\nfill(255);  // Set fill to white\nellipse(200, 200, 120, 120);  // Draw white ellipse using RADIUS mode\n\nellipseMode(CENTER);  // Set ellipseMode to CENTER\nfill(100);  // Set fill to gray\nellipse(200, 200, 120, 120);  // Draw gray ellipse using CENTER mode"},"extension":"pde"}},{"node":{"name":"ellipseMode_1","internal":{"content":"size(400, 400);\n\nellipseMode(CORNER);  // Set ellipseMode is CORNER\nfill(255);  // Set fill to white\nellipse(100, 100, 200, 200);  // Draw white ellipse using CORNER mode\n\nellipseMode(CORNERS);  // Set ellipseMode to CORNERS\nfill(100);  // Set fill to gray\nellipse(100, 100, 200, 200);  // Draw gray ellipse using CORNERS mode"},"extension":"pde"}}]}} ''',
    'ellipse_':
        r''' {"json":{"name":"ellipse()","description":"Draws an ellipse (oval) to the screen. An ellipse with equal width and height\n is a circle. By default, the first two parameters set the location, and the\n third and fourth parameters set the shape's width and height. The origin may\n be changed with the <b>ellipseMode()</b> function.","syntax":["ellipse(a, b, c, d)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"a","description":"x-coordinate of the ellipse","type":["float"]},{"name":"b","description":"y-coordinate of the ellipse","type":["float"]},{"name":"c","description":"width of the ellipse by default","type":["float"]},{"name":"d","description":"height of the ellipse by default","type":["float"]}],"related":["ellipseMode_","arc_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"ellipse_","internal":{"content":"size(400, 400);\nellipse(224, 184, 220, 220);"},"extension":"pde"}}]}} ''',
    'else':
        r''' {"json":{"name":"else","description":"Extends the <b>if</b> structure allowing the program to choose between two or more blocks of code. It specifies a block of code to execute when the expression in <b>if</b> is <b>false</b>.\n","syntax":["if (expression) { ","  statements ","} else { ","  statements ","} ","","if (expression) { ","  statements ","} else if (expression) { ","  statements ","} else { ","  statements ","}"],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"expression","description":"any valid expression that evaluates to true or false","type":[]},{"name":"statements","description":"one or more statements to be executed","type":[]}],"related":["if"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"else0","internal":{"content":"size(400, 400);\n\nfor (int i = 20; i < 380; i += 20) {\n  if (i < 140) {\n    line(120, i, 320, i);\n  } else {\n    line(80, i, 360, i);\n  }\n}"},"extension":"pde"}},{"node":{"name":"else1","internal":{"content":"size(400, 400);\n\nfor (int i = 20; i < 380; i += 20) {\n  if (i < 140) {\n    line(120, i, 320, i);\n  } else if (i < 260) {\n    line(80, i, 360, i);\n  } else {\n    line(0, i, 400, i);\n  }\n}"},"extension":"pde"}}]}} ''',
    'emissive_':
        r''' {"json":{"name":"emissive()","description":"Sets the emissive color of the material used for drawing shapes drawn to\n the screen. Used in combination with <b>ambient()</b>,\n <b>specular()</b>, and <b>shininess()</b> in setting the material\n properties of shapes.","syntax":["emissive(rgb)","emissive(gray)","emissive(v1, v2, v3)"],"category":"lights_camera","subcategory":"material properties","parameters":[{"name":"rgb","description":"color to set","type":["int"]},{"name":"gray","description":"value between black and white, by default 0 to 255","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["ambient_","specular_","shininess_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"emissive_","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\nbackground(0);\ndirectionalLight(204, 204, 204, .5, 0, -1);\nemissive(0, 26, 51);\ntranslate(280, 200, 0);\nsphere(120);"},"extension":"pde"}}]}} ''',
    'endCamera_':
        r''' {"json":{"name":"endCamera()","description":"The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n advanced customization of the camera space. Please see the reference for\n <b>beginCamera()</b> for a description of how the functions are used.","syntax":["endCamera()"],"category":"lights_camera","subcategory":"camera","parameters":[],"related":["beginCamera_","camera_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"endCamera_","internal":{"content":"size(400, 400, P3D);\nnoFill();\n\nbeginCamera();\ncamera();\nrotateX(-PI/6);\nendCamera();\n\ntranslate(200, 200, 0);\nrotateY(PI/3);\nbox(180);"},"extension":"pde"}}]}} ''',
    'endContour_':
        r''' {"json":{"name":"endContour()","description":"Use the <b>beginContour()</b> and <b>endContour()</b> function to\n create negative shapes within shapes such as the center of the\n letter 'O'. <b>beginContour()</b> begins recording vertices for\n the shape and <b>endContour()</b> stops recording. The vertices\n that define a negative shape must \"wind\" in the opposite direction\n from the exterior shape. First draw vertices for the exterior shape\n in clockwise order, then for internal shapes, draw vertices counterclockwise.<br />\n <br />\n These functions can only be used within a <b>beginShape()</b>/<b>endShape()</b>\n pair and transformations such as <b>translate()</b>, <b>rotate()</b>, and\n <b>scale()</b> do not work within a <b>beginContour()</b>/<b>endContour()</b>\n pair. It is also not possible to use other shapes, such as <b>ellipse()</b>\n or <b>rect()</b> within.","syntax":["endContour()"],"category":"shape","subcategory":"vertex","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"endContour_0","internal":{"content":"size(400, 400);\ntranslate(200, 200);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-160, -160);\nvertex(160, -160);\nvertex(160, 160);\nvertex(-160, 160);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-80, -80);\nvertex(-80, 80);\nvertex(80, 80);\nvertex(80, -80);\nendContour();\nendShape(CLOSE);"},"extension":"pde"}}]}} ''',
    'endRaw_':
        r''' {"json":{"name":"endRaw()","description":"Complement to <b>beginRaw()</b>; they must always be used together. See\n the <b>beginRaw()</b> reference for details.","syntax":["endRaw()"],"category":"output","subcategory":"files","parameters":[],"related":["beginRaw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"endRaw_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(400, 400);\n  beginRaw(PDF, \"raw.pdf\");\n}\n\nvoid draw() {\n  line(pmouseX, pmouseY, mouseX, mouseY);\n}\n\nvoid keyPressed() {\n  if (key == ' ') {\n    endRaw();\n    exit();\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'endRecord_':
        r''' {"json":{"name":"endRecord()","description":"Stops the recording process started by <b>beginRecord()</b> and closes\n the file.","syntax":["endRecord()"],"category":"output","subcategory":"files","parameters":[],"related":["beginRecord_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"endRecord_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(400, 400);\n  beginRecord(PDF, \"everything.pdf\");\n}\n\nvoid draw() {\n  ellipse(mouseX, mouseY, 10, 10);\n}\n\nvoid mousePressed() {\n  endRecord();\n  exit();\n} \n"},"extension":"pde"}}]}} ''',
    'endShape_':
        r''' {"json":{"name":"endShape()","description":"The <b>endShape()</b> function is the companion to <b>beginShape()</b>\n and may only be called after <b>beginShape()</b>. When <b>endshape()</b>\n is called, all of image data defined since the previous call to\n <b>beginShape()</b> is written into the image buffer. The constant CLOSE\n as the value for the MODE parameter to close the shape (to connect the\n beginning and the end).","syntax":["endShape()","endShape(mode)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"mode","description":"use CLOSE to close the shape","type":["int"]}],"related":["PShape","beginShape_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"endShape_","internal":{"content":"size(400, 400);\nnoFill();\n\nbeginShape();\nvertex(80, 80);\nvertex(180, 80);\nvertex(180, 320);\nendShape(CLOSE);\n\nbeginShape();\nvertex(200, 80);\nvertex(300, 80);\nvertex(300, 320);\nendShape();"},"extension":"pde"}}]}} ''',
    'equality':
        r''' {"json":{"name":"== (equality)","description":"Determines if two values are equivalent. Please note the equality operator (==) is different from the assignment operator (=) and although they look similar, they have a different use. If you're comparing two variables, the equality operator (==) only works with primitive data types like int, boolean, and char. It doesn't work with composite data types like Array, Table, and PVector.<br /> \n<br />\nNote that when comparing String objects, you must use the <b>equals()</b> method instead of ==. See the reference for String or the <a href=\"https://github.com/processing/processing/wiki/Troubleshooting#why-dont-these-strings-equal\">troubleshooting</a> note for more explanation.<br /> \n<br />\n","syntax":["value1 == value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, byte, boolean","type":[]},{"name":"value2","description":"int, float, char, byte, boolean","type":[]}],"related":["greaterthan","lessthan","greaterthanorequalto","lessthanorequalto","inequality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"equality_0","internal":{"content":"int a = 23;\nint b = 23;\nif (a == b) {\n  println(\"the values of variables 'a' and 'b' are the same\");\n}\n"},"extension":"pde"}}]}} ''',
    'exit_':
        r''' {"json":{"name":"exit()","description":"Quits/stops/exits the program. Programs without a <b>draw()</b> function\n exit automatically after the last line has run, but programs with\n <b>draw()</b> run continuously until the program is manually stopped or\n <b>exit()</b> is run.<br />\n <br />\n Rather than terminating immediately, <b>exit()</b> will cause the sketch\n to exit after <b>draw()</b> has completed (or after <b>setup()</b>\n completes if called during the <b>setup()</b> function).<br />\n <br />\n For Java programmers, this is <em>not</em> the same as System.exit().\n Further, System.exit() should not be used because closing out an\n application while <b>draw()</b> is running may cause a crash\n (particularly with P3D).","syntax":["exit()"],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"exit_0","internal":{"content":"void draw() {\n  line(mouseX, mouseY, 50, 50);\n}\n\nvoid mousePressed() {\n  exit(); \n}\n"},"extension":"pde"}}]}} ''',
    'exp_':
        r''' {"json":{"name":"exp()","description":"Returns Euler's number <i>e</i> (2.71828...) raised to the power of the\n <b>value</b> parameter.","syntax":["exp(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"exponent to raise","type":["float"]}],"related":[],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"exp_0","internal":{"content":"float v1 = exp(1.0);\nprintln(v1);  // Prints \"2.7182817\"\n\n"},"extension":"pde"}}]}} ''',
    'expand_':
        r''' {"json":{"name":"expand()","description":"Increases the size of a one-dimensional array. By default, this function\n doubles the size of the array, but the optional <b>newSize</b> parameter\n provides precise control over the increase in size. <br />\n <br />\n When using an array of objects, the data returned from the function must be\n cast to the object array's data type. For example: <em>SomeClass[] items =\n (SomeClass[]) expand(originalArray)</em>","syntax":["expand(list)","expand(list, newSize)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"the array to expand","type":["boolean[]","byte[]","char[]","int[]","long[]","float[]","double[]","String[]","Object"]},{"name":"newSize","description":"new size for the array","type":["int"]}],"related":["shorten_"],"returns":"boolean[], byte[], char[], int[], long[], float[], double[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"expand_0","internal":{"content":"int[] data = {0, 1, 3, 4};\nprintln(data.length);  // Prints \"4\"\ndata = expand(data);\nprintln(data.length);  // Prints \"8\"\ndata = expand(data, 512);\nprintln(data.length);  // Prints \"512\"\n"},"extension":"pde"}},{"node":{"name":"expand_1","internal":{"content":"PImage[] imgs = new PImage[32];\nprintln(imgs.length);  // Prints \"32\"\nimgs = (PImage[]) expand(imgs);\nprintln(imgs.length);  // Prints \"64\"\n"},"extension":"pde"}}]}} ''',
    'extends':
        r''' {"json":{"name":"extends","description":"Allows a new class to <em>inherit</em> the methods and data fields (variables and constants) from an existing class. In code, state the name of the new class, followed by the keyword <b>extends</b> and the name of the <i>base class</i>. The concept of inheritance is one of the fundamental principles of object oriented programming.<br />\n<br />\nNote that in Java, and therefore also Processing, you cannot extend a class more than once. Instead, see <b>implements</b>.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["class","super","implements"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"extends_0","internal":{"content":"DrawDot dd1 = new DrawDot(50, 80);\n\nvoid setup() { \n  size(200, 200);\n} \n \nvoid draw() {\n  dd1.display();\n} \n \nclass Dot { \n  int xpos, ypos;\n} \n\nclass DrawDot extends Dot {\n  DrawDot(int x, int y) {\n    xpos = x;\n    ypos = y;\n  }\n  void display() {\n    ellipse(xpos, ypos, 200, 200);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'false':
        r''' {"json":{"name":"false","description":"Reserved word representing the logical value \"false\". Only variables of type <b>boolean</b> may be assigned the value <b>false</b>.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["true","boolean"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"false_0","internal":{"content":"rect(30, 20, 50, 50);\nboolean b = false;\nif (b == false) {\n  line(20, 10, 90, 80);  // This line is drawn\n} else {\n  line(20, 80, 90, 10);  // This line is not drawn\n}\n"},"extension":"pde"}}]}} ''',
    'fill_':
        r''' {"json":{"name":"fill()","description":"Sets the color used to fill shapes. For example, if you run <b>fill(204,\n 102, 0)</b>, all subsequent shapes will be filled with orange. This\n color is either specified in terms of the RGB or HSB color depending on\n the current <b>colorMode()</b> (the default color space is RGB, with\n each value in the range from 0 to 255).\n <br/> <br/>\n When using hexadecimal notation to specify a color, use \"#\" or \"0x\"\n before the values (e.g. #CCFFAA, 0xFFCCFFAA). The # syntax uses six\n digits to specify a color (the way colors are specified in HTML and\n CSS). When using the hexadecimal notation starting with \"0x\", the\n hexadecimal value must be specified with eight characters; the first two\n characters define the alpha component and the remainder the red, green,\n and blue components.\n <br/> <br/>\n The value for the parameter \"gray\" must be less than or equal to the\n current maximum value as specified by <b>colorMode()</b>. The default\n maximum value is 255.\n <br/> <br/>\n To change the color of an image (or a texture), use tint().","syntax":["fill(rgb)","fill(rgb, alpha)","fill(gray)","fill(gray, alpha)","fill(v1, v2, v3)","fill(v1, v2, v3, alpha)"],"category":"color","subcategory":"setting","parameters":[{"name":"rgb","description":"color variable or hex value","type":["int"]},{"name":"alpha","description":"opacity of the fill","type":["float"]},{"name":"gray","description":"number specifying value between white and black","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["noFill_","stroke_","noStroke_","tint_","background_","colorMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"fill_0","internal":{"content":"size(400, 400);\nfill(153);\nrect(120, 80, 220, 220);"},"extension":"pde"}},{"node":{"name":"fill_1","internal":{"content":"size(400, 400);\nfill(204, 102, 0);\nrect(120, 80, 220, 220);"},"extension":"pde"}}]}} ''',
    'filter_':
        r''' {"json":{"name":"filter()","description":"Filters the image as defined by one of the following modes:<br />\n <br />\n THRESHOLD<br />\n Converts the image to black and white pixels depending if they are above or\n below the threshold defined by the level parameter. The parameter must be\n between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is\n used.<br />\n <br />\n GRAY<br />\n Converts any colors in the image to grayscale equivalents. No parameter is\n used.<br />\n <br />\n OPAQUE<br />\n Sets the alpha channel to entirely opaque. No parameter is used.<br />\n <br />\n INVERT<br />\n Sets each pixel to its inverse value. No parameter is used.<br />\n <br />\n POSTERIZE<br />\n Limits each channel of the image to the number of colors specified as the\n parameter. The parameter can be set to values between 2 and 255, but results\n are most noticeable in the lower ranges.<br />\n <br />\n BLUR<br />\n Executes a Gaussian blur with the level parameter specifying the extent of\n the blurring. If no parameter is used, the blur is equivalent to Gaussian\n blur of radius 1. Larger values increase the blur.<br />\n <br />\n ERODE<br />\n Reduces the light areas. No parameter is used.<br />\n <br />\n DILATE<br />\n Increases the light areas. No parameter is used.\n\n\n ","syntax":["filter(shader)","filter(kind)","filter(kind, param)"],"category":"image","subcategory":"pixels","parameters":[{"name":"shader","description":"the fragment shader to apply","type":["PShader"]},{"name":"kind","description":"Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE,\n              or DILATE","type":["int"]},{"name":"param","description":"unique for each, see above","type":["float"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"filter_0","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(THRESHOLD);"},"extension":"pde"}},{"node":{"name":"filter_1","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(GRAY);"},"extension":"pde"}},{"node":{"name":"filter_2","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(INVERT);"},"extension":"pde"}},{"node":{"name":"filter_3","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(POSTERIZE, 4);"},"extension":"pde"}},{"node":{"name":"filter_4","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(BLUR, 6);"},"extension":"pde"}},{"node":{"name":"filter_5","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(ERODE);\n"},"extension":"pde"}},{"node":{"name":"filter_6","internal":{"content":"PImage img;\nimg = loadImage(\"flower.jpg\");\nimage(img, 0, 0);\nfilter(DILATE);\n"},"extension":"pde"}},{"node":{"name":"filter_7","internal":{"content":"PShader blur;\nPImage img;\n\nvoid setup() {\n  size(400, 400, P2D);\n  blur = loadShader(\"blur.glsl\");\n  img = loadImage(\"flower.jpg\");\n  image(img, 0, 0); \n}\n\n\nvoid draw() {\n  filter(blur); // Blurs more each time through draw()\n}"},"extension":"pde"}}]}} ''',
    'final':
        r''' {"json":{"name":"final","description":"Keyword used to state that a value, class, or method can't be changed. If the <b>final</b> keyword is used to define a variable, the variable can't be changed within the program. When used to define a class, a <b>final</b> class cannot be subclassed. When used to define a function or method, a <b>final</b> method can't be overridden by subclasses.<br />\n<br />\nThis keyword is an essential part of Java programming and is not usually used with Processing. Consult a Java language reference or tutorial for more information. \n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"final_0","internal":{"content":"final float constant = 12.84753;\nprintln(constant);  // Prints \"12.84753\" to the console\nconstant += 12.84;  // ERROR! It's not possible to change a \"final\" value\n"},"extension":"pde"}}]}} ''',
    'float':
        r''' {"json":{"name":"float","description":"Data type for floating-point numbers, e.g. numbers that have a decimal point.<br />\n<br />\nFloats are not precise, so adding small values (such as 0.0001) may not always increment precisely due to rounding errors. If you want to increment a value in small intervals, use an <b>int</b>, and divide by a <b>float</b> value before using it. (See the second example above.)<br />\n<br />\nFloating-point numbers can be as large as 3.40282347E+38 and as low as -3.40282347E+38. They are stored as 32 bits (4 bytes) of information. The <b>float</b> data type is inherited from Java; you can read more about the technical details <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\">here</a> and <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.3\">here</a>.<br />\n<br />\nProcessing supports the <b>double</b> datatype from Java as well. However, none of the Processing functions use <b>double</b> values, which use more memory and are typically overkill for most work created in Processing. We do not plan to add support for <b>double</b> values, as doing so would require increasing the number of API functions significantly.\n","syntax":["float var","float var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the float","type":[]},{"name":"value","description":"any floating-point value","type":[]}],"related":["int","double"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"float_0","internal":{"content":"float a;           // Declare variable 'a' of type float\na = 1.5387;        // Assign 'a' the value 1.5387\nfloat b = -2.984;  // Declare variable 'b' and assign it the value -2.984\nfloat c = a + b;   // Declare variable 'c' and assign it the sum of 'a' and 'b'\n"},"extension":"pde"}},{"node":{"name":"float_1","internal":{"content":"float f1 = 0.0;\nfor (int i = 0 ; i < 100000; i++) {  \n  f1 = f1 + 0.0001;  // Bad idea! See below.\n}\nprintln(f1);\n\nfloat f2 = 0.0;\nfor (int i = 0; i < 100000; i++) {\n  // The variable 'f2' will work better here, less affected by rounding\n  f2 = i / 1000.0;  // Count by thousandths\n}\nprintln(f2);\n"},"extension":"pde"}}]}} ''',
    'floatconvert_':
        r''' {"json":{"name":"float()","description":"Converts an <b>int</b> or <b>String</b> to its floating point representation.  An <b>int</b> is easily converted to a <b>float</b>, but the contents of a <b>String</b> must resemble a number, or <b>NaN</b> (not a number) will be returned.  For example, <b>float(\"1234.56\")</b> evaluates to <b>1234.56</b>, but <b>float(\"giraffe\")</b> will return <b>NaN</b>.<br />\n<br />\nWhen an array of <b>int</b> or <b>String</b> values is passed in, then a floating point array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":[],"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"floatconvert_0","internal":{"content":"int i = 65;\nfloat f = float(i);\nprintln(i + \" : \" + f);  // Prints \"65 : 65.0\"\n"},"extension":"pde"}}]}} ''',
    'floor_':
        r''' {"json":{"name":"floor()","description":"Calculates the closest int value that is less than or equal to the value\n of the parameter.","syntax":["floor(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number to round down","type":["float"]}],"related":["ceil_","round_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"floor_0","internal":{"content":"float x = 2.88;  \nint a = floor(x);  // Sets 'a' to 2\n"},"extension":"pde"}}]}} ''',
    'focused':
        r''' {"json":{"name":"focused","classanchor":null,"description":"Confirms if a Processing program is \"focused\", meaning that it is active\n and will accept input from mouse or keyboard. This variable is <b>true</b> if\n it is focused and <b>false</b> if not.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":[],"returns":null},"pdes":{"edges":[{"node":{"name":"focused_0","internal":{"content":"if (focused) {  // or \"if (focused == true)\"\n  ellipse(25, 25, 50, 50);\n} else {\n  line(0, 0, 100, 100);\n  line(100, 0, 0, 100);\n}\n"},"extension":"pde"}}]}} ''',
    'for':
        r''' {"json":{"name":"for","description":"Controls a sequence of repetitions. A basic <b>for</b> structure has three parts: <b>init</b>, <b>test</b>, and <b>update</b>. Each part must be separated by a semicolon (;). The loop continues until the <b>test</b> evaluates to <b>false</b>. When a <b>for</b> structure is executed, the following sequence of events occurs:<br />\n<br />\n1. The init statement is run.<br />\n2. The test is evaluated to be true or false.<br />\n3. If the test is <em>true</em>, jump to step 4. If the test is <em>false</em>, jump to step 6.<br />\n4. Run the statements within the block.<br />\n5. Run the update statement and jump to step 2.<br />\n6. Exit the loop.<br />\n<br />\nIn the first example above, the <b>for</b> structure is executed 40 times. In the init statement, the value <em>i</em> is created and set to zero. <em>i</em> is less than 40, so the test evaluates as <em>true</em>. At the end of each loop, <em>i</em> is incremented by one. On the 41st execution, the test is evaluated as <em>false</em>, because <em>i</em> is then equal to 40, so <em>i &lt; 40</em> is no longer true. Thus, the loop exits.<br />\n<br />\nA second type of <b>for</b> structure makes it easier to iterate over each element of an array. The last example above shows how it works. Within the parentheses, first define the datatype of the array, then define a variable name. This variable name will be assigned to each element of the array in turn as the <b>for</b> moves through the entire array. Finally, after the colon, define the array name to be used. \n","syntax":["for (init; test; update) { ","  statements","} ","","for (datatype element : array) { ","  statements","}"],"category":"Control","subcategory":"Iteration","parameters":[{"name":"init","description":"statement executed once when beginning loop","type":[]},{"name":"test","description":"if the test evaluates to <em>true</em>, the statements execute","type":[]},{"name":"update","description":"executes at the end of each iteration","type":[]},{"name":"statements","description":"collection of statements executed each time through the loop","type":[]},{"name":"datatype","description":"datatype of elements in the array","type":[]},{"name":"element","description":"temporary name to use for each element of the array","type":[]},{"name":"array","description":"name of the array to iterate through","type":[]}],"related":["while"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"for_0","internal":{"content":"size(400, 400);\nfor (int i = 0; i < 160; i = i+1) {\n  line(120, i, 320, i);\n}"},"extension":"pde"}},{"node":{"name":"for_1","internal":{"content":"size(400, 400);\nfor (int i = 0; i < 320; i = i+20) {\n  line(120, i, 320, i);\n}"},"extension":"pde"}},{"node":{"name":"for_2","internal":{"content":"size(400, 400);\nfor (int i = 160; i < 320; i = i+20) {\n  line(120, i, 320, i);\n}"},"extension":"pde"}},{"node":{"name":"for_3","internal":{"content":"// Nested for() loops can be used to\n// generate two-dimensional patterns\nsize(400, 400);\n\nfor (int i = 120; i < 320; i = i+20) {\n  for (int j = 0; j < 320; j = j+20) {\n    point(i, j);\n  }\n}"},"extension":"pde"}}]}} ''',
    'frameCount':
        r''' {"json":{"name":"frameCount","classanchor":null,"description":"The system variable <b>frameCount</b> contains the number of frames\n displayed since the program started. Inside <b>setup()</b> the value is\n 0 and and after the first iteration of draw it is 1, etc.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["frameRate_","frameRate"],"returns":null},"pdes":{"edges":[{"node":{"name":"frameCount_0","internal":{"content":"void setup() {\n  frameRate(30);\n}\n\nvoid draw() {\n  line(0, 0, width, height);\n  println(frameCount);\n}\n"},"extension":"pde"}}]}} ''',
    'frameRate':
        r''' {"json":{"name":"frameRate","classanchor":null,"description":"The system variable <b>frameRate</b> contains the approximate frame rate\n of the software as it executes. The initial value is 10 fps and is\n updated with each frame. The value is averaged (integrated) over several\n frames. As such, this value won't be valid until after 5-10 frames.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["frameRate_","frameCount"],"returns":null},"pdes":{"edges":[{"node":{"name":"frameRate_var_0","internal":{"content":"void setup() {\n  frameRate(30);\n}\n\nvoid draw() {\n  line(0, 0, width, height);\n  println(frameRate);\n}\n"},"extension":"pde"}}]}} ''',
    'frameRate_':
        r''' {"json":{"name":"frameRate()","description":"Specifies the number of frames to be displayed every second. For example,\n the function call <b>frameRate(30)</b> will attempt to refresh 30 times a\n second. If the processor is not fast enough to maintain the specified rate,\n the frame rate will not be achieved. Setting the frame rate within\n <b>setup()</b> is recommended. The default rate is 60 frames per second.","syntax":["frameRate(fps)"],"category":"environment","subcategory":"","parameters":[{"name":"fps","description":"number of desired frames per second","type":["float"]}],"related":["frameRate","frameCount","setup_","draw_","loop_","noLoop_","redraw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"frameRate_0","internal":{"content":"void setup() {\n  frameRate(4);\n}\nint pos = 0;\nvoid draw() {\n  background(204);\n  pos++;\n  line(pos, 20, pos, 80);\n  if (pos > width) {\n    pos = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'frustum_':
        r''' {"json":{"name":"frustum()","description":"Sets a perspective matrix as defined by the parameters.<br />\n <br />\n A frustum is a geometric form: a pyramid with its top cut off. With the\n viewer's eye at the imaginary top of the pyramid, the six planes of the\n frustum act as clipping planes when rendering a 3D view. Thus, any form\n inside the clipping planes is rendered and visible; anything outside those\n planes is not visible.<br />\n <br />\n Setting the frustum has the effect of changing the <em>perspective</em> with\n which the scene is rendered. This can be achieved more simply in many cases\n by using <strong>perspective()</strong>.<br />\n <br />\n Note that the near value must be greater than zero (as the point of the\n frustum \"pyramid\" cannot converge \"behind\" the viewer). Similarly, the far\n value must be greater than the near value (as the \"far\" plane of the frustum\n must be \"farther away\" from the viewer than the near plane).<br />\n <br />\n Works like glFrustum, except it wipes out the current perspective matrix\n rather than multiplying itself with it.","syntax":["frustum(left, right, bottom, top, near, far)"],"category":"lights_camera","subcategory":"camera","parameters":[{"name":"left","description":"left coordinate of the clipping plane","type":["float"]},{"name":"right","description":"right coordinate of the clipping plane","type":["float"]},{"name":"bottom","description":"bottom coordinate of the clipping plane","type":["float"]},{"name":"top","description":"top coordinate of the clipping plane","type":["float"]},{"name":"near","description":"near component of the clipping plane; must be greater than zero","type":["float"]},{"name":"far","description":"far component of the clipping plane; must be greater than the\n               near value","type":["float"]}],"related":["camera_","beginCamera_","endCamera_","perspective_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"frustum_","internal":{"content":"size(400, 400, P3D);  \nnoFill();\nbackground(204);\nfrustum(-40, 0, 0, 40, 40, 800);\nrotateY(PI/6);\nbox(180);"},"extension":"pde"}}]}} ''',
    'fullScreen_':
        r''' {"json":{"name":"fullScreen()","description":"This function is new for Processing 3.0. It opens a sketch using the full\n size of the computer's display. This function must be the first line in\n <b>setup()</b>. The <b>size()</b> and <b>fullScreen()</b> functions cannot\n both be used in the same program, just choose one.<br />\n <br />\n When <b>fullScreen()</b> is used without a parameter, it draws the sketch\n to the screen currently selected inside the Preferences window. When it is\n used with a single parameter, this number defines the screen to display to\n program on (e.g. 1, 2, 3...). When used with two parameters, the first\n defines the renderer to use (e.g. P2D) and the second defines the screen.\n The <b>SPAN</b> parameter can be used in place of a screen number to draw\n the sketch as a full-screen window across all of the attached displays if\n there are more than one.<br />\n <br />\n Prior to Processing 3.0, a full-screen program was defined with\n <b>size(displayWidth, displayHeight)</b>.","syntax":["fullScreen()","fullScreen(display)","fullScreen(renderer)","fullScreen(renderer, display)"],"category":"environment","subcategory":"","parameters":[{"name":"renderer","description":"the renderer to use, e.g. P2D, P3D, JAVA2D (default)","type":["String"]},{"name":"display","description":"the screen to run the sketch on (1, 2, 3, etc. or on multiple screens using SPAN)","type":["int"]}],"related":["settings_","setup_","size_","smooth_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"fullScreen_0","internal":{"content":"// Run the code at the full dimensions of the screen currently\n// selected inside the Preferences window\n\nint x = 0;\n\nvoid setup() {\n  fullScreen();\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"fullScreen_1","internal":{"content":"// If more than one screen is attached to the computer, run the \n// code at the full dimensions on the screen defined by the \n// parameter to fullScreen()\n\nint x = 0;\n\nvoid setup() {\n  fullScreen(2);\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"fullScreen_2","internal":{"content":"// Run full screen using the P2D renderer on screen 2\n\nint x = 0;\n\nvoid setup() {\n  fullScreen(P2D, 2);\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"fullScreen_3","internal":{"content":"// If more than one screen is attached to the computer, run the \n// code at the full dimensions across all of the attached screens\n\nint x = 0;\n\nvoid setup() {\n  fullScreen(P2D, SPAN);\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}}]}} ''',
    'green_':
        r''' {"json":{"name":"green()","description":"Extracts the green value from a color, scaled to match current\n <b>colorMode()</b>. The value is always returned as a float, so be careful\n not to assign it to an int value.<br />\n <br />\n The <b>green()</b> function is easy to use and understand, but it is slower\n than a technique called bit shifting. When working in <b>colorMode(RGB,\n 255)</b>, you can achieve the same results as <b>green()</b> but with greater\n speed by using the right shift operator (<b>>></b>) with a bit mask. For\n example, the following two lines of code are equivalent means of getting the\n green value of the color value <b>c</b>:<br />\n <br />\n\n <pre>\n float g1 = green(c); // Simpler, but slower to calculate\n float g2 = c >> 8 & 0xFF; // Very fast to calculate\n </pre>","syntax":["green(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","blue_","alpha_","hue_","saturation_","brightness_","rightshift_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"green_","internal":{"content":"size(400, 400);\ncolor c = color(20, 75, 200);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(60, 80, 140, 240);  // Draw left rectangle\n\nfloat greenValue = green(c);  // Get green in 'c'\nprintln(greenValue);  // Print \"75.0\"\nfill(0, greenValue, 0);  // Use 'greenValue' in new fill\nrect(200, 80, 140, 240);  // Draw right rectangle"},"extension":"pde"}}]}} ''',
    'height':
        r''' {"json":{"name":"height","classanchor":null,"description":"System variable which stores the height of the display window. This\n value is set by the second parameter of the <b>size()</b> function. For\n example, the function call <b>size(320, 240)</b> sets the <b>height</b>\n variable to the value 240. The value of <b>height</b> defaults to 100 if\n <b>size()</b> is not used in a program.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["width","size_"],"returns":null},"pdes":{"edges":[{"node":{"name":"height","internal":{"content":"size(400, 400);\nnoStroke();\nbackground(0);\nrect(160, 0, 80, height);\nrect(240, 0, 80, height/8);"},"extension":"pde"}}]}} ''',
    'hex_':
        r''' {"json":{"name":"hex()","description":"Converts an <b>int</b>, <b>byte</b>, <b>char</b>, or <b>color</b> to a\n <b>String</b> containing the equivalent hexadecimal notation. For example,\n the <b>color</b> value produced by <b>color(0, 102, 153)</b> will convert\n to the <b>String</b> value <b>\"FF006699\"</b>. This function can help make\n your geeky debugging sessions much happier.<br />\n <br />\n Note that the maximum number of digits is 8, because an <b>int</b> value\n can only represent up to 32 bits. Specifying more than 8 digits will not\n increase the length of the <b>String</b> further.","syntax":["hex(value)","hex(value, digits)"],"category":"data","subcategory":"conversion","parameters":[{"name":"value","description":"the value to convert","type":["byte","char","int"]},{"name":"digits","description":"the number of digits (maximum 8)","type":["int"]}],"related":["unhex_","binary_","unbinary_"],"returns":"String","classanchor":null},"pdes":{"edges":[{"node":{"name":"hex_0","internal":{"content":"color c = #ffcc00;\nprintln(c);          // Prints \"-13312\"\nprintln(hex(c));     // Prints \"FFFFCC00\"\nprintln(hex(c, 6));  // Prints \"FFCC00\"\n"},"extension":"pde"}},{"node":{"name":"hex_1","internal":{"content":"color c = color(255, 204, 0);\nprintln(c);          // Prints \"-13312\"\nprintln(hex(c));     // Prints \"FFFFCC00\"\nprintln(hex(c, 6));  // Prints \"FFCC00\"\n"},"extension":"pde"}}]}} ''',
    'hint_':
        r''' {"json":{"name":"hint()","description":"This function is used to enable or disable special features that control how graphics are drawn. In the course of developing Processing, we had to make hard decisions about tradeoffs between performance and visual quality. We put significant effort into determining what makes most sense for the largest number of users, and then use functions like <b>hint()</b> to allow people to tune the settings for their particular sketch. Implementing a <b>hint()</b> is a last resort that's used when a more elegant solution cannot be found. Some options might graduate to standard features instead of hints over time, or be added and removed between (major) releases.\n<br />\n<br />\n<strong>Hints used by the default renderer:</strong>\n<br /><br />\n<b>ENABLE_STROKE_PURE</b><br />\nFixes a problem with shapes that have a stroke and are rendered using small steps (for instance, using vertex() with points that are close to one another), or are drawn at small sizes.\n<br />\n<br />\n<strong>Hints for use with P2D and P3D:</strong>\n<br /><br />\n<b>DISABLE_ASYNC_SAVEFRAME</b><br />\nsave() and saveFrame() will not use separate threads for saving and will block until the image is written to the drive. This was the default behavior in 3.0b7 and before. To enable, call hint(ENABLE_ASYNC_SAVEFRAME).\n<br /><br />\n<b>DISABLE_OPENGL_ERRORS</b><br />\nSpeeds up the P3D renderer setting by not checking for errors while running.\n<br /><br />\n<b>DISABLE_TEXTURE_MIPMAPS</b><br />\nDisable generation of texture mipmaps in P2D or P3D. This results in lower quality - but faster - rendering of texture images when they appear smaller than their native resolutions (the mipmaps are scaled-down versions of a texture that make it look better when drawing it at a small size). However, the difference in performance is fairly minor on recent desktop video cards.\n<br />\n<br />\n<strong>Hints for use with P3D only:</strong>\n<br /><br />\n<b>DISABLE_DEPTH_MASK</b><br />\nDisables writing into the depth buffer. This means that a shape drawn with this hint can be hidden by another shape drawn later, irrespective of their distances to the camera. Note that this is different from disabling the depth test. The depth test is still applied, as long as the DISABLE_DEPTH_TEST hint is not called, but the depth values of the objects are not recorded. This is useful when drawing a semi-transparent 3D object without depth sorting, in order to avoid visual glitches due the faces of the object being at different distances from the camera, but still having the object properly occluded by the rest of the objects in the scene.\n<br /><br />\n<b>ENABLE_DEPTH_SORT</b><br />\nEnable primitive z-sorting of triangles and lines in P3D. This can slow performance considerably, and the algorithm is not yet perfect.\n<br /><br />\n<b>DISABLE_DEPTH_TEST</b><br />\nDisable the zbuffer, allowing you to draw on top of everything at will. When depth testing is disabled, items will be drawn to the screen sequentially, like a painting. This hint is most often used to draw in 3D, then draw in 2D on top of it (for instance, to draw GUI controls in 2D on top of a 3D interface). When called, this will also clear the depth buffer. Restore the default with <b>hint(ENABLE_DEPTH_TEST)</b>, but note that with the depth buffer cleared, any 3D drawing that happens later in will ignore existing shapes on the screen.\n<br /><br />\n<b>DISABLE_OPTIMIZED_STROKE</b><br />\nForces the P3D renderer to draw each shape (including its strokes) separately, instead of batching them into larger groups for better performance. One consequence of this is that 2D items drawn with P3D are correctly stacked on the screen, depending on the order in which they were drawn. Otherwise, glitches such as the stroke lines being drawn on top of the interior of all the shapes will occur. However, this hint can make rendering substantially slower, so it is recommended to use it only when drawing a small amount of shapes. For drawing two-dimensional scenes, use the P2D renderer instead, which doesn't need the hint to properly stack shapes and their strokes.\n<br /><br />\n<b>ENABLE_STROKE_PERSPECTIVE</b><br />\nEnables stroke geometry (lines and points) to be affected by the perspective, meaning that they will look smaller as they move away from the camera.\n","syntax":["hint(which)"],"category":"Rendering","subcategory":"","parameters":[{"name":"which","description":"int: the hint mode to use","type":[]}],"related":["PGraphics","createGraphics_","size_"],"returns":"void","classanchor":null},"pdes":{"edges":[]}} ''',
    'hour_':
        r''' {"json":{"name":"hour()","description":"Processing communicates with the clock on your computer. The\n <b>hour()</b> function returns the current hour as a value from 0 - 23.","syntax":["hour()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","second_","minute_","day_","month_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"hour_0","internal":{"content":"void draw() {\n  background(204);\n  int s = second();  // Values from 0 - 59\n  int m = minute();  // Values from 0 - 59\n  int h = hour();    // Values from 0 - 23\n  line(s, 0, s, 33);\n  line(m, 33, m, 66);\n  line(h, 66, h, 100);\n}\n"},"extension":"pde"}}]}} ''',
    'hue_':
        r''' {"json":{"name":"hue()","description":"Extracts the hue value from a color.","syntax":["hue(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","green_","blue_","alpha_","saturation_","brightness_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"hue_","internal":{"content":"size(400, 400);\nnoStroke();\ncolorMode(HSB, 255);\ncolor c = color(0, 126, 255);\nfill(c);\nrect(60, 80, 140, 240);\nfloat value = hue(c);  // Sets 'value' to \"0\"\nfill(value);\nrect(200, 80, 140, 240);"},"extension":"pde"}}]}} ''',
    'if':
        r''' {"json":{"name":"if","description":"Allows the program to make a decision about which code to execute. If the <b>test</b> evaluates to <b>true</b>, the statements enclosed within the block are executed and if the <b>test</b> evaluates to <b>false</b> the statements are not executed.\n","syntax":["if (test) { ","  statements ","} "],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"test","description":"any valid expression that evaluates to true or false","type":[]},{"name":"statements","description":"one or more statements to be executed","type":[]}],"related":["else"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"if","internal":{"content":"for (int i = 5; i < height; i += 5) {\n  stroke(255);   // Set the color to white\n  if (i < 35) {  // When 'i' is less than 35...\n    stroke(0);   //...set the color to black\n  }\n  line(30, i, 80, i);\n}"},"extension":"pde"}}]}} ''',
    'imageMode_':
        r''' {"json":{"name":"imageMode()","description":"Modifies the location from which images are drawn by changing the way in\n which parameters given to <b>image()</b> are interpreted.<br />\n <br />\n The default mode is <b>imageMode(CORNER)</b>, which interprets the second and\n third parameters of <b>image()</b> as the upper-left corner of the image. If\n two additional parameters are specified, they are used to set the image's\n width and height.<br />\n <br />\n <b>imageMode(CORNERS)</b> interprets the second and third parameters of\n <b>image()</b> as the location of one corner, and the fourth and fifth\n parameters as the opposite corner.<br />\n <br />\n <b>imageMode(CENTER)</b> interprets the second and third parameters of\n <b>image()</b> as the image's center point. If two additional parameters are\n specified, they are used to set the image's width and height.<br />\n <br />\n The parameter must be written in ALL CAPS because Processing is a\n case-sensitive language.","syntax":["imageMode(mode)"],"category":"image","subcategory":"loading & displaying","parameters":[{"name":"mode","description":"either CORNER, CORNERS, or CENTER","type":["int"]}],"related":["loadImage_","PImage","image_","background_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"imageMode_0","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"Toyokawa.jpg\");\n}\n\nvoid draw() {\n  imageMode(CORNER);\n  image(img, 40, 40, 200, 200);  // Draw image using CORNER mode\n}"},"extension":"pde"}},{"node":{"name":"imageMode_1","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"Toyokawa.jpg\");\n}\n\nvoid draw() {\n  imageMode(CORNERS);\n  image(img, 40, 40, 360, 160);  // Draw image using CORNERS mode\n}"},"extension":"pde"}},{"node":{"name":"imageMode_2","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"Toyokawa.jpg\");\n}\n\nvoid draw() {\n  imageMode(CENTER);\n  image(img, 200, 200, 320, 320);  // Draw image using CENTER mode\n}"},"extension":"pde"}}]}} ''',
    'image_':
        r''' {"json":{"name":"image()","description":"The <b>image()</b> function draws an image to the display window. Images must\n be in the sketch's \"data\" directory to load correctly. Select \"Add file...\"\n from the \"Sketch\" menu to add the image to the data directory, or just drag\n the image file onto the sketch window. Processing currently works with GIF,\n JPEG, and PNG images. <br />\n <br />\n The <b>img</b> parameter specifies the image to display and by default the\n <b>a</b> and <b>b</b> parameters define the location of its upper-left\n corner. The image is displayed at its original size unless the <b>c</b> and\n <b>d</b> parameters specify a different size. The <b>imageMode()</b> function\n can be used to change the way these parameters draw the image.<br />\n <br />\n The color of an image may be modified with the <b>tint()</b> function. This\n function will maintain transparency for GIF and PNG images.\n\n ","syntax":["image(img, a, b)","image(img, a, b, c, d)"],"category":"image","subcategory":"loading & displaying","parameters":[{"name":"img","description":"the image to display","type":["PImage"]},{"name":"a","description":"x-coordinate of the image by default","type":["float"]},{"name":"b","description":"y-coordinate of the image by default","type":["float"]},{"name":"c","description":"width to display the image by default","type":["float"]},{"name":"d","description":"height to display the image by default","type":["float"]}],"related":["loadImage_","PImage","imageMode_","tint_","background_","alpha_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"image_0","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"Toyokawa.jpg\");\n}\n\nvoid draw() {\n  image(img, 0, 0);\n}"},"extension":"pde"}},{"node":{"name":"image_1","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"ginko.jpg\");\n}\n\nvoid draw() {\n  image(img, 0, 0);\n  image(img, 0, 0, width/2, height/2);\n}"},"extension":"pde"}}]}} ''',
    'implements':
        r''' {"json":{"name":"implements","description":"Implements an <i>interface</i> or group of <i>interfaces</i>. Interfaces are used to establish a protocol between classes; they establish the form for a class (method names, return types, etc.) but no implementation. After implementation, an interface can be used and extended like any other class.<br />\n<br />\nBecause Java doesn't allow extending more than one class at a time, you can create interfaces instead, so specific methods and fields can be found in the class which implements it. A Thread is an example; it implements the \"Runnable\" interface, which means the class has a method called \"public void run()\" inside it. \n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["extends"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"implements_0","internal":{"content":"interface Dot {\n  void move();\n  void display();\n}\n\nclass CircleDot implements Dot {\n  float x = 50;\n  float y = 50;\n\n  void move() {\n    x = x + random(-1, 1);\n  }\n\n  void display() {\n    ellipse(x, y, 16, 16);\n  }\n}\n\nclass SquareDot implements Dot {\n  float x = 50;\n  float y = 50;\n\n\n  void move() {\n    y = y + random(-1, 1);\n  }\n\n  void display() {\n    rect(x, y, 16, 16);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'import':
        r''' {"json":{"name":"import","description":"The keyword <b>import</b> is used to load a library into a Processing sketch. \nA library is one or more classes that are grouped together to extend the capabilities of Processing. \nThe <b>*</b> character is often used at the end of the import line (see the code example above)\nto load all of the related classes at once, without having to reference them individually.<br />\n<br />\nThe import statement will be created for you by selecting a library from the \"Import Library...\" \nitem in the Sketch menu.\n","syntax":["import libraryName"],"category":"structure","subcategory":"","parameters":[{"name":"libraryName","description":"the name of the library to load (e.g. \"processing.pdf.*\")","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"import_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(1024, 768, PDF);\n}\n\nvoid draw() {\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'increment':
        r''' {"json":{"name":"++ (increment)","description":"Increases the value of an integer variable by 1. Equivalent to the operation <b>i = i + 1</b>. If the value of the variable <b>i</b> is five, then the expression <b>i++</b> increases the value of <b>i</b> to 6.\n","syntax":["value++"],"category":"math","subcategory":"Operators","parameters":[{"name":"value","description":"int","type":[]}],"related":["addition","addassign","decrement"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"increment_0","internal":{"content":"int a = 1;   // Sets 'a' to 1 \nint b = a++; // Sets 'b' to 1, then increments 'a' to 2\nint c = a;   // Sets 'c' to 2 \n"},"extension":"pde"}}]}} ''',
    'inequality':
        r''' {"json":{"name":"!= (inequality)","description":"Determines if one expression is not equivalent to another.\n","syntax":["value1 != value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, byte, boolean","type":[]},{"name":"value2","description":"int, float, char, byte, boolean","type":[]}],"related":["greaterthan","lessthan","greaterthanorequalto","lessthanorequalto","equality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"inequality_0","internal":{"content":"int a = 22;\nint b = 23;\nif (a != b) {\n  println(\"variable a is not equal to variable b\");\n}\n"},"extension":"pde"}}]}} ''',
    'int':
        r''' {"json":{"name":"int","description":"Datatype for integers, numbers without a decimal point. Integers can be as large as 2,147,483,647 and as low as -2,147,483,648. They are stored as 32 bits of information. The first time a variable is written, it must be declared with a statement expressing its datatype. Subsequent uses of this variable must not reference the datatype because Processing will think the variable is being declared again.\n","syntax":["int var","int var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the value","type":[]},{"name":"value","description":"any integer value","type":[]}],"related":["float"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"int_0","internal":{"content":"int a;          // Declare variable 'a' of type int\na = 23;         // Assign 'a' the value 23\nint b = -256;   // Declare variable 'b' and assign it the value -256\nint c = a + b;  // Declare variable 'c' and assign it the sum of 'a' and 'b'\n"},"extension":"pde"}}]}} ''',
    'intconvert_':
        r''' {"json":{"name":"int()","description":"Converts any value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>color</b>, <b>float</b>, <b>int</b>, or <b>long</b>) or String to its integer representation.<br />\n<br />\nWhen an array of values is passed in, then an <b>int</b> array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":[],"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"intconvert_0","internal":{"content":"float f = 65.0;\nint i = int(f);\nprintln(f + \" : \" + i);  // Prints \"65.0 : 65\"\n\nchar c = 'E';\ni = int(c);\nprintln(c + \" : \" + i);  // Prints \"E : 69\"\n"},"extension":"pde"}}]}} ''',
    'join_':
        r''' {"json":{"name":"join()","description":"Combines an array of Strings into one String, each separated by the\n character(s) used for the <b>separator</b> parameter. To join arrays of\n ints or floats, it's necessary to first convert them to Strings using\n <b>nf()</b> or <b>nfs()</b>.","syntax":["join(list, separator)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"list","description":"array of Strings","type":["String[]"]},{"name":"separator","description":"char or String to be placed between each item","type":["char","String"]}],"related":["split_","trim_","nf_","nfs_"],"returns":"String","classanchor":null},"pdes":{"edges":[{"node":{"name":"join_0","internal":{"content":"String[] animals = new String[3]; \nanimals[0] = \"cat\"; \nanimals[1] = \"seal\"; \nanimals[2] = \"bear\"; \nString joinedAnimals = join(animals, \" : \"); \nprintln(joinedAnimals);  // Prints \"cat : seal : bear\" \n\n// Joining an array of ints requires first\n// converting to an array of Strings\nint[] numbers = new int[3]; \nnumbers[0] = 8; \nnumbers[1] = 67; \nnumbers[2] = 5; \nString joinedNumbers = join(nf(numbers, 0), \", \"); \nprintln(joinedNumbers);  // Prints \"8, 67, 5\" \n\n"},"extension":"pde"}}]}} ''',
    'key':
        r''' {"json":{"name":"key","classanchor":null,"description":"The system variable <b>key</b> always contains the value of the most\n recent key on the keyboard that was used (either pressed or released).\n <br/> <br/>\n For non-ASCII keys, use the <b>keyCode</b> variable. The keys included\n in the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and\n DELETE) do not require checking to see if they key is coded, and you\n should simply use the <b>key</b> variable instead of <b>keyCode</b> If\n you're making cross-platform projects, note that the ENTER key is\n commonly used on PCs and Unix and the RETURN key is used instead on\n Macintosh. Check for both ENTER and RETURN to make sure your program\n will work for all platforms.\n <br /><br />\n There are issues with how <b>keyCode</b> behaves across different\n renderers and operating systems. Watch out for unexpected behavior as\n you switch renderers and operating systems.\n\n ","syntax":null,"category":"input","subcategory":"keyboard","parameters":null,"related":["keyCode","keyPressed","keyPressed_","keyReleased_"],"returns":null},"pdes":{"edges":[{"node":{"name":"key_0","internal":{"content":"// Click on the window to give it focus,\n// and press the 'B' key.\n\nvoid draw() {\n  if (keyPressed) {\n    if (key == 'b' || key == 'B') {\n      fill(0);\n    }\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n"},"extension":"pde"}}]}} ''',
    'keyCode':
        r''' {"json":{"name":"keyCode","classanchor":null,"description":"The variable <b>keyCode</b> is used to detect special keys such as the\n UP, DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT.\n <br /><br />\n When checking for these keys, it can be useful to first check if the key\n is coded. This is done with the conditional <b>if (key == CODED)</b>, as\n shown in the example above.\n <br/> <br/>\n The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n RETURN, ESC, and DELETE) do not require checking to see if the key is\n coded; for those keys, you should simply use the <b>key</b> variable\n directly (and not <b>keyCode</b>).  If you're making cross-platform\n projects, note that the ENTER key is commonly used on PCs and Unix,\n while the RETURN key is used on Macs. Make sure your program will work\n on all platforms by checking for both ENTER and RETURN.\n <br/> <br/>\n For those familiar with Java, the values for UP and DOWN are simply\n shorter versions of Java's <b>KeyEvent.VK_UP</b> and <b>KeyEvent.VK_DOWN</b>.\n  Other <b>keyCode</b> values can be found in the Java\n <a href=\"https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html\">KeyEvent</a>\n reference.\n <br /><br />\n There are issues with how <b>keyCode</b> behaves across different renderers\n and operating systems. Watch out for unexpected behavior as you switch\n renderers and operating systems and you are using keys are aren't mentioned\n in this reference entry.\n <br /><br />\n If you are using P2D or P3D as your renderer, use the\n <a href=\"https://jogamp.org/deployment/jogamp-next/javadoc/jogl/javadoc/com/jogamp/newt/event/KeyEvent.html\">NEWT KeyEvent constants</a>.\n\n\n ","syntax":null,"category":"input","subcategory":"keyboard","parameters":null,"related":["key","keyPressed","keyPressed_","keyReleased_"],"returns":null},"pdes":{"edges":[{"node":{"name":"keyCode_0","internal":{"content":"color fillVal = color(126);\n\nvoid draw() {\n  fill(fillVal);\n  rect(25, 25, 50, 50);\n}\n\nvoid keyPressed() {\n  if (key == CODED) {\n    if (keyCode == UP) {\n      fillVal = 255;\n    } else if (keyCode == DOWN) {\n      fillVal = 0;\n    } \n  } else {\n    fillVal = 126;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'keyPressed':
        r''' {"json":{"name":"keyPressed","classanchor":null,"description":"The boolean system variable <b>keyPressed</b> is <b>true</b> if any key\n is pressed and <b>false</b> if no keys are pressed.\n <br /><br />\n Note that there is a similarly named function called <b>keyPressed()</b>.\n See its reference page for more information.","syntax":null,"category":"input","subcategory":"keyboard","parameters":null,"related":["key","keyCode","keyPressed_","keyReleased_"],"returns":null},"pdes":{"edges":[{"node":{"name":"keyPressed_var_0","internal":{"content":"// Click on the image to give it focus,\n// and then press any key.\n\n// Note: The rectangle in this example may \n// flicker as the operating system may \n// register a long key press as a repetition\n// of key presses.\n\nvoid draw() {\n  if (keyPressed == true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n"},"extension":"pde"}}]}} ''',
    'keyPressed_':
        r''' {"json":{"name":"keyPressed()","description":"The <b>keyPressed()</b> function is called once every time a key is\n pressed. The key that was pressed is stored in the <b>key</b> variable.\n <br />\n <br />\n For non-ASCII keys, use the <b>keyCode</b> variable. The keys included in\n the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and DELETE) do\n not require checking to see if the key is coded; for those keys, you should\n simply use the <b>key</b> variable directly (and not <b>keyCode</b>). If\n you're making cross-platform projects, note that the ENTER key is commonly\n used on PCs and Unix, while the RETURN key is used on Macs. Make sure your\n program will work on all platforms by checking for both ENTER and RETURN.\n <br />\n <br />\n Because of how operating systems handle key repeats, holding down a key may\n cause multiple calls to <b>keyPressed()</b>. The rate of repeat is set by\n the operating system, and may be configured differently on each computer.\n <br />\n <br />\n Note that there is a similarly named boolean variable called\n <b>keyPressed</b>. See its reference page for more information. <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events. <br />\n <br />\n With the release of macOS Sierra, Apple changed how key repeat works, so\n keyPressed may not function as expected. See <a href=\n \"https://github.com/processing/processing/wiki/Troubleshooting#key-repeat-on-macos-sierra\">here</a>\n for details of the problem and how to fix it.\n\n ","syntax":["keyPressed()","keyPressed(event)"],"category":"input","subcategory":"keyboard","parameters":[],"related":["key","keyCode","keyPressed","keyReleased_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"keyPressed_0","internal":{"content":"// Click on the image to give it focus,\n// and then press any key.\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid keyPressed() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'keyReleased_':
        r''' {"json":{"name":"keyReleased()","description":"The <b>keyReleased()</b> function is called once every time a key is\n released. The key that was released will be stored in the <b>key</b>\n variable. See <b>key</b> and <b>keyCode</b> for more information. <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.","syntax":["keyReleased()","keyReleased(event)"],"category":"input","subcategory":"keyboard","parameters":[],"related":["key","keyCode","keyPressed","keyPressed_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"keyReleased_0","internal":{"content":"// Click on the image to give it focus,\n// and then press any key.\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid keyReleased() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'keyTyped_':
        r''' {"json":{"name":"keyTyped()","description":"The <b>keyTyped()</b> function is called once every time a key is pressed,\n but action keys such as Ctrl, Shift, and Alt are ignored. <br />\n <br />\n Because of how operating systems handle key repeats, holding down a key may\n cause multiple calls to <b>keyTyped()</b>. The rate of repeat is set by the\n operating system, and may be configured differently on each computer.\n <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.","syntax":["keyTyped()","keyTyped(event)"],"category":"input","subcategory":"keyboard","parameters":[],"related":["keyPressed","key","keyCode","keyReleased_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"keyTyped_0","internal":{"content":"// Run this program to learn how each of these functions\n// relate to the others.\n\nvoid draw() { } // Empty draw() needed to keep the program running\n\nvoid keyPressed() {\n  println(\"pressed \" + int(key) + \" \" + keyCode);\n}\n\nvoid keyTyped() {\n  println(\"typed \" + int(key) + \" \" + keyCode);\n}\n\nvoid keyReleased() {\n  println(\"released \" + int(key) + \" \" + keyCode);\n}\n\n"},"extension":"pde"}}]}} ''',
    'launch_':
        r''' {"json":{"name":"launch()","description":"Attempts to open an application or file using your platform's launcher. The\n <b>filename</b> parameter is a String specifying the file name and\n location. The location parameter must be a full path name, or the name of\n an executable in the system's PATH. In most cases, using a full path is the\n best option, rather than relying on the system PATH. Be sure to make the\n file executable before attempting to open it (chmod +x).<br />\n <br />\n This function (roughly) emulates what happens when you double-click an\n application or document in the macOS Finder, the Windows Explorer, or your\n favorite Linux file manager. If you're trying to run command line functions\n directly, use the <b>exec()</b> function instead (see below).<br />\n <br />\n This function behaves differently on each platform. On Windows, the\n parameters are sent to the Windows shell via \"cmd /c\". On Mac OS X, the\n \"open\" command is used (type \"man open\" in Terminal.app for documentation).\n On Linux, it first tries gnome-open, then kde-open, but if neither are\n available, it sends the command to the shell and prays that something\n useful happens.<br />\n <br />\n For users familiar with Java, this is not the same as Runtime.exec(),\n because the launcher command is prepended. Instead, the\n <b>exec(String[])</b> function is a shortcut for\n Runtime.getRuntime.exec(String[]). The <b>exec()</b> function is documented\n in the\n <a href=\"http://processing.github.io/processing-javadocs/core/\">JavaDoc</a>\n in the <b>PApplet</b> class.","syntax":["launch(args)"],"category":"input","subcategory":"files","parameters":[{"name":"args","description":"arguments to the launcher, eg. a filename.","type":["String[]"]}],"related":[],"returns":"Process","classanchor":null},"pdes":{"edges":[{"node":{"name":"launch_","internal":{"content":"void setup() {\n  size(200, 200);\n}\n\nvoid draw() {\n  // draw() must be present for mousePressed() to work\n}\n\nvoid mousePressed() {\n  println(\"Opening Process_4\");\n  launch(\"/Applications/Process_4.app\");\n}\n"},"extension":"pde"}}]}} ''',
    'leftshift':
        r''' {"json":{"name":"<< (left shift)","description":"Shifts bits to the left. The number to the left of the operator is shifted the number of places specified by the number to the right. Each shift to the left doubles the number, therefore each left shift multiplies the original number by 2. Use the left shift for fast multiplication or to pack a group of numbers together into one larger number. Left shifting only works with integers or numbers which automatically convert to an integer such at byte and char.\n","syntax":["value << n"],"category":"math","subcategory":"Bitwise Operators","parameters":[{"name":"value","description":"int: the value to shift","type":[]},{"name":"n","description":"int: the number of places to shift left","type":[]}],"related":["rightshift"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"leftshift_0","internal":{"content":"int m = 1 << 3;   // In binary: 1 to 1000\nprintln(m);  // Prints \"8\"\nint n = 1 << 8;   // In binary: 1 to 100000000\nprintln(n);  // Prints \"256\"\nint o = 2 << 3;   // In binary: 10 to 10000\nprintln(o);  // Prints \"16\"\nint p = 13 << 1;  // In binary: 1101 to 11010\nprintln(p);  // Prints \"26\"\n"},"extension":"pde"}},{"node":{"name":"leftshift_1","internal":{"content":"// Packs four 8 bit numbers into one 32 bit number\nint a = 255;  // Binary: 00000000000000000000000011111111\nint r = 204;  // Binary: 00000000000000000000000011001100\nint g = 204;  // Binary: 00000000000000000000000011001100\nint b = 51;   // Binary: 00000000000000000000000000110011\na = a << 24;  // Binary: 11111111000000000000000000000000\nr = r << 16;  // Binary: 00000000110011000000000000000000\ng = g << 8;   // Binary: 00000000000000001100110000000000\n\n// Equivalent to \"color argb = color(r, g, b, a)\" but faster\ncolor argb = a | r | g | b;\nfill(argb);\nrect(30, 20, 55, 55);\n"},"extension":"pde"}}]}} ''',
    'lerpColor_':
        r''' {"json":{"name":"lerpColor()","description":"Calculates a <b>color</b> between two colors at a specific increment. The\n <b>amt</b> parameter is the amount to interpolate between the two values\n where 0.0 is equal to the first point, 0.1 is very near the first point,\n 0.5 is halfway in between, etc. <br />\n An amount below 0 will be treated as 0. Likewise, amounts above 1 will be\n capped at 1. This is different from the behavior of <b>lerp()</b>, but necessary\n because otherwise numbers outside the range will produce strange and\n unexpected colors.","syntax":["lerpColor(c1, c2, amt)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"c1","description":"interpolate from this color","type":["int"]},{"name":"c2","description":"interpolate to this color","type":["int"]},{"name":"amt","description":"between 0.0 and 1.0","type":["float"]}],"related":["PImage_blendColor_","color_","lerp_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"lerpColor_","internal":{"content":"\nsize(400,400);\nbackground(51);\nstroke(255);\ncolor from = color(204, 102, 0);\ncolor to = color(0, 102, 153);\ncolor interA = lerpColor(from, to, .33);\ncolor interB = lerpColor(from, to, .66);\nfill(from);\nrect(40, 80, 80, 240);\nfill(interA);\nrect(120, 80, 80, 240);\nfill(interB);\nrect(200, 80, 80, 240);\nfill(to);\nrect(280, 80, 80, 240);"},"extension":"pde"}}]}} ''',
    'lerp_':
        r''' {"json":{"name":"lerp()","description":"Calculates a number between two numbers at a specific increment. The\n <b>amt</b> parameter is the amount to interpolate between the two values\n where 0.0 equal to the first point, 0.1 is very near the first point,\n 0.5 is half-way in between, etc. The lerp function is convenient for\n creating motion along a straight path and for drawing dotted lines.","syntax":["lerp(start, stop, amt)"],"category":"math","subcategory":"calculation","parameters":[{"name":"start","description":"first value","type":["float"]},{"name":"stop","description":"second value","type":["float"]},{"name":"amt","description":"float between 0.0 and 1.0","type":["float"]}],"related":["curvePoint_","bezierPoint_","lerp_","lerpColor_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"lerp_0","internal":{"content":"size(400, 400);\nfloat a = 80;\nfloat b = 320;\nfloat c = lerp(a, b, .8);\nfloat d = lerp(a, b, .20);\nfloat e = lerp(a, b, .32);\nbeginShape(POINTS);\nvertex(a, 200);\nvertex(b, 200);\nvertex(c, 200);\nvertex(d, 200);\nvertex(e, 200);\nendShape();"},"extension":"pde"}},{"node":{"name":"lerp_1","internal":{"content":"size(400, 400);\nint x1 = 60;\nint y1 = 40;\nint x2 = 320;\nint y2 = 360;\nline(x1, y1, x2, y2);\nfor (int i = 0; i <= 40; i++) {\n  float x = lerp(x1, x2, i/40.0) + 40;\n  float y = lerp(y1, y2, i/40.0);\n  point(x, y);\n}"},"extension":"pde"}}]}} ''',
    'lessthan':
        r''' {"json":{"name":"< (less than)","description":"Tests if the value on the left is smaller than the value on the right. \n","syntax":["value1 < value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, or byte","type":[]},{"name":"value2","description":"int, float, char, or byte","type":[]}],"related":["greaterthan","greaterthanorequalto","lessthanorequalto","equality","inequality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"lessthan_0","internal":{"content":"int a = 22;\nint b = 23;\nif (a < b) {\n  println(\"variable a is less then variable b \");\n}\n"},"extension":"pde"}}]}} ''',
    'lessthanorequalto':
        r''' {"json":{"name":"<= (less than or equal to)","description":"Tests if the value on the left is less than the value on the right or if the values are equivalent. \n","syntax":["value1 <= value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, or byte","type":[]},{"name":"value2","description":"int, float, char, or byte","type":[]}],"related":["greaterthan","greaterthanorequalto","lessthan","equality","inequality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"lessthanorequalto_0","internal":{"content":"int a = 22;\nint b = 23;\nif (a <= b) {\n  println(\"variable a is less or equal to variable b \");\n}\n"},"extension":"pde"}}]}} ''',
    'lightFalloff_':
        r''' {"json":{"name":"lightFalloff()","description":"Sets the falloff rates for point lights, spot lights, and ambient lights.\n Like <b>fill()</b>, it affects only the elements which are created after it\n in the code. The default value is <b>lightFalloff(1.0, 0.0, 0.0)</b>, and the\n parameters are used to calculate the falloff with the following\n equation:<br />\n <br />\n d = distance from light position to vertex position<br />\n falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)<br />\n <br />\n Thinking about an ambient light with a falloff can be tricky. If you want a\n region of your scene to be ambient lit with one color and another region to\n be ambient lit with another color, you could use an ambient light with\n location and falloff. You can think of it as a point light that doesn't care\n which direction a surface is facing.","syntax":["lightFalloff(constant, linear, quadratic)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"constant","description":"constant value or determining falloff","type":["float"]},{"name":"linear","description":"linear value for determining falloff","type":["float"]},{"name":"quadratic","description":"quadratic value for determining falloff","type":["float"]}],"related":["lights_","ambientLight_","pointLight_","spotLight_","lightSpecular_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"lightFalloff_","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nbackground(0);\nlightFalloff(1.0, 0.001, 0.0);\npointLight(150, 250, 150, 200, 200, 200);\nbeginShape();\nvertex(0, 0, 0);\nvertex(400, 0, -400);\nvertex(400, 400, -400);\nvertex(0, 400, 0);\nendShape(CLOSE);"},"extension":"pde"}}]}} ''',
    'lightSpecular_':
        r''' {"json":{"name":"lightSpecular()","description":"Sets the specular color for lights. Like <b>fill()</b>, it affects only\n the elements which are created after it in the code. Specular refers to\n light which bounces off a surface in a preferred direction (rather than\n bouncing in all directions like a diffuse light) and is used for\n creating highlights. The specular quality of a light interacts with the\n specular material qualities set through the <b>specular()</b> and\n <b>shininess()</b> functions.","syntax":["lightSpecular(v1, v2, v3)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["specular_","lights_","ambientLight_","pointLight_","spotLight_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"lightSpecular_","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\ndirectionalLight(102, 102, 102, 0, 0, -1);\nlightSpecular(204, 204, 204);\ndirectionalLight(102, 102, 102, 0, 1, -1);\nlightSpecular(102, 102, 102);\ntranslate(80, 200, 0);\nspecular(51, 51, 51);\nsphere(120);\ntranslate(240, 0, 0);\nspecular(102, 102, 102);\nsphere(120);"},"extension":"pde"}}]}} ''',
    'lights_':
        r''' {"json":{"name":"lights()","description":"Sets the default ambient light, directional light, falloff, and specular\n values. The defaults are <b>ambientLight(128, 128, 128)</b> and\n <b>directionalLight(128, 128, 128, 0, 0, -1)</b>, <b>lightFalloff(1, 0, 0)</b>, and\n <b>lightSpecular(0, 0, 0)</b>. Lights need to be included in the <b>draw()</b> to\n remain persistent in a looping program. Placing them in the <b>setup()</b> of a\n looping program will cause them to only have an effect the first time\n through the loop.","syntax":["lights()"],"category":"lights_camera","subcategory":"lights","parameters":[],"related":["ambientLight_","directionalLight_","pointLight_","spotLight_","noLights_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"lights_0","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\n// Sets the default ambient \n// and directional light\nlights();\ntranslate(80, 200, 0);\nsphere(120);\ntranslate(240, 0, 0);\nsphere(120);"},"extension":"pde"}},{"node":{"name":"lights_1","internal":{"content":"void setup() {\n  size(400, 400, P3D);\n  background(0);\n  noStroke();\n}\n\nvoid draw() {\n  // Include lights() at the beginning\n  // of draw() to keep them persistent \n  lights();\n  translate(80, 200, 0);\n  sphere(120);\n  translate(240, 0, 0);\n  sphere(120);\n}"},"extension":"pde"}}]}} ''',
    'line_':
        r''' {"json":{"name":"line()","description":"Draws a line (a direct path between two points) to the screen. The\n version of <b>line()</b> with four parameters draws the line in 2D.  To\n color a line, use the <b>stroke()</b> function. A line cannot be filled,\n therefore the <b>fill()</b> function will not affect the color of a\n line. 2D lines are drawn with a width of one pixel by default, but this\n can be changed with the <b>strokeWeight()</b> function. The version with\n six parameters allows the line to be placed anywhere within XYZ space.\n Drawing this shape in 3D with the <b>z</b> parameter requires the P3D\n parameter in combination with <b>size()</b> as shown in the above example.","syntax":["line(x1, y1, x2, y2)","line(x1, y1, z1, x2, y2, z2)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x1","description":"x-coordinate of the first point","type":["float"]},{"name":"y1","description":"y-coordinate of the first point","type":["float"]},{"name":"x2","description":"x-coordinate of the second point","type":["float"]},{"name":"y2","description":"y-coordinate of the second point","type":["float"]},{"name":"z1","description":"z-coordinate of the first point","type":["float"]},{"name":"z2","description":"z-coordinate of the second point","type":["float"]}],"related":["strokeWeight_","strokeJoin_","strokeCap_","beginShape_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"line_0","internal":{"content":"size(400, 400);\nline(120, 80, 340, 300);"},"extension":"pde"}},{"node":{"name":"line_1","internal":{"content":"size(400, 400);\nline(120, 80, 340, 80);\nstroke(126);\nline(340, 80, 340, 300);\nstroke(255);\nline(340, 300, 120, 300);"},"extension":"pde"}},{"node":{"name":"line_2","internal":{"content":"// Drawing lines in 3D requires P3D\n// as a parameter to size()\nsize(400, 400, P3D);\nline(120, 80, 0, 340, 80, 60);\nstroke(126);\nline(340, 80, 60, 340, 300, 0);\nstroke(255);\nline(340, 300, 0, 120, 300, -200);"},"extension":"pde"}}]}} ''',
    'loadBytes_':
        r''' {"json":{"name":"loadBytes()","description":"Reads the contents of a file and places it in a byte array. If the name of\n the file is used as the parameter, as in the above example, the file must\n be loaded in the sketch's \"data\" directory/folder. <br />\n <br />\n Alternatively, the file maybe be loaded from anywhere on the local computer\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows), or the filename parameter can be a URL for a\n file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will be\n returned and an error message will be printed to the console. The error\n message does not halt the program, however the <b>null</b> value may cause a\n NullPointerException if your code does not check whether the value returned\n is <b>null</b>.<br />","syntax":["loadBytes(filename)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of a file in the data folder or a URL.","type":["String"]}],"related":["loadStrings_","saveStrings_","saveBytes_"],"returns":"byte[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadBytes_0","internal":{"content":"// Open a file and read its binary data \nbyte b[] = loadBytes(\"something.dat\"); \n \n// Print each value, from 0 to 255 \nfor (int i = 0; i < b.length; i++) { \n  // Every tenth number, start a new line \n  if ((i % 10) == 0) { \n    println(); \n  } \n  // bytes are from -128 to 127, this converts to 0 to 255 \n  int a = b[i] & 0xff; \n  print(a + \" \"); \n} \n// Print a blank line at the end \nprintln(); \n"},"extension":"pde"}}]}} ''',
    'loadFont_':
        r''' {"json":{"name":"loadFont()","description":"Loads a .vlw formatted font into a <b>PFont</b> object. Create a .vlw font\n by selecting \"Create Font...\" from the Tools menu. This tool creates a\n texture for each alphanumeric character and then adds them as a .vlw file\n to the current sketch's data folder. Because the letters are defined as\n textures (and not vector data) the size at which the fonts are created must\n be considered in relation to the size at which they are drawn. For example,\n load a 32pt font if the sketch displays the font at 32 pixels or smaller.\n Conversely, if a 12pt font is loaded and displayed at 48pts, the letters\n will be distorted because the program will be stretching a small graphic to\n a large size.<br />\n <br />\n Like <b>loadImage()</b> and other functions that load data, the\n <b>loadFont()</b> function should not be used inside <b>draw()</b>, because\n it will slow down the sketch considerably, as the font will be re-loaded\n from the disk (or network) on each frame. It's recommended to load files\n inside <b>setup()</b><br />\n <br />\n To load correctly, fonts must be located in the \"data\" folder of the\n current sketch. Alternatively, the file maybe be loaded from anywhere on\n the local computer using an absolute path (something that starts with / on\n Unix and Linux, or a drive letter on Windows), or the filename parameter\n can be a URL for a file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will be\n returned and an error message will be printed to the console. The error\n message does not halt the program, however the <b>null</b> value may cause a\n NullPointerException if your code does not check whether the value returned\n is <b>null</b>.<br />\n <br />\n Use <b>createFont()</b> (instead of <b>loadFont()</b>) to enable vector\n data to be used with the default renderer setting. This can be helpful when\n many font sizes are needed, or when using any renderer based on the default\n renderer, such as the PDF library.","syntax":["loadFont(filename)"],"category":"typography","subcategory":"loading & displaying","parameters":[{"name":"filename","description":"name of the font to load","type":["String"]}],"related":["PFont","textFont_","createFont_"],"returns":"PFont","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadFont_","internal":{"content":"size(400, 400);\nPFont font;\n// The font must be located in the sketch's \n// \"data\" directory to load successfully\nfont = loadFont(\"LetterGothicStd.otf\", 128);\ntextFont(font, 128);\ntext(\"word\", 50, 200);"},"extension":"pde"}}]}} ''',
    'loadImage_':
        r''' {"json":{"name":"loadImage()","description":"Loads an image into a variable of type <b>PImage</b>. Four types of images\n ( <b>.gif</b>, <b>.jpg</b>, <b>.tga</b>, <b>.png</b>) images may be loaded.\n To load correctly, images must be located in the data directory of the\n current sketch.<br />\n <br />\n In most cases, load all images in <b>setup()</b> to preload them at the\n start of the program. Loading images inside <b>draw()</b> will reduce the\n speed of a program. Images cannot be loaded outside <b>setup()</b> unless\n they're inside a function that's called after <b>setup()</b> has already\n run.<br />\n <br />\n Alternatively, the file maybe be loaded from anywhere on the local computer\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows), or the filename parameter can be a URL for a\n file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will be\n returned and an error message will be printed to the console. The error\n message does not halt the program, however the <b>null</b> value may cause a\n NullPointerException if your code does not check whether the value returned\n is <b>null</b>.<br />\n <br />\n The <b>extension</b> parameter is used to determine the image type in cases\n where the image filename does not end with a proper extension. Specify the\n extension as the second parameter to <b>loadImage()</b>, as shown in the\n third example on this page. Note that CMYK images are not supported.<br />\n <br />\n Depending on the type of error, a <b>PImage</b> object may still be\n returned, but the width and height of the image will be set to -1. This\n happens if bad image data is returned or cannot be decoded properly.\n Sometimes this happens with image URLs that produce a 403 error or that\n redirect to a password prompt, because <b>loadImage()</b> will attempt to\n interpret the HTML as image data.","syntax":["loadImage(filename)","loadImage(filename, extension)"],"category":"image","subcategory":"loading & displaying","parameters":[{"name":"filename","description":"name of file to load, can be .gif, .jpg, .tga, or a handful of\n          other image types depending on your platform","type":["String"]},{"name":"extension","description":"type of image to load, for example \"png\", \"gif\", \"jpg\"","type":["String"]}],"related":["PImage","image_","imageMode_","background_"],"returns":"PImage","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadImage_0","internal":{"content":"size(400,400);\nPImage img;\nimg = loadImage(\"shells.jpg\");\nimage(img, 0, 0);"},"extension":"pde"}},{"node":{"name":"loadImage_1","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(400,400);\n  img = loadImage(\"shells.jpg\");\n}\n\nvoid draw() {\n  image(img, 0, 0);\n}"},"extension":"pde"}},{"node":{"name":"loadImage_2","internal":{"content":"PImage webImg;\n\nvoid setup() {\n  size(400,400);\n  String url = \"https://processing.org/img/processing-web.png\";\n  // Load image from a web server\n  webImg = loadImage(url, \"png\");\n}\n\nvoid draw() {\n  background(0);\n  image(webImg, 0, 0);\n}"},"extension":"pde"}}]}} ''',
    'loadJSONArray_':
        r''' {"json":{"name":"loadJSONArray()","description":"Loads an array of JSON objects from the data folder or a URL, and returns a\n <b>JSONArray</b>. Per standard JSON syntax, the array must be enclosed in a\n pair of hard brackets <b>[]</b>, and each object within the array must be\n separated by a comma.<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["loadJSONArray(filename)","loadJSONArray(file)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of a file in the data folder or a URL","type":["String"]}],"related":["JSONArray","loadJSONObject_","saveJSONObject_","saveJSONArray_"],"returns":"JSONArray","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadJSONArray_0","internal":{"content":"// The following short JSON file called \"data.json\" is parsed \n// in the code below. It must be in the project's \"data\" folder.\n\n/*\n[\n  {\n    \"id\": 0,\n    \"species\": \"Capra hircus\",\n    \"name\": \"Goat\"\n  },\n  {\n    \"id\": 1,\n    \"species\": \"Panthera pardus\",\n    \"name\": \"Leopard\"\n  },\n  {\n    \"id\": 2,\n    \"species\": \"Equus zebra\",\n    \"name\": \"Zebra\"\n  }\n]\n*/\n\nJSONArray values;\n\nvoid setup() {\n\n  values = loadJSONArray(\"data.json\");\n\n  for (int i = 0; i < values.size(); i++) {\n    \n    JSONObject animal = values.getJSONObject(i); \n\n    int id = animal.getInt(\"id\");\n    String species = animal.getString(\"species\");\n    String name = animal.getString(\"name\");\n\n    println(id + \", \" + species + \", \" + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n"},"extension":"pde"}}]}} ''',
    'loadJSONObject_':
        r''' {"json":{"name":"loadJSONObject()","description":"Loads a JSON from the data folder or a URL, and returns a\n <b>JSONObject</b>.<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["loadJSONObject(filename)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of a file in the data folder or a URL","type":["String"]}],"related":["JSONObject","JSONArray","loadJSONArray_","saveJSONObject_","saveJSONArray_"],"returns":"JSONObject","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadJSONObject_0","internal":{"content":"// The following short JSON file called \"data.json\" is parsed \n// in the code below. It must be in the project's \"data\" folder.\n\n/*  \n  {\n    \"id\": 0,\n    \"species\": \"Panthera leo\",\n   \"name\": \"Lion\"\n  }\n*/\n\nJSONObject json;\n\nvoid setup() {\n\n  json = loadJSONObject(\"data.json\");\n\n  int id = json.getInt(\"id\");\n  String species = json.getString(\"species\");\n  String name = json.getString(\"name\");\n\n  println(id + \", \" + species + \", \" + name);\n}\n\n// Sketch prints:\n// 0, Panthera leo, Lion\n"},"extension":"pde"}}]}} ''',
    'loadPixels_':
        r''' {"json":{"name":"loadPixels()","description":"Loads the pixel data of the current display window into the <b>pixels[]</b>\n array. This function must always be called before reading from or writing\n to <b>pixels[]</b>. Subsequent changes to the display window will not be\n reflected in <b>pixels</b> until <b>loadPixels()</b> is called again.\n\n ","syntax":["loadPixels()"],"category":"image","subcategory":"pixels","parameters":[],"related":["pixels","updatePixels_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadPixels_","internal":{"content":"size(400,400);\nint halfImage = width*height/2;\nPImage myImage = loadImage(\"mt-fuji.jpg\");\nimage(myImage, 0, 0);\n\nloadPixels();\nfor (int i = 0; i < halfImage; i++) {\n  pixels[i+halfImage] = pixels[i];\n}\nupdatePixels();"},"extension":"pde"}}]}} ''',
    'loadShader_':
        r''' {"json":{"name":"loadShader()","description":"Loads a shader into the <b>PShader</b> object. The shader file must be\n loaded in the sketch's \"data\" folder/directory to load correctly.\n Shaders are compatible with the P2D and P3D renderers, but not\n with the default renderer.<br />\n <br />\n Alternatively, the file maybe be loaded from anywhere on the local\n computer using an absolute path (something that starts with / on\n Unix and Linux, or a drive letter on Windows), or the filename\n parameter can be a URL for a file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will\n be returned and an error message will be printed to the console.\n The error message does not halt the program, however the null\n value may cause a NullPointerException if your code does not check\n whether the value returned is null.<br />","syntax":["loadShader(fragFilename)","loadShader(fragFilename, vertFilename)"],"category":"rendering","subcategory":"shaders","parameters":[{"name":"fragFilename","description":"name of fragment shader file","type":["String"]},{"name":"vertFilename","description":"name of vertex shader file","type":["String"]}],"related":[],"returns":"PShader","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadShader_0","internal":{"content":"PShader blur;\n\nvoid setup() {\n  size(640, 360, P2D);\n  // Shaders files must be in the \"data\" folder to load correctly\n  blur = loadShader(\"blur.glsl\"); \n  stroke(0, 102, 153);\n  rectMode(CENTER);\n}\n\nvoid draw() {\n  filter(blur);  \n  rect(mouseX-75, mouseY, 150, 150); \n  ellipse(mouseX+75, mouseY, 150, 150);\n}\n"},"extension":"pde"}}]}} ''',
    'loadShape_':
        r''' {"json":{"name":"loadShape()","description":"Loads geometry into a variable of type <b>PShape</b>. SVG and OBJ\n files may be loaded. To load correctly, the file must be located\n in the data directory of the current sketch. In most cases,\n <b>loadShape()</b> should be used inside <b>setup()</b> because\n loading shapes inside <b>draw()</b> will reduce the speed of a sketch.<br />\n <br />\n Alternatively, the file maybe be loaded from anywhere on the local\n computer using an absolute path (something that starts with / on\n Unix and Linux, or a drive letter on Windows), or the filename\n parameter can be a URL for a file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will\n be returned and an error message will be printed to the console.\n The error message does not halt the program, however the null value\n may cause a NullPointerException if your code does not check whether\n the value returned is null.<br />","syntax":["loadShape(filename)"],"category":"shape","subcategory":"","parameters":[{"name":"filename","description":"name of file to load, can be .svg or .obj","type":["String"]}],"related":["PShape","createShape_"],"returns":"PShape","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadShape_0","internal":{"content":"\t\nPShape s;\n\nvoid setup() {\n  size(400, 400);\n  // The file \"bot.svg\" must be in the data folder\n  // of the current sketch to load successfully\n  s = loadShape(\"bot.svg\");\n}\n\nvoid draw() {\n  shape(s, 40, 40, 320, 320);\n}"},"extension":"pde"}},{"node":{"name":"loadShape_1","internal":{"content":"PShape s;\n\nvoid setup() {\n  size(400, 400, P3D);\n  // The file \"bot.obj\" must be in the data folder\n  // of the current sketch to load successfully\n  s = loadShape(\"bot.obj\");\n}\n\nvoid draw() {\n  background(204);\n  translate(width/2, height/2);\n  shape(s, 0, 0);\n}"},"extension":"pde"}}]}} ''',
    'loadStrings_':
        r''' {"json":{"name":"loadStrings()","description":"Reads the contents of a file and creates a String array of its individual\n lines. If the name of the file is used as the parameter, as in the above\n example, the file must be loaded in the sketch's \"data\" directory/folder.\n <br />\n <br />\n Alternatively, the file maybe be loaded from anywhere on the local computer\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows), or the filename parameter can be a URL for a\n file found on a network.<br />\n <br />\n If the file is not available or an error occurs, <b>null</b> will be\n returned and an error message will be printed to the console. The error\n message does not halt the program, however the <b>null</b> value may cause a\n NullPointerException if your code does not check whether the value returned\n is <b>null</b>.<br />\n <br />\n Starting with Processing release 0134, all files loaded and saved by the\n Processing API use UTF-8 encoding. In previous releases, the default\n encoding for your platform was used, which causes problems when files are\n moved to other platforms.\n\n\n ","syntax":["loadStrings(filename)","loadStrings(reader)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of the file or url to load","type":["String"]}],"related":["loadBytes_","saveStrings_","saveBytes_"],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadStrings_0","internal":{"content":"String[] lines = loadStrings(\"list.txt\");\nprintln(\"there are \" + lines.length + \" lines\");\nfor (int i = 0 ; i < lines.length; i++) {\n  println(lines[i]);\n}\n"},"extension":"pde"}},{"node":{"name":"loadStrings_1","internal":{"content":"String[] lines = loadStrings(\"http://processing.org/about/index.html\");\nprintln(\"there are \" + lines.length + \" lines\");\nfor (int i = 0 ; i < lines.length; i++) {\n  println(lines[i]);\n}\n"},"extension":"pde"}}]}} ''',
    'loadTable_':
        r''' {"json":{"name":"loadTable()","description":"Reads the contents of a file or URL and creates an Table object with its\n values. If a file is specified, it must be located in the sketch's \"data\"\n folder. The filename parameter can also be a URL to a file found online.\n The filename must either end in an extension or an extension must be\n specified in the <b>options</b> parameter. For example, to use\n tab-separated data, include \"tsv\" in the options parameter if the filename\n or URL does not end in <b>.tsv</b>. Note: If an extension is in both\n places, the extension in the <b>options</b> is used.<br />\n <br />\n If the file contains a header row, include \"header\" in the <b>options</b>\n parameter. If the file does not have a header row, then simply omit the\n \"header\" option.<br />\n <br />\n Some CSV files contain newline (CR or LF) characters inside cells. This is\n rare, but adding the \"newlines\" option will handle them properly. (This is\n not enabled by default because the parsing code is much slower.)<br />\n <br />\n When specifying multiple options, separate them with commas, as in:\n <b>loadTable(\"data.csv\", \"header, tsv\")</b><br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["loadTable(filename)","loadTable(filename, options)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of a file in the data folder or a URL.","type":["String"]},{"name":"options","description":"may contain \"header\", \"tsv\", \"csv\", or \"bin\" separated by commas","type":["String"]}],"related":["Table","saveTable_","loadBytes_","loadStrings_","loadXML_"],"returns":"Table","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadTable_0","internal":{"content":"// The following short CSV file called \"mammals.csv\" is parsed\n// in the code below. It must be in the project's \"data\" folder.\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nTable table;\n\nvoid setup() {\n\n  table = loadTable(\"mammals.csv\", \"header\");\n\n  println(table.getRowCount() + \" total rows in table\");\n\n  for (TableRow row : table.rows()) {\n\n    int id = row.getInt(\"id\");\n    String species = row.getString(\"species\");\n    String name = row.getString(\"name\");\n\n    println(name + \" (\" + species + \") has an ID of \" + id);\n  }\n\n}\n\n// Sketch prints:\n// 3 total rows in table\n// Goat (Capra hircus) has an ID of 0\n// Leopard (Panthera pardus) has an ID of 1\n// Zebra (Equus zebra) has an ID of 2\n"},"extension":"pde"}}]}} ''',
    'loadXML_':
        r''' {"json":{"name":"loadXML()","description":"Reads the contents of a file or URL and creates an XML\n object with its values. If a file is specified, it must\n be located in the sketch's \"data\" folder. The filename\n parameter can also be a URL to a file found online.<br /><br />\n All files loaded and saved by the Processing API use\n UTF-8 encoding. If you need to load an XML file that's\n not in UTF-8 format, see the <a href=\"http://processing.github.io/processing-javadocs/core/processing/data/XML.html\">\n developer's reference</a> for the XML object.","syntax":["loadXML(filename)"],"category":"input","subcategory":"files","parameters":[{"name":"filename","description":"name of a file in the data folder or a URL.","type":["String"]}],"related":["XML","parseXML_","saveXML_","loadBytes_","loadStrings_","loadTable_"],"returns":"XML","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadXML_0","internal":{"content":"// The following short XML file called \"mammals.xml\" is parsed \n// in the code below. It must be in the project's \"data\" folder.\n//\n// <?xml version=\"1.0\"?>\n// <mammals>\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>\n\nXML xml;\n\nvoid setup() {\n  xml = loadXML(\"mammals.xml\");\n  XML[] children = xml.getChildren(\"animal\");\n\n  for (int i = 0; i < children.length; i++) {\n    int id = children[i].getInt(\"id\");\n    String coloring = children[i].getString(\"species\");\n    String name = children[i].getContent();\n    println(id + \", \" + coloring + \", \" + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n"},"extension":"pde"}}]}} ''',
    'log_':
        r''' {"json":{"name":"log()","description":"Calculates the natural logarithm (the base-<i>e</i> logarithm) of a\n number. This function expects the values greater than 0.0.","syntax":["log(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number greater than 0.0","type":["float"]}],"related":[],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"log_0","internal":{"content":"void setup() {\n  int i = 12;\n  println(log(i));\n  println(log10(i));\n}\n\n// Calculates the base-10 logarithm of a number\nfloat log10 (int x) {\n  return (log(x) / log(10));\n}\n"},"extension":"pde"}}]}} ''',
    'logicalAND':
        r''' {"json":{"name":"&& (logical AND)","description":"Compares two expressions and returns <b>true</b> only if both evaluate to <b>true</b>. Returns <b>false</b> if one or both evaluate to <b>false</b>. The following list shows all possible combinations:<br /><br /><tt>true &amp;&amp; false   // Evaluates false because the second is false <br />false &amp;&amp; true   // Evaluates false because the first is false <br />true &amp;&amp; true    // Evaluates true because both are true <br />false &amp;&amp; false  // Evaluates false because both are false</tt>\n","syntax":["expression1 && expression2"],"category":"Control","subcategory":"Logical Operators","parameters":[{"name":"expression1","description":"any valid expression","type":[]},{"name":"expression2","description":"any valid expression","type":[]}],"related":["logicalOR","logicalNOT","if"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"logicalAND","internal":{"content":"size(400, 400);\nfor (int i = 20; i <= 380; i += 20) {\n  if ((i > 140) && (i < 240)) {\n    stroke(0);  // Set color to black\n  } else {\n    stroke(255);  // Set color to white\n  }\n  line(120, i, 320, i);\n}"},"extension":"pde"}}]}} ''',
    'logicalNOT':
        r''' {"json":{"name":"! (logical NOT)","description":"Inverts the Boolean value of an expression. Returns <b>true</b> if the expression is <b>false</b> and returns <b>false</b> if the expression is <b>true</b>. If the expression <b>(a>b)</b> evaluates to true, then <b>!(a>b)</b> evaluates to false. \n","syntax":["!expression"],"category":"Control","subcategory":"Logical Operators","parameters":[{"name":"expression","description":"any valid expression","type":[]}],"related":["logicalAND","logicalOR","if"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"logicalNOT","internal":{"content":"size(400, 400);\nboolean a = false;\nif (!a) {\n  rect(120, 80, 200, 200);\n}\nif (a) {\n  line(80, 40, 360, 320);\n  line(80, 320, 360, 40);\n}"},"extension":"pde"}},{"node":{"name":"logicalNOT_2","internal":{"content":"size(400, 400);\nboolean a = true;\nif (!a) {\n  rect(120, 80, 200, 200);\n}\nif (a) {\n  line(80, 40, 360, 320);\n  line(80, 320, 360, 40);\n}"},"extension":"pde"}}]}} ''',
    'logicalOR':
        r''' {"json":{"name":"|| (logical OR)","description":"Compares two expressions and returns <b>true</b> if one or both evaluate to <b>true</b>. Returns <b>false</b> only if both expressions are <b>false</b>. The following list shows all possible combinations:<br /><br /><tt>true || false   // Evaluates true because the first is true <br />false || true   // Evaluates true because the second is true <br />true || true    // Evaluates true because both are true <br />false || false  // Evaluates false because both are false</tt> \n","syntax":["expression1 || expression2"],"category":"Control","subcategory":"Logical Operators","parameters":[{"name":"expression1","description":"any valid expression","type":[]},{"name":"expression2","description":"any valid expression","type":[]}],"related":["logicalAND","logicalNOT","if"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"logicalOR","internal":{"content":"size(400, 400);\n\nfor (int i = 20 ; i <= 380; i += 20) {\n  if ((i < 140) || (i > 240)) {\n    line(120, i, 320, i);\n  }\n}"},"extension":"pde"}}]}} ''',
    'long':
        r''' {"json":{"name":"long","description":"Datatype for large integers. While integers can be as large as 2,147,483,647 and as low as -2,147,483,648 (stored as 32 bits), a <b>long</b> integer has a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807 (stored as 64 bits). Use this datatype when you need a number to have a greater magnitude than can be stored within an <b>int</b>. When assigning literal values that are larger than this magnitude, it is necessary to also append the qualifier \"L\" to the number, as shown in the example above. Processing functions don't use this datatype, so while they work in the language, you'll usually have to convert to a <b>int</b> using the <b>(int)</b> syntax before passing into a function.\n","syntax":["long var","long var = value"],"category":"Data","subcategory":"Primitive","parameters":[{"name":"var","description":"variable name referencing the value","type":[]},{"name":"value","description":"any integer value","type":[]}],"related":["int"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"long_0","internal":{"content":"long a;           // Declare variable 'a' of type long and assign a large value:\n//a = 2147483648; // Error: The literal of type int is out of range\na = 2147483648L;  // Instead, add an \"L\" to the number to mark it as a long\n\nlong b = -256;    // Declare variable 'b' and assign it the value -256\nlong c = a + b;   // Declare variable 'c' and assign it the sum of 'a' and 'b'\nint i = (int)c;   // Converts the value of 'c' from a long to an int\n"},"extension":"pde"}}]}} ''',
    'loop_':
        r''' {"json":{"name":"loop()","description":"By default, Processing loops through <b>draw()</b> continuously, executing\n the code within it. However, the <b>draw()</b> loop may be stopped by calling\n <b>noLoop()</b>. In that case, the <b>draw()</b> loop can be resumed with\n <b>loop()</b>.","syntax":["loop()"],"category":"structure","subcategory":"","parameters":[],"related":["noLoop_","redraw_","draw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"loop_0","internal":{"content":"void setup() {\n  size(200, 200);\n  noLoop();  // draw() will not loop\n}\n\nfloat x = 0;\n\nvoid draw() {\n  background(204);\n  x = x + .1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height); \n}\n\nvoid mousePressed() {\n  loop();  // Holding down the mouse activates looping\n}\n\nvoid mouseReleased() {\n  noLoop();  // Releasing the mouse stops looping draw()\n}\n"},"extension":"pde"}}]}} ''',
    'mag_':
        r''' {"json":{"name":"mag()","description":"Calculates the magnitude (or length) of a vector. A vector is a\n direction in space commonly used in computer graphics and linear\n algebra. Because it has no \"start\" position, the magnitude of a vector\n can be thought of as the distance from coordinate (0,0) to its (x,y)\n value. Therefore, <b>mag()</b> is a shortcut for writing <b>dist(0, 0, x, y)</b>.","syntax":["mag(a, b)","mag(a, b, c)"],"category":"math","subcategory":"calculation","parameters":[{"name":"a","description":"first value","type":["float"]},{"name":"b","description":"second value","type":["float"]},{"name":"c","description":"third value","type":["float"]}],"related":["dist_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"mag_","internal":{"content":"size(400, 400);\n\nfloat x1 = 80;\nfloat x2 = 320;\nfloat y1 = 120;\nfloat y2 = 280;\n\nline(0, 0, x1, y1);\nprintln(mag(x1, y1));  // Prints \"144.22205\"\nline(0, 0, x2, y1);\nprintln(mag(x2, y1));  // Prints \"341.76016\"\nline(0, 0, x1, y2);\nprintln(mag(x1, y2));  // Prints \"291.2044\"\nline(0, 0, x2, y2);\nprintln(mag(x2, y2));  // Prints \"425.20584\""},"extension":"pde"}}]}} ''',
    'map_':
        r''' {"json":{"name":"map()","description":"Re-maps a number from one range to another.<br />\n <br />\n In the first example above, the number 25 is converted from a value in the\n range of 0 to 100 into a value that ranges from the left edge of the window\n (0) to the right edge (width).<br />\n <br />\n As shown in the second example, numbers outside of the range are not\n clamped to the minimum and maximum parameters values, because out-of-range\n values are often intentional and useful.","syntax":["map(value, start1, stop1, start2, stop2)"],"category":"math","subcategory":"calculation","parameters":[{"name":"value","description":"the incoming value to be converted","type":["float"]},{"name":"start1","description":"lower bound of the value's current range","type":["float"]},{"name":"stop1","description":"upper bound of the value's current range","type":["float"]},{"name":"start2","description":"lower bound of the value's target range","type":["float"]},{"name":"stop2","description":"upper bound of the value's target range","type":["float"]}],"related":["norm_","lerp_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"map_0","internal":{"content":"size(200, 200);\nfloat value = 25;\nfloat m = map(value, 0, 100, 0, width);\nellipse(m, 200, 10, 10);\n"},"extension":"pde"}},{"node":{"name":"map_1","internal":{"content":"float value = 110;\nfloat m = map(value, 0, 100, -20, -10);\nprintln(m);  // Prints \"-9.0\"\n"},"extension":"pde"}},{"node":{"name":"map_2","internal":{"content":"void setup() {\n  size(200, 200);\n  noStroke();\n}\n\nvoid draw() {\n  background(204);\n  float  x1 = map(mouseX, 0, width, 50, 150);\n  ellipse(x1, 75, 50, 50);  \n  float x2 = map(mouseX, 0, width, 0, 200);\n  ellipse(x2, 125, 50, 50);  \n}\n"},"extension":"pde"}}]}} ''',
    'mask_':
        r''' {"json":{"name":"mask()","description":"Masks part of an image from displaying by loading another image and\n using it as an alpha channel. This mask image should only contain\n grayscale data, but only the blue color channel is used. The mask image\n needs to be the same size as the image to which it is applied.<br />\n <br />\n In addition to using a mask image, an integer array containing the alpha\n channel data can be specified directly. This method is useful for\n creating dynamically generated alpha masks. This array must be of the\n same length as the target image's pixels array and should contain only\n grayscale data of values between 0-255.\n\n\n ","syntax":["mask(img)"],"category":"image","subcategory":"pixels","parameters":[{"name":"img","description":"image to use as the mask","type":["PImage"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[]}} ''',
    'matchAll_':
        r''' {"json":{"name":"matchAll()","description":"This function is used to apply a regular expression to a piece of text, and\n return a list of matching groups (elements found inside parentheses) as a\n two-dimensional String array. If there are no matches, a <b>null</b> value will be\n returned. If no groups are specified in the regular expression, but the\n sequence matches, a two dimensional array is still returned, but the second\n dimension is only of length one.<br />\n <br />\n To use the function, first check to see if the result is <b>null</b>. If the\n result is null, then the sequence did not match at all. If the sequence did\n match, a 2D array is returned.<br />\n <br />\n If there are groups (specified by sets of parentheses) in the regular\n expression, then the contents of each will be returned in the array.\n Assuming a loop with counter variable i, element [i][0] of a regular\n expression match returns the entire matching string, and the match groups\n start at element [i][1] (the first group is [i][1], the second [i][2], and\n so on).<br />\n <br />\n The syntax can be found in the reference for Java's <a href=\n \"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\">Pattern</a>\n class. For regular expression syntax, read the\n <a href=\"https://docs.oracle.com/javase/tutorial/essential/regex/\">Java\n Tutorial</a> on the topic.","syntax":["matchAll(str, regexp)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"str","description":"the String to be searched","type":["String"]},{"name":"regexp","description":"the regexp to be used for matching","type":["String"]}],"related":["match_","split_","splitTokens_","join_","trim_"],"returns":"String[][]","classanchor":null},"pdes":{"edges":[{"node":{"name":"matchAll_0","internal":{"content":"String s = \"Inside tags, you will find <tag>multiple< /tag>\";\n       s += \"<tag>pieces</tag> of <tag>content</tag>.\";\n\nString[][] m = matchAll(s, \"<tag>(.*?)</tag>\");\nfor (int i = 0; i < m.length; i++) {\n  println(\"Found '\" + m[i][1] + \"' inside a tag.\");\n}\n\n// Prints to the console:\n// \"Found 'multiple' inside a tag.\"\n// \"Found 'pieces' inside a tag.\"\n// \"Found 'content' inside a tag.\"\n"},"extension":"pde"}}]}} ''',
    'match_':
        r''' {"json":{"name":"match()","description":"This function is used to apply a regular expression to a piece of text, and\n return matching groups (elements found inside parentheses) as a String\n array. If there are no matches, a <b>null</b> value will be returned. If no groups\n are specified in the regular expression, but the sequence matches, an array\n of length 1 (with the matched text as the first element of the array) will\n be returned.<br />\n <br />\n To use the function, first check to see if the result is <b>null</b>. If the\n result is null, then the sequence did not match at all. If the sequence did\n match, an array is returned.<br />\n <br />\n If there are groups (specified by sets of parentheses) in the regular\n expression, then the contents of each will be returned in the array.\n Element [0] of a regular expression match returns the entire matching\n string, and the match groups start at element [1] (the first group is [1],\n the second [2], and so on).<br />\n <br />\n The syntax can be found in the reference for Java's <a href=\n \"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html\">Pattern</a>\n class. For regular expression syntax, read the\n <a href=\"https://docs.oracle.com/javase/tutorial/essential/regex/\">Java\n Tutorial</a> on the topic.","syntax":["match(str, regexp)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"str","description":"the String to be searched","type":["String"]},{"name":"regexp","description":"the regexp to be used for matching","type":["String"]}],"related":["matchAll_","split_","splitTokens_","join_","trim_"],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"match_0","internal":{"content":"String s = \"Inside a tag, you will find <tag>content</tag>.\";\nString[] m = match(s, \"<tag>(.*?)</tag>\");\nprintln(\"Found '\" + m[1] + \"' inside the tag.\");\n// Prints to the console:\n// \"Found 'content' inside the tag.\"\n"},"extension":"pde"}},{"node":{"name":"match_1","internal":{"content":"String s1 = \"Have you ever heard of a thing called fluoridation. \"; \n       s1 += \"Fluoridation of water?\";\nString s2 = \"Uh? Yes, I-I have heard of that, Jack, yes. Yes.\";\n\nString[] m1 = match(s1, \"fluoridation\");\nif (m1 != null) {  // If not null, then a match was found\n  // This will print to the console, since a match was found.\n  println(\"Found a match in '\" + s1 + \"'\");  \n} else {\n  println(\"No match found in '\" + s1 + \"'\");\n}\n\nString[] m2 = match(s2, \"fluoridation\");\nif (m2 != null) {\n  println(\"Found a match in '\" + s2 + \"'\");\n} else {\n  // This will print to the console, since no match was found.\n  println(\"No match found in '\" + s2 + \"'\");  \n}\n"},"extension":"pde"}}]}} ''',
    'max_':
        r''' {"json":{"name":"max()","description":"Determines the largest value in a sequence of numbers, and then returns that\n value. <b>max()</b> accepts either two or three <b>float</b> or <b>int</b>\n values as parameters, or an array of any length.","syntax":["max(a, b)","max(a, b, c)","max(list)"],"category":"math","subcategory":"calculation","parameters":[{"name":"a","description":"first number to compare","type":["int","float"]},{"name":"b","description":"second number to compare","type":["int","float"]},{"name":"c","description":"third number to compare","type":["int","float"]},{"name":"list","description":"array of numbers to compare","type":["int[]","float[]"]}],"related":["min_"],"returns":"int or float","classanchor":null},"pdes":{"edges":[{"node":{"name":"max_0","internal":{"content":"int a = max(5, 9);            // Sets 'a' to 9\nint b = max(-4, -12);         // Sets 'b' to -4\nfloat c = max(12.3, 230.24);  // Sets 'c' to 230.24\n"},"extension":"pde"}},{"node":{"name":"max_1","internal":{"content":"int[] values = { 9, -4, 362, 21 };  // Create an array of ints\nint d = max(values);                // Sets 'd' to 362\n"},"extension":"pde"}}]}} ''',
    'millis_':
        r''' {"json":{"name":"millis()","description":"Returns the number of milliseconds (thousandths of a second) since\n starting an applet. This information is often used for timing animation\n sequences.\n\n\n ","syntax":["millis()"],"category":"input","subcategory":"time date","parameters":[],"related":["second_","minute_","hour_","day_","month_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"millis_0","internal":{"content":"void draw() {\n  int m = millis();\n  noStroke();\n  fill(m % 255);\n  rect(25, 25, 50, 50);\n}\n"},"extension":"pde"}}]}} ''',
    'min_':
        r''' {"json":{"name":"min()","description":"Determines the smallest value in a sequence of numbers, and then returns that\n value. <b>min()</b> accepts either two or three <b>float</b> or <b>int</b>\n values as parameters, or an array of any length.","syntax":["min(a, b)","min(a, b, c)","min(list)"],"category":"math","subcategory":"calculation","parameters":[{"name":"a","description":"first number","type":["float","int"]},{"name":"b","description":"second number","type":["float","int"]},{"name":"c","description":"third number","type":["float","int"]},{"name":"list","description":"array of numbers to compare","type":["int[]","float[]"]}],"related":["max_"],"returns":"float or int","classanchor":null},"pdes":{"edges":[{"node":{"name":"min_0","internal":{"content":"int d = min(5, 9);            // Sets 'd' to 5\nint e = min(-4, -12);         // Sets 'e' to -12\nfloat f = min(12.3, 230.24);  // Sets 'f' to 12.3\n"},"extension":"pde"}},{"node":{"name":"min_1","internal":{"content":"int[] values = { 5, 1, 2, -3 };  // Create an array of ints\nint h = min(values);             // Sets 'h' to -3\n"},"extension":"pde"}}]}} ''',
    'minus':
        r''' {"json":{"name":"- (minus)","description":"Subtracts one value from another and may also be used to negate a value. As a subtraction operator, the value of the second parameter is subtracted from the first. For example, 5 - 3 yields the number 2. As a negation operator, it is equivalent to multiplying a number by -1. For example, -5 is the same as 5 * -1.  \n","syntax":["-value1","value1 - value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"int or float","type":[]}],"related":["decrement","subtractassign","addition"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"minus_0","internal":{"content":"int c = 50 - 5;  // Sets 'c' to 45\nint d = c - 5;   // Sets 'd' to 40\nint e = d - 60;  // Sets 'e' to -20\n"},"extension":"pde"}},{"node":{"name":"minus_1","internal":{"content":"int a = 5;         // Sets 'a' to 5 \nint b = -a;        // Sets 'b' to -5 \nint c = -(5 + 3);  // Sets 'c' to -8 \n"},"extension":"pde"}}]}} ''',
    'minute_':
        r''' {"json":{"name":"minute()","description":"Processing communicates with the clock on your computer. The\n <b>minute()</b> function returns the current minute as a value from 0 - 59.","syntax":["minute()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","second_","hour_","day_","month_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"minute_0","internal":{"content":"void draw() {\n  background(204);\n  int s = second();  // Values from 0 - 59\n  int m = minute();  // Values from 0 - 59\n  int h = hour();    // Values from 0 - 23\n  line(s, 0, s, 33);\n  line(m, 33, m, 66);\n  line(h, 66, h, 100);\n}\n"},"extension":"pde"}}]}} ''',
    'modelX_':
        r''' {"json":{"name":"modelX()","description":"Returns the three-dimensional X, Y, Z position in model space. This\n returns the X value for a given coordinate based on the current set of\n transformations (scale, rotate, translate, etc.) The X value can be used\n to place an object in space relative to the location of the original\n point once the transformations are no longer in use.\n <br/> <br/>\n In the example, the <b>modelX()</b>, <b>modelY()</b>, and\n <b>modelZ()</b> functions record the location of a box in space after\n being placed using a series of translate and rotate commands. After\n <b>popMatrix()</b> is called, those transformations no longer apply, but the\n <b>(x, y, z)</b> coordinate returned by the model functions is used to place\n another box in the same location.","syntax":["modelX(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["modelY_","modelZ_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"modelX_0","internal":{"content":"void setup() {\n  size(500, 500, P3D);\n  noFill();\n}\n\nvoid draw() {\n  background(0);\n \n  pushMatrix();\n  // start at the middle of the screen\n  translate(width/2, height/2, -200);     \n  // some random rotation to make things interesting\n  rotateY(1.0); //yrot);\n  rotateZ(2.0); //zrot);\n  // rotate in X a little more each frame\n  rotateX(frameCount / 100.0);\n  // offset from center\n  translate(0, 150, 0);\n \n  // draw a white box outline at (0, 0, 0)\n  stroke(255);\n  box(50);\n \n  // the box was drawn at (0, 0, 0), store that location\n  float x = modelX(0, 0, 0);\n  float y = modelY(0, 0, 0);\n  float z = modelZ(0, 0, 0);\n  // clear out all the transformations\n  popMatrix();\n\n  // draw another box at the same (x, y, z) coordinate as the other\n  pushMatrix();\n  translate(x, y, z);\n  stroke(255, 0, 0);\n  box(50);\n  popMatrix();\n} \n"},"extension":"pde"}}]}} ''',
    'modelY_':
        r''' {"json":{"name":"modelY()","description":"Returns the three-dimensional X, Y, Z position in model space. This\n returns the Y value for a given coordinate based on the current set of\n transformations (scale, rotate, translate, etc.) The Y value can be used\n to place an object in space relative to the location of the original\n point once the transformations are no longer in use.<br />\n <br />\n In the example, the <b>modelX()</b>, <b>modelY()</b>, and\n <b>modelZ()</b> functions record the location of a box in space after\n being placed using a series of translate and rotate commands. After\n <b>popMatrix()</b> is called, those transformations no longer apply, but the\n <b>(x, y, z)</b> coordinate returned by the model functions is used to place\n another box in the same location.","syntax":["modelY(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["modelX_","modelZ_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"modelY_0","internal":{"content":"void setup() {\n  size(500, 500, P3D);\n  noFill();\n}\n\nvoid draw() {\n  background(0);\n \n  pushMatrix();\n  // start at the middle of the screen\n  translate(width/2, height/2, -200);     \n  // some random rotation to make things interesting\n  rotateY(1.0); //yrot);\n  rotateZ(2.0); //zrot);\n  // rotate in X a little more each frame\n  rotateX(frameCount / 100.0);\n  // offset from center\n  translate(0, 150, 0);\n \n  // draw a white box outline at (0, 0, 0)\n  stroke(255);\n  box(50);\n \n  // the box was drawn at (0, 0, 0), store that location\n  float x = modelX(0, 0, 0);\n  float y = modelY(0, 0, 0);\n  float z = modelZ(0, 0, 0);\n  // clear out all the transformations\n  popMatrix();\n\n  // draw another box at the same (x, y, z) coordinate as the other\n  pushMatrix();\n  translate(x, y, z);\n  stroke(255, 0, 0);\n  box(50);\n  popMatrix();\n} \n"},"extension":"pde"}}]}} ''',
    'modelZ_':
        r''' {"json":{"name":"modelZ()","description":"Returns the three-dimensional X, Y, Z position in model space. This\n returns the Z value for a given coordinate based on the current set of\n transformations (scale, rotate, translate, etc.) The Z value can be used\n to place an object in space relative to the location of the original\n point once the transformations are no longer in use.<br />\n <br />\n In the example, the <b>modelX()</b>, <b>modelY()</b>, and\n <b>modelZ()</b> functions record the location of a box in space after\n being placed using a series of translate and rotate commands. After\n <b>popMatrix()</b> is called, those transformations no longer apply, but the\n <b>(x, y, z)</b> coordinate returned by the model functions is used to place\n another box in the same location.","syntax":["modelZ(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["modelX_","modelY_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"modelZ_0","internal":{"content":"void setup() {\n  size(500, 500, P3D);\n  noFill();\n}\n\nvoid draw() {\n  background(0);\n \n  pushMatrix();\n  // start at the middle of the screen\n  translate(width/2, height/2, -200);     \n  // some random rotation to make things interesting\n  rotateY(1.0); //yrot);\n  rotateZ(2.0); //zrot);\n  // rotate in X a little more each frame\n  rotateX(frameCount / 100.0);\n  // offset from center\n  translate(0, 150, 0);\n \n  // draw a white box outline at (0, 0, 0)\n  stroke(255);\n  box(50);\n \n  // the box was drawn at (0, 0, 0), store that location\n  float x = modelX(0, 0, 0);\n  float y = modelY(0, 0, 0);\n  float z = modelZ(0, 0, 0);\n  // clear out all the transformations\n  popMatrix();\n\n  // draw another box at the same (x, y, z) coordinate as the other\n  pushMatrix();\n  translate(x, y, z);\n  stroke(255, 0, 0);\n  box(50);\n  popMatrix();\n} \n"},"extension":"pde"}}]}} ''',
    'modulo':
        r''' {"json":{"name":"% (modulo)","description":"Calculates the remainder when one number is divided by another. For example, when 52.1 is divided by 10, the divisor (10) goes into the dividend (52.1) five times (5 * 10 == 50), and there is a remainder of 2.1 (52.1 - 50 == 2.1). Thus, <strong>52.1 % 10</strong> produces <strong>2.1</strong>.<br/>\n<br/>\nNote that when the divisor is greater than the dividend, the remainder constitutes the value of the entire dividend. That is, a number cannot be divided by any number larger than itself. For example, when 9 is divided by 10, the result is zero with a remainder of 9. Thus, <strong>9 % 10</strong> produces <strong>9</strong>.<br/>\n<br/>\nModulo is extremely useful for ensuring values stay within a boundary, such as when keeping a shape on the screen. (See the second example above.)\n","syntax":["value1 % value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"int or float","type":[]}],"related":["divide"],"returns":"int or float","classanchor":null},"pdes":{"edges":[{"node":{"name":"modulo_0","internal":{"content":"int a = 5 % 4;            // Sets 'a' to 1\nint b = 125 % 100;        // Sets 'b' to 25\nfloat c = 285.5 % 140.0;  // Sets 'c' to 5.5 \nfloat d = 30.0 % 33.0;    // Sets 'd' to 30.0\n"},"extension":"pde"}},{"node":{"name":"modulo_1","internal":{"content":"int a = 0;\nvoid draw() {\n  background(200);\n  a = (a + 1) % width;  // 'a' increases between 0 and width \n  line(a, 0, a, height);\n}\n"},"extension":"pde"}}]}} ''',
    'month_':
        r''' {"json":{"name":"month()","description":"Processing communicates with the clock on your computer. The\n <b>month()</b> function returns the current month as a value from 1 - 12.","syntax":["month()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","second_","minute_","hour_","day_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"month_0","internal":{"content":"int d = day();    // Values from 1 - 31\nint m = month();  // Values from 1 - 12\nint y = year();   // 2003, 2004, 2005, etc.\n\nString s = String.valueOf(d);\ntext(s, 10, 28);\ns = String.valueOf(m);\ntext(s, 10, 56); \ns = String.valueOf(y);\ntext(s, 10, 84);\n"},"extension":"pde"}}]}} ''',
    'mouseButton':
        r''' {"json":{"name":"mouseButton","classanchor":null,"description":"When a mouse button is pressed, the value of the system variable\n <b>mouseButton</b> is set to either <b>LEFT</b>, <b>RIGHT</b>, or\n <b>CENTER</b>, depending on which button is pressed. (If no button is\n pressed, <b>mouseButton</b> may be reset to <b>0</b>. For that reason,\n it's best to use <b>mousePressed</b> first to test if any button is being\n pressed, and only then test the value of <b>mouseButton</b>, as shown in\n the examples above.)\n\n\n ","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"mouseButton_0","internal":{"content":"// Click within the image and press\n// the left and right mouse buttons to \n// change the value of the rectangle\nvoid draw() {\n  if (mousePressed && (mouseButton == LEFT)) {\n    fill(0);\n  } else if (mousePressed && (mouseButton == RIGHT)) {\n    fill(255);\n  } else {\n    fill(126);\n  }\n  rect(25, 25, 50, 50);\n}\n"},"extension":"pde"}},{"node":{"name":"mouseButton_1","internal":{"content":"// Click within the image and press\n// the left and right mouse buttons to \n// change the value of the rectangle\nvoid draw() {\n  rect(25, 25, 50, 50);\n}\n\nvoid mousePressed() {\n  if (mouseButton == LEFT) {\n    fill(0);\n  } else if (mouseButton == RIGHT) {\n    fill(255);\n  } else {\n    fill(126);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mouseClicked_':
        r''' {"json":{"name":"mouseClicked()","description":"The <b>mouseClicked()</b> function is called <i>after</i> a mouse button\n has been pressed and then released. <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.\n\n ","syntax":["mouseClicked()","mouseClicked(event)"],"category":"input","subcategory":"mouse","parameters":[],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mouseClicked_0","internal":{"content":"// Click within the image to change \n// the value of the rectangle after\n// after the mouse has been clicked\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid mouseClicked() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mouseDragged_':
        r''' {"json":{"name":"mouseDragged()","description":"The <b>mouseDragged()</b> function is called once every time the mouse\n moves while a mouse button is pressed. (If a button <i>is not</i> being\n pressed, <b>mouseMoved()</b> is called instead.) <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.","syntax":["mouseDragged()","mouseDragged(event)"],"category":"input","subcategory":"mouse","parameters":[],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseButton","mouseWheel_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mouseDragged_0","internal":{"content":"// Drag (click and hold) your mouse across the \n// image to change the value of the rectangle\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid mouseDragged() \n{\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mouseMoved_':
        r''' {"json":{"name":"mouseMoved()","description":"The <b>mouseMoved()</b> function is called every time the mouse moves and a\n mouse button is not pressed. (If a button <i>is</i> being pressed,\n <b>mouseDragged()</b> is called instead.) <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.","syntax":["mouseMoved()","mouseMoved(event)"],"category":"input","subcategory":"mouse","parameters":[],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseDragged_","mouseButton","mouseWheel_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mouseMoved_0","internal":{"content":"// Move the mouse across the image\n// to change its value\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid mouseMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mousePressed':
        r''' {"json":{"name":"mousePressed","classanchor":null,"description":"The <b>mousePressed()</b> function is called once after every time a\n mouse button is pressed. The <b>mouseButton</b> variable (see the\n related reference entry) can be used to determine which button has\n been pressed.\n <br /><br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops\n listening for events.","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"mousePressed_var_0","internal":{"content":"// Click within the image to change \n// the value of the rectangle\nvoid draw() {\n  if (mousePressed == true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n"},"extension":"pde"}}]}} ''',
    'mousePressed_':
        r''' {"json":{"name":"mousePressed()","description":"The <b>mousePressed()</b> function is called once after every time a mouse\n button is pressed. The <b>mouseButton</b> variable (see the related\n reference entry) can be used to determine which button has been pressed.\n <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.\n\n ","syntax":["mousePressed()","mousePressed(event)"],"category":"input","subcategory":"mouse","parameters":[],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mousePressed_0","internal":{"content":"// Click within the image to change \n// the value of the rectangle\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid mousePressed() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mouseReleased_':
        r''' {"json":{"name":"mouseReleased()","description":"The <b>mouseReleased()</b> function is called every time a mouse button is\n released. <br />\n <br />\n Mouse and keyboard events only work when a program has <b>draw()</b>.\n Without <b>draw()</b>, the code is only run once and then stops listening\n for events.","syntax":["mouseReleased()","mouseReleased(event)"],"category":"input","subcategory":"mouse","parameters":[],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mouseReleased_0","internal":{"content":"// Click within the image to change \n// the value of the rectangle\n\nint value = 0;\n\nvoid draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nvoid mouseReleased() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'mouseWheel_':
        r''' {"json":{"name":"mouseWheel()","description":"The code within the <b>mouseWheel()</b> event function\n is run when the mouse wheel is moved. (Some mice don't\n have wheels and this function is only applicable with\n mice that have a wheel.) The <b>getCount()</b> function\n used within <b>mouseWheel()</b> returns positive values\n when the mouse wheel is rotated down (toward the user),\n and negative values for the other direction (up or away\n from the user). On OS X with \"natural\" scrolling enabled,\n the values are opposite.\n <br /><br />\n Mouse and keyboard events only work when a program has\n <b>draw()</b>. Without <b>draw()</b>, the code is only\n run once and then stops listening for events.","syntax":["mouseWheel(event)"],"category":"input","subcategory":"mouse","parameters":[{"name":"event","description":"the MouseEvent","type":["MouseEvent"]}],"related":["mouseX","mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"mouseWheel_0","internal":{"content":"void setup() {\n  size(100, 100);\n}\n\nvoid draw() {} \n\nvoid mouseWheel(MouseEvent event) {\n  float e = event.getCount();\n  println(e);\n}\n\n"},"extension":"pde"}}]}} ''',
    'mouseX':
        r''' {"json":{"name":"mouseX","classanchor":null,"description":"The system variable <b>mouseX</b> always contains the current horizontal\n coordinate of the mouse.\n <br /><br />\n Note that Processing can only track the mouse position when the pointer\n is over the current window. The default value of <b>mouseX</b> is <b>0</b>,\n so <b>0</b> will be returned until the mouse moves in front of the sketch\n window. (This typically happens when a sketch is first run.)  Once the\n mouse moves away from the window, <b>mouseX</b> will continue to report\n its most recent position.","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseY","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"mouseX_0","internal":{"content":"void draw() {\n  background(204);\n  line(mouseX, 20, mouseX, 80);\n}\n"},"extension":"pde"}}]}} ''',
    'mouseY':
        r''' {"json":{"name":"mouseY","classanchor":null,"description":"The system variable <b>mouseY</b> always contains the current vertical\n coordinate of the mouse.\n <br /><br />\n Note that Processing can only track the mouse position when the pointer\n is over the current window. The default value of <b>mouseY</b> is <b>0</b>,\n so <b>0</b> will be returned until the mouse moves in front of the sketch\n window. (This typically happens when a sketch is first run.)  Once the\n mouse moves away from the window, <b>mouseY</b> will continue to report\n its most recent position.","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseX","pmouseX","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"mouseY_0","internal":{"content":"void draw() {\n  background(204);\n  line(20, mouseY, 80, mouseY);\n}\n"},"extension":"pde"}}]}} ''',
    'multilinecomment':
        r''' {"json":{"name":"/* */ (multiline comment)","description":"Explanatory notes embedded within the code. Comments are used to remind yourself and to inform others about the function of your program. Multiline comments are used for large text descriptions of code or to comment out chunks of code while debugging applications. Comments are ignored by the compiler.\n","syntax":["/*","  comment","*/"],"category":"structure","subcategory":"","parameters":[{"name":"comment","description":"any sequence of characters","type":[]}],"related":["comment","doccomment"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"multilinecomment_0","internal":{"content":"/*\n   Draws two lines which divides the window \n   into four quadrants. First draws a horizontal\n   line and then the vertical line \n*/ \nline(0, 50, 100, 50);\nline(50, 0, 50, 100);\n"},"extension":"pde"}}]}} ''',
    'multiply':
        r''' {"json":{"name":"* (multiply)","description":"Multiplies the values of the two parameters. Multiplication is equivalent to a sequence of addition. For example 5 * 4 is equivalent to 5 + 5 + 5 + 5.\n","syntax":["value1 * value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int, float, byte, or char","type":[]},{"name":"value2","description":"int, float, byte, or char","type":[]}],"related":["addition","divide"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"multiply_0","internal":{"content":"int e = 50 * 5;  // Sets 'e' to 250\nint f = e * 5;   // Sets 'f' to 1250\n"},"extension":"pde"}}]}} ''',
    'multiplyassign':
        r''' {"json":{"name":"*= (multiply assign)","description":"Combines multiplication with assignment. The expression <b>a *= b</b> is equivalent to <b>a = a * b</b>. \n","syntax":["value1 *= value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"any numerical value the same datatype as value1","type":[]}],"related":["multiply","assign"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"multiplyassign_0","internal":{"content":"int a = 5;\nint b = 2;\na *= b;  // Sets 'a' to 10\n"},"extension":"pde"}}]}} ''',
    'new':
        r''' {"json":{"name":"new","description":"Creates a \"new\" object. The keyword <b>new</b> is typically used similarly to the applications in the above example. In this example, a new object \"h1\" of the datatype \"HLine\" is created. On the following line, a new array of floats called \"speeds\" is created.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"new_0","internal":{"content":"HLine h1 = new HLine();\nfloat[] speeds = new float[3];\nfloat ypos;\n\nvoid setup() { \n  size(200, 200);\n  speeds[0] = 0.1; \n  speeds[1] = 2.0;\n  speeds[2] = 0.5;\n} \n \nvoid draw() {\n  ypos += speeds[int(random(3))]; \n  if (ypos > width) { \n    ypos = 0; \n  } \n  h1.update(ypos); \n} \n \nclass HLine { \n  void update(float y) { \n    line(0, y, width, y); \n  } \n} \n\n"},"extension":"pde"}}]}} ''',
    'nf_':
        r''' {"json":{"name":"nf()","description":"Utility function for formatting numbers into strings. There are two\n versions: one for formatting floats, and one for formatting ints. The\n values for the <b>digits</b> and <b>right</b> parameters should always be\n positive integers. The <b>left</b> parameter should be positive or 0. If it\n is zero, only the right side is formatted.<br />\n <br />\n As shown in the above example, <b>nf()</b> is used to add zeros to the left\n and/or right of a number. This is typically for aligning a list of numbers.\n To <em>remove</em> digits from a floating-point number, use the\n <b>int()</b>, <b>ceil()</b>, <b>floor()</b>, or <b>round()</b> functions.","syntax":["nf(num)","nf(nums)","nf(nums, digits)","nf(num, digits)","nf(nums, left, right)","nf(num, left, right)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"nums","description":"the numbers to format","type":["int[]","float[]"]},{"name":"digits","description":"number of digits to pad with zero","type":["int"]},{"name":"num","description":"the number to format","type":["int","float"]},{"name":"left","description":"number of digits to the left of the decimal point","type":["int"]},{"name":"right","description":"number of digits to the right of the decimal point","type":["int"]}],"related":["nfs_","nfp_","nfc_"],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"nf_0","internal":{"content":"int a=200, b=40, c=90;\nString sa = nf(a, 10);\nprintln(sa);  // Prints \"0000000200\"\nString sb = nf(b, 5);\nprintln(sb);  // Prints \"00040\"\nString sc = nf(c, 3);\nprintln(sc);  // Prints \"090\"\n\nfloat d = 200.94, e = 40.2, f = 9.012;\nString sd = nf(d, 10, 4);\nprintln(sd);  // Prints \"0000000200.9400\"\nString se = nf(e, 5, 3);\nprintln(se);  // Prints \"00040.200\"\nString sf = nf(f, 3, 5);\nprintln(sf);  // Prints \"009.01200\"\n\nString sf2 = nf(f, 0, 5);\nprintln(sf2);  // Prints \"9.01200\"\nString sf3 = nf(f, 0, 2);\nprintln(sf3);  // Prints \"9.01\"\n"},"extension":"pde"}}]}} ''',
    'nfc_':
        r''' {"json":{"name":"nfc()","description":"Utility function for formatting numbers into strings and placing\n appropriate commas to mark units of 1000. There are four versions: one for\n formatting ints, one for formatting an array of ints, one for formatting\n floats, and one for formatting an array of floats.<br />\n <br />\n The value for the <b>right</b> parameter should always be a positive\n integer.<br />\n <br />\n For a non-US locale, this will insert periods instead of commas,\n or whatever is appropriate for that region.","syntax":["nfc(nums)","nfc(num)","nfc(nums, right)","nfc(num, right)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"nums","description":"the numbers to format","type":["int[]","float[]"]},{"name":"num","description":"the number to format","type":["int","float"]},{"name":"right","description":"number of digits to the right of the decimal point","type":["int"]}],"related":["nf_","nfp_","nfs_"],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"nfc_0","internal":{"content":"int i = 500000; \nString si = nfc(i);\nprintln(si);  // Prints \"500,000\"\nfloat f = 42525.34343; \nString fi = nfc(f, 2);\nprintln(fi);  // Prints \"42,525.34\"\n\n"},"extension":"pde"}},{"node":{"name":"nfc_1","internal":{"content":"int[] i = { 500000, 4000 }; \nString[] si = nfc(i);\nprintln(si);  // Prints \"500,000 4,000\"\nfloat[] f = { 42525.34343, 3.14159 }; \nString[] fi = nfc(f, 2);\nprintln(fi);  // Prints \"42,525.34 3.14\"\n\n"},"extension":"pde"}}]}} ''',
    'nfp_':
        r''' {"json":{"name":"nfp()","description":"Utility function for formatting numbers into strings. Similar to <b>nf()</b>\n but puts a \"+\" in front of positive numbers and a \"-\" in front of negative\n numbers. There are two versions: one for formatting floats, and one for\n formatting ints. The values for the <b>digits</b>, <b>left</b>, and\n <b>right</b> parameters should always be positive integers.","syntax":["nfp(num, digits)","nfp(nums, digits)","nfp(nums, left, right)","nfp(num, left, right)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"num","description":"the number to format","type":["int","float"]},{"name":"digits","description":"number of digits to pad with zeroes","type":["int"]},{"name":"nums","description":"the numbers to format","type":["int[]","float[]"]},{"name":"left","description":"the number of digits to the left of the decimal point","type":["int"]},{"name":"right","description":"the number of digits to the right of the decimal point","type":["int"]}],"related":["nf_","nfs_","nfc_"],"returns":"String or String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"nfp_0","internal":{"content":"int a=200, b=-40, c=90; \nString sa = nfp(a, 10); \nprintln(sa);  // Prints \"+0000000200\" \nString sb = nfp(b, 5); \nprintln(sb);  // Prints \"-00040\" \nString sc = nfp(c, 3); \nprintln(sc);  // Prints \"+090\" \n \nfloat d = -200.94, e = 40.2, f = -9.012; \nString sd = nfp(d, 10, 4); \nprintln(sd);  // Prints \"-0000000200.9400\" \nString se = nfp(e, 5, 3); \nprintln(se);  // Prints \"+00040.200\" \nString sf = nfp(f, 3, 5); \nprintln(sf);  // Prints \"-009.01200\" \n"},"extension":"pde"}}]}} ''',
    'nfs_':
        r''' {"json":{"name":"nfs()","description":"Utility function for formatting numbers into strings. Similar to\n <b>nf()</b> but leaves a blank space in front of positive numbers so\n they align with negative numbers in spite of the minus symbol. There are\n two versions, one for formatting floats and one for formatting ints. The\n values for the <b>digits</b>, <b>left</b>, and <b>right</b> parameters\n should always be positive integers.","syntax":["nfs(num, digits)","nfs(nums, digits)","nfs(nums, left, right)","nfs(num, left, right)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"num","description":"the number to format","type":["int","float"]},{"name":"digits","description":"number of digits to pad with zeroes","type":["int"]},{"name":"nums","description":"the numbers to format","type":["int[]","float[]"]},{"name":"left","description":"the number of digits to the left of the decimal point","type":["int"]},{"name":"right","description":"the number of digits to the right of the decimal point","type":["int"]}],"related":["nf_","nfp_","nfc_"],"returns":"String or String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"nfs_0","internal":{"content":"int a=200, b=-40, c=90; \nString sa = nfs(a, 10); \nprintln(sa);  // Prints \" 0000000200\" \nString sb = nfs(b, 5); \nprintln(sb);  // Prints \"-00040\" \nString sc = nfs(c, 3); \nprintln(sc);  // Prints \" 090\" \n \nfloat d = -200.94, e = 40.2, f = -9.012; \nString sd = nfs(d, 10, 4); \nprintln(sd);  // Prints \"-0000000200.9400\" \nString se = nfs(e, 5, 3); \nprintln(se);  // Prints \" 00040.200\" \nString sf = nfs(f, 3, 5); \nprintln(sf);  // Prints \"-009.01200\" \n"},"extension":"pde"}}]}} ''',
    'noClip_':
        r''' {"json":{"name":"noClip()","description":"Disables the clipping previously started by the <b>clip()</b> function.","syntax":["noClip()"],"category":"rendering","subcategory":"","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noClip_0","internal":{"content":"void setup() {\n  size(200, 200);\n  imageMode(CENTER);\n}\n\nvoid draw() {\n  background(204);\n  if (mousePressed) {\n    clip(mouseX, mouseY, 100, 100);\n  } else {\n    noClip();\n  }\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'noCursor_':
        r''' {"json":{"name":"noCursor()","description":"Hides the cursor from view. Will not work when running the program in a\n web browser or when running in full screen (Present) mode.\n\n ","syntax":["noCursor()"],"category":"environment","subcategory":"","parameters":[],"related":["cursor_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noCursor_0","internal":{"content":"// Press the mouse to hide the cursor\nvoid draw() \n{\n  if (mousePressed == true) {\n    noCursor();\n  } else {\n    cursor(HAND);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'noFill_':
        r''' {"json":{"name":"noFill()","description":"Disables filling geometry. If both <b>noStroke()</b> and <b>noFill()</b>\n are called, nothing will be drawn to the screen.","syntax":["noFill()"],"category":"color","subcategory":"setting","parameters":[],"related":["fill_","stroke_","noStroke_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noFill_","internal":{"content":"size(400, 400);\nfloat x1 = 80;\nrect(60, 40, 220, 220);\nnoFill();\nrect(120, 80, 220, 220);"},"extension":"pde"}}]}} ''',
    'noLights_':
        r''' {"json":{"name":"noLights()","description":"Disable all lighting. Lighting is turned off by default and enabled with\n the <b>lights()</b> function. This function can be used to disable\n lighting so that 2D geometry (which does not require lighting) can be\n drawn after a set of lighted 3D geometry.","syntax":["noLights()"],"category":"lights_camera","subcategory":"lights","parameters":[],"related":["lights_"],"returns":"void","classanchor":null},"pdes":{"edges":[]}} ''',
    'noLoop_':
        r''' {"json":{"name":"noLoop()","description":"Stops Processing from continuously executing the code within\n <b>draw()</b>. If <b>loop()</b> is called, the code in <b>draw()</b>\n begin to run continuously again. If using <b>noLoop()</b> in\n <b>setup()</b>, it should be the last line inside the block.\n <br/> <br/>\n When <b>noLoop()</b> is used, it's not possible to manipulate or access\n the screen inside event handling functions such as <b>mousePressed()</b>\n or <b>keyPressed()</b>. Instead, use those functions to call\n <b>redraw()</b> or <b>loop()</b>, which will run <b>draw()</b>, which\n can update the screen properly. This means that when noLoop() has been\n called, no drawing can happen, and functions like saveFrame() or\n loadPixels() may not be used.\n <br/> <br/>\n Note that if the sketch is resized, <b>redraw()</b> will be called to\n update the sketch, even after <b>noLoop()</b> has been specified.\n Otherwise, the sketch would enter an odd state until <b>loop()</b> was called.","syntax":["noLoop()"],"category":"structure","subcategory":"","parameters":[],"related":["loop_","redraw_","draw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noLoop_0","internal":{"content":"void setup() {\n  size(200, 200);\n  noLoop();\n}\n\nvoid draw() {\n  line(10, 10, 190, 190);\n}\n"},"extension":"pde"}},{"node":{"name":"noLoop_1","internal":{"content":"void setup() {\n  size(200, 200);\n}\n\nfloat x = 0.0;\n\nvoid draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height); \n}\n\nvoid mousePressed() {\n  noLoop();\n}\n\nvoid mouseReleased() {\n  loop();\n}\n"},"extension":"pde"}},{"node":{"name":"noLoop_2","internal":{"content":"boolean someMode = false;\n\nvoid setup() {\n  noLoop();\n}\n\nvoid draw() {\n  if (someMode) {\n    // do something\n  }\n}\n\nvoid mousePressed() {\n  someMode = true;\n  redraw();  // or loop()\n}\n"},"extension":"pde"}}]}} ''',
    'noSmooth_':
        r''' {"json":{"name":"noSmooth()","description":"Draws all geometry and fonts with jagged (aliased)\n edges and images with hard edges between the pixels\n when enlarged rather than interpolating pixels. Note\n that <b>smooth()</b> is active by default, so it is necessary\n to call <b>noSmooth()<b> to disable smoothing of geometry,\n fonts, and images. Since the release of Processing 3.0,\n the <b>noSmooth()</b> function can only be run once for each\n sketch, either at the top of a sketch without a <b>setup()</b>,\n or after the <b>size()</b> function when used in a sketch with\n <b>setup()</b>. See the examples above for both scenarios.","syntax":["noSmooth()"],"category":"environment","subcategory":"","parameters":[],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noSmooth_","internal":{"content":"size(400, 400);\nnoSmooth();\nnoStroke();\nbackground(0);\nellipse(120, 192, 144, 144);\nellipse(280, 192, 144, 144);"},"extension":"pde"}}]}} ''',
    'noStroke_':
        r''' {"json":{"name":"noStroke()","description":"Disables drawing the stroke (outline). If both <b>noStroke()</b> and\n <b>noFill()</b> are called, nothing will be drawn to the screen.","syntax":["noStroke()"],"category":"color","subcategory":"setting","parameters":[],"related":["stroke_","fill_","noFill_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noStroke_","internal":{"content":"size(400, 400);\nnoStroke();\nrect(120, 80, 220, 220);"},"extension":"pde"}}]}} ''',
    'noTint_':
        r''' {"json":{"name":"noTint()","description":"Removes the current fill value for displaying images and reverts to\n displaying images with their original hues.","syntax":["noTint()"],"category":"image","subcategory":"loading & displaying","parameters":[],"related":["tint_","image_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noTint_","internal":{"content":"size(400,400);\nPImage img;\nimg = loadImage(\"yuya-onsen.jpg\");\ntint(0, 153, 204);  // Tint blue\nimage(img, 0, 0);\nnoTint();  // Disable tint\nimage(img, 200, 0);"},"extension":"pde"}}]}} ''',
    'noiseDetail_':
        r''' {"json":{"name":"noiseDetail()","description":"Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over several\n octaves. Lower octaves contribute more to the output signal and as such\n define the overall intensity of the noise, whereas higher octaves create\n finer-grained details in the noise sequence.<br />\n <br />\n By default, noise is computed over 4 octaves with each octave contributing\n exactly half than its predecessor, starting at 50% strength for the first\n octave. This falloff amount can be changed by adding an additional function\n parameter. For example, a falloff factor of 0.75 means each octave will now\n have 75% impact (25% less) of the previous lower octave. While any number\n between 0.0 and 1.0 is valid, note that values greater than 0.5 may result\n in <b>noise()</b> returning values greater than 1.0.<br />\n <br />\n By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.","syntax":["noiseDetail(lod)","noiseDetail(lod, falloff)"],"category":"math","subcategory":"random","parameters":[{"name":"lod","description":"number of octaves to be used by the noise","type":["int"]},{"name":"falloff","description":"falloff factor for each octave","type":["float"]}],"related":["noise_","noiseDetail_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noiseDetail_0","internal":{"content":"float noiseVal;\nfloat noiseScale=0.02;\n\nvoid draw() {\n  for (int y = 0; y < height; y++) {\n    for (int x = 0; x < width/2; x++) {\n      noiseDetail(3,0.5);\n      noiseVal = noise((mouseX+x) * noiseScale, (mouseY+y) * noiseScale);\n      stroke(noiseVal*255);\n      point(x,y);\n      noiseDetail(8,0.65);\n      noiseVal = noise((mouseX + x + width/2) * noiseScale, \n                       (mouseY + y) * noiseScale);\n      stroke(noiseVal * 255);\n      point(x + width/2, y);\n    }\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'noiseSeed_':
        r''' {"json":{"name":"noiseSeed()","description":"Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n produces different results each time the program is run. Set the\n <b>value</b> parameter to a constant to return the same pseudo-random\n numbers each time the software is run.","syntax":["noiseSeed(seed)"],"category":"math","subcategory":"random","parameters":[{"name":"seed","description":"seed value","type":["int"]}],"related":["noise_","noiseDetail_","random_","randomSeed_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"noiseSeed_0","internal":{"content":"float xoff = 0.0;\n\nvoid setup() {\n  noiseSeed(0);\n  stroke(0, 10);\n}\n\nvoid draw() {\n  xoff = xoff + .01;\n  float n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n"},"extension":"pde"}}]}} ''',
    'noise_':
        r''' {"json":{"name":"noise()","description":"Returns the Perlin noise value at specified coordinates. Perlin noise is a\n random sequence generator producing a more natural, harmonic succession of\n numbers than that of the standard <b>random()</b> function. It was\n developed by Ken Perlin in the 1980s and has been used in graphical\n applications to generate procedural textures, shapes, terrains, and other\n seemingly organic forms.<br />\n <br />\n In contrast to the <b>random()</b> function, Perlin noise is defined in an\n infinite n-dimensional space, in which each pair of coordinates corresponds\n to a fixed semi-random value (fixed only for the lifespan of the program).\n The resulting value will always be between 0.0 and 1.0. Processing can\n compute 1D, 2D and 3D noise, depending on the number of coordinates given.\n The noise value can be animated by moving through the noise space, as\n demonstrated in the first example above. The 2nd and 3rd dimensions can\n also be interpreted as time.<br />\n <br />\n The actual noise structure is similar to that of an audio signal, in\n respect to the function's use of frequencies. Similar to the concept of\n harmonics in physics, Perlin noise is computed over several octaves which\n are added together for the final result.<br />\n <br />\n Another way to adjust the character of the resulting sequence is the scale\n of the input coordinates. As the function works within an infinite space,\n the value of the coordinates doesn't matter as such; only the\n <em>distance</em> between successive coordinates is important (such as when\n using <b>noise()</b> within a loop). As a general rule, the smaller the\n difference between coordinates, the smoother the resulting noise sequence.\n Steps of 0.005-0.03 work best for most applications, but this will differ\n depending on use.<br />\n <br />\n There have been debates over the accuracy of the implementation of noise in\n Processing. For clarification, it's an implementation of \"classic Perlin\n noise\" from 1983, and not the newer \"simplex noise\" method from 2001.","syntax":["noise(x)","noise(x, y)","noise(x, y, z)"],"category":"math","subcategory":"random","parameters":[{"name":"x","description":"x-coordinate in noise space","type":["float"]},{"name":"y","description":"y-coordinate in noise space","type":["float"]},{"name":"z","description":"z-coordinate in noise space","type":["float"]}],"related":["noiseSeed_","noiseDetail_","random_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"noise_0","internal":{"content":"float xoff = 0.0;\n\nvoid draw() {\n  background(204);\n  xoff = xoff + .01;\n  float n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n"},"extension":"pde"}},{"node":{"name":"noise_1","internal":{"content":"float noiseScale = 0.02;\n\nvoid draw() {\n  background(0);\n  for (int x=0; x < width; x++) {\n    float noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n    stroke(noiseVal*255);\n    line(x, mouseY+noiseVal*80, x, height);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'norm_':
        r''' {"json":{"name":"norm()","description":"Normalizes a number from another range into a value between 0 and 1.\n Identical to <b>map(value, low, high, 0, 1)</b>.<br />\n <br />\n Numbers outside of the range are not clamped to 0 and 1, because\n out-of-range values are often intentional and useful. (See the second\n example above.)","syntax":["norm(value, start, stop)"],"category":"math","subcategory":"calculation","parameters":[{"name":"value","description":"the incoming value to be converted","type":["float"]},{"name":"start","description":"lower bound of the value's current range","type":["float"]},{"name":"stop","description":"upper bound of the value's current range","type":["float"]}],"related":["map_","lerp_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"norm_0","internal":{"content":"float value = 20;\nfloat n = norm(value, 0, 50);\nprintln(n);  // Prints \"0.4\"\n"},"extension":"pde"}},{"node":{"name":"norm_1","internal":{"content":"float value = -10;\nfloat n = norm(value, 0, 100);\nprintln(n);  // Prints \"-0.1\"\n"},"extension":"pde"}}]}} ''',
    'normal_':
        r''' {"json":{"name":"normal()","description":"Sets the current normal vector. Used for drawing three dimensional shapes and\n surfaces, <b>normal()</b> specifies a vector perpendicular to a shape's\n surface which, in turn, determines how lighting affects it. Processing\n attempts to automatically assign normals to shapes, but since that's\n imperfect, this is a better option when you want more control. This function\n is identical to <b>glNormal3f()</b> in OpenGL.","syntax":["normal(nx, ny, nz)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"nx","description":"x direction","type":["float"]},{"name":"ny","description":"y direction","type":["float"]},{"name":"nz","description":"z direction","type":["float"]}],"related":["beginShape_","endShape_","lights_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"normal_","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nbackground(0);\npointLight(150, 250, 150, 40, 120, 200);\nbeginShape();\nnormal(0, 0, 4);\nvertex(80, 80, -40);\nvertex(320, 80, 40);\nvertex(320, 320, -40);\nvertex(80, 320, 40);\nendShape(CLOSE);"},"extension":"pde"}}]}} ''',
    'null':
        r''' {"json":{"name":"null","description":"Special value used to signify the target is not a valid data element. In Processing, you may run across the keyword <b>null</b> when trying to access data which is not there.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"null_0","internal":{"content":"String content = \"It is a beautiful day.\";\nString[] results;  // Declare empty String array\n\nresults = match(content, \"orange\");\n// The match statement above will fail to find\n// the word \"orange\" in the String 'content', so\n// it will return a null value to 'results'.\n\nif (results == null) {\n  println(\"Value of 'results' is null.\");  // This line is printed\n} else {\n  println(\"Value of 'results' is not null!\");  // This line is not printed\n}\n"},"extension":"pde"}}]}} ''',
    'ortho_':
        r''' {"json":{"name":"ortho()","description":"Sets an orthographic projection and defines a parallel clipping volume. All\n objects with the same dimension appear the same size, regardless of whether\n they are near or far from the camera. The parameters to this function specify\n the clipping volume where left and right are the minimum and maximum x\n values, top and bottom are the minimum and maximum y values, and near and far\n are the minimum and maximum z values. If no parameters are given, the default\n is used: <b>ortho(-width/2, width/2, -height/2, height/2)</b>.","syntax":["ortho()","ortho(left, right, bottom, top)","ortho(left, right, bottom, top, near, far)"],"category":"lights_camera","subcategory":"camera","parameters":[{"name":"left","description":"left plane of the clipping volume","type":["float"]},{"name":"right","description":"right plane of the clipping volume","type":["float"]},{"name":"bottom","description":"bottom plane of the clipping volume","type":["float"]},{"name":"top","description":"top plane of the clipping volume","type":["float"]},{"name":"near","description":"maximum distance from the origin to the viewer","type":["float"]},{"name":"far","description":"maximum distance from the origin away from the viewer","type":["float"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"ortho_","internal":{"content":"size(400, 400, P3D);\npixelDensity(2);\nnoFill();\northo(-width/2, width/2, -height/2, height/2); // Same as ortho()\ntranslate(width/2, height/2, 0);\nrotateX(-PI/6);\nrotateY(PI/3);\nbox(180);"},"extension":"pde"}}]}} ''',
    'parentheses':
        r''' {"json":{"name":"() (parentheses)","description":"Grouping and containing expressions and parameters. Parentheses have multiple functions relating to functions and structures. They are used to contain a list of parameters passed to functions and control structures and they are used to group expressions to control the order of execution. Some functions have no parameters and in this case, the space between parentheses is blank.\n","syntax":["function()","function(p1, ..., pN)","structure(expression)"],"category":"structure","subcategory":"","parameters":[{"name":"function","description":"any function","type":[]},{"name":"p1, ..., pN","description":"list of parameters specific to the function","type":[]},{"name":"structure","description":"Control structure such as if, for, while","type":[]},{"name":"expressions","description":"any valid expression or group of expression","type":[]}],"related":["comma"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"parentheses_0","internal":{"content":"int a;\na = (4 + 3) * 2;       // Grouping expressions\nif (a > 10) {          // Containing expressions\n  line(a, 0, a, 100);  // Containing a list of parameters\n}\n"},"extension":"pde"}}]}} ''',
    'parseJSONArray_':
        r''' {"json":{"name":"parseJSONArray()","description":"Takes a <b>String</b>, parses its contents, and returns a <b>JSONArray</b>.\n If the <b>String</b> does not contain <b>JSONArray</b> data or cannot be\n parsed, a <b>null</b> value is returned.<br />\n <br />\n <b>parseJSONArray()</b> is most useful when pulling data dynamically, such as\n from third-party APIs. Normally, API results would be saved to a\n <b>String</b>, and then can be converted to a structured <b>JSONArray</b>\n using <b>parseJSONArray()</b>. Be sure to check if <b>null</b> is returned\n before performing operations on the new <b>JSONArray</b> in case the\n <b>String</b> content could not be parsed.<br />\n <br />\n If your data already exists as a <b>JSON</b> file in the data folder, it is\n simpler to use <b>loadJSONArray()</b>.","syntax":["parseJSONArray(input)"],"category":"input","subcategory":"files","parameters":[{"name":"input","description":"String to parse as a JSONArray","type":["String"]}],"related":["JSONObject","loadJSONObject_","saveJSONObject_"],"returns":"JSONArray","classanchor":null},"pdes":{"edges":[{"node":{"name":"parseJSONArray_0","internal":{"content":"  String data = \"[ \\\"Capra hircus\\\", \\\"Panthera pardus\\\", \\\"Equus zebra\\\" ]\";\n\nvoid setup() {\n  JSONArray json = parseJSONArray(data);\n  if (json == null) {\n    println(\"JSONArray could not be parsed\");\n  } else {\n    String species = json.getString(1);\n    println(species);\n  }\n}\n\n// Sketch prints:\n// Panthera pardus\n"},"extension":"pde"}}]}} ''',
    'parseJSONObject_':
        r''' {"json":{"name":"parseJSONObject()","description":"Takes a <b>String</b>, parses its contents, and returns a\n <b>JSONObject</b>. If the <b>String</b> does not contain <b>JSONObject</b>\n data or cannot be parsed, a <b>null</b> value is returned.<br />\n <br />\n <b>parseJSONObject()</b> is most useful when pulling data dynamically, such\n as from third-party APIs. Normally, API results would be saved to a\n <b>String</b>, and then can be converted to a structured <b>JSONObject</b>\n using <b>parseJSONObject()</b>. Be sure to check if <b>null</b> is returned\n before performing operations on the new <b>JSONObject</b> in case the\n <b>String</b> content could not be parsed.<br />\n <br />\n If your data already exists as a <b>JSON</b> file in the data folder, it is\n simpler to use <b>loadJSONObject()</b>.","syntax":["parseJSONObject(input)"],"category":"input","subcategory":"files","parameters":[{"name":"input","description":"String to parse as a JSONObject","type":["String"]}],"related":["loadJSONObject_","saveJSONObject_"],"returns":"JSONObject","classanchor":null},"pdes":{"edges":[{"node":{"name":"parseJSONObject_0","internal":{"content":"String data = \"{ \\\"id\\\": 0, \\\"species\\\": \\\"Panthera leo\\\", \\\"name\\\": \\\"Lion\\\"}\";\n\nvoid setup() {\n  JSONObject json = parseJSONObject(data);\n  if (json == null) {\n    println(\"JSONObject could not be parsed\");\n  } else {\n    String species = json.getString(\"species\");\n    println(species);\n  }\n}\n\n// Sketch prints:\n// Panthera leo\n"},"extension":"pde"}}]}} ''',
    'parseXML_':
        r''' {"json":{"name":"parseXML()","description":"Takes a String, parses its contents, and returns an XML object. If the\n String does not contain XML data or cannot be parsed, a <b>null</b> value is\n returned.<br />\n <br />\n <b>parseXML()</b> is most useful when pulling data dynamically, such as\n from third-party APIs. Normally, API results would be saved to a String,\n and then can be converted to a structured XML object using\n <b>parseXML()</b>. Be sure to check if <b>null</b> is returned before performing\n operations on the new XML object, in case the String content could not be\n parsed.<br />\n <br />\n If your data already exists as an XML file in the data folder, it is\n simpler to use <b>loadXML()</b>.","syntax":["parseXML(xmlString)","parseXML(xmlString, options)"],"category":"input","subcategory":"files","parameters":[{"name":"xmlString","description":"the content to be parsed as XML","type":["String"]}],"related":["XML","loadXML_","saveXML_"],"returns":"XML","classanchor":null},"pdes":{"edges":[{"node":{"name":"parseXML_0","internal":{"content":"String data = \"<mammals><animal>Goat</animal></mammals>\";\n\nvoid setup() {\n  XML xml = parseXML(data);\n  if (xml == null) {\n    println(\"XML could not be parsed.\");\n  } else {\n    XML firstChild = xml.getChild(\"animal\");\n    println(firstChild.getContent());\n  }\n}\n\n// Sketch prints:\n// Goat\n"},"extension":"pde"}}]}} ''',
    'perspective_':
        r''' {"json":{"name":"perspective()","description":"Sets a perspective projection applying foreshortening, making distant\n objects appear smaller than closer ones. The parameters define a viewing\n volume with the shape of truncated pyramid. Objects near to the front of\n the volume appear their actual size, while farther objects appear\n smaller. This projection simulates the perspective of the world more\n accurately than orthographic projection. The version of perspective\n without parameters sets the default perspective and the version with\n four parameters allows the programmer to set the area precisely. The\n default values are: <b>perspective(PI/3.0, width/height, cameraZ/10.0,\n cameraZ*10.0)</b> where cameraZ is <b>((height/2.0) / tan(PI*60.0/360.0))</b>","syntax":["perspective()","perspective(fovy, aspect, zNear, zFar)"],"category":"lights_camera","subcategory":"camera","parameters":[{"name":"fovy","description":"field-of-view angle (in radians) for vertical direction","type":["float"]},{"name":"aspect","description":"ratio of width to height","type":["float"]},{"name":"zNear","description":"z-position of nearest clipping plane","type":["float"]},{"name":"zFar","description":"z-position of farthest clipping plane","type":["float"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"perspective_","internal":{"content":"// Re-creates the default perspective\nsize(400, 400, P3D);\nnoFill();\nfloat fov = PI/3.0;\nfloat cameraZ = (height/2.0) / tan(fov/2.0);\nperspective(fov, float(width)/float(height), \n            cameraZ/10.0, cameraZ*10.0);\ntranslate(200, 200, 0);\nrotateX(-PI/6);\nrotateY(PI/3);\nbox(180);"},"extension":"pde"}}]}} ''',
    'pixelDensity_':
        r''' {"json":{"name":"pixelDensity()","description":"This function is new with Processing 3.0. It makes it\n possible for Processing to render using all of the\n pixels on high resolutions screens like Apple Retina\n displays and Windows High-DPI displays. This function\n can only be run once within a program and it must be\n used right after <b>size()</b> in a program without a <b>setup()</b>\n and used within <b>setup()</b> when a program has one. The\n <b>pixelDensity()</b> should only be used with hardcoded\n numbers (in almost all cases this number will be 2)\n or in combination with <b>displayDensity()</b> as in the\n third example above.\n\n When the pixel density is set to more than 1, it\n changes all of the pixel operations including the way\n <b>get()</b>, <b>set()</b>, <b>blend()</b>, <b>copy()</b>, and <b>updatePixels()</b>\n all work. See the reference for <b>pixelWidth</b> and\n pixelHeight for more information.\n\n To use variables as the arguments to <b>pixelDensity()</b>\n function, place the <b>pixelDensity()</b> function within\n the <b>settings()</b> function. There is more information\n about this on the <b>settings()</b> reference page.","syntax":["pixelDensity(density)"],"category":"environment","subcategory":"","parameters":[{"name":"density","description":"1 or 2","type":["int"]}],"related":["pixelWidth","pixelHeight"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"pixelDensity_0","internal":{"content":"size(100, 100);\npixelDensity(2);\nnoStroke();\nbackground(0);\nellipse(30, 48, 36, 36);\nellipse(70, 48, 36, 36);\n"},"extension":"pde"}},{"node":{"name":"pixelDensity_1","internal":{"content":"void setup() {\n  size(100, 100);\n  pixelDensity(2);\n  noStroke();\n}\n\nvoid draw() {\n  background(0);\n  ellipse(30, 48, 36, 36);\n  ellipse(70, 48, 36, 36);\n}\n"},"extension":"pde"}},{"node":{"name":"pixelDensity_2","internal":{"content":"void setup() {\n  size(100, 100);\n  // Pulling the display's density dynamically\n  pixelDensity(displayDensity());\n  noStroke();\n}\n\nvoid draw() {\n  background(0);\n  ellipse(30, 48, 36, 36);\n  ellipse(70, 48, 36, 36);\n}\n"},"extension":"pde"}}]}} ''',
    'pixelHeight':
        r''' {"json":{"name":"pixelHeight","classanchor":null,"description":"When <b>pixelDensity(2)</b> is used to make use of a high resolution\n display (called a Retina display on OS X or high-dpi on Windows and\n Linux), the width and height of the sketch do not change, but the\n number of pixels is doubled. As a result, all operations that use pixels\n (like <b>loadPixels()</b>, <b>get()</b>, <b>set()</b>, etc.) happen\n in this doubled space. As a convenience, the variables <b>pixelWidth</b>\n and <b>pixelHeight</b> hold the actual width and height of the sketch\n in pixels. This is useful for any sketch that uses the <b>pixels[]</b>\n array, for instance, because the number of elements in the array will\n be <b>pixelWidth*pixelHeight</b>, not <b>width*height</b>.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["pixelWidth","pixelDensity_","displayDensity_"],"returns":null},"pdes":{"edges":[{"node":{"name":"pixelHeight_0","internal":{"content":"void setup() {\n  size(600, 400);\n  pixelDensity(2);\n  println(width, height);\n  println(pixelWidth, pixelHeight);\n}\n"},"extension":"pde"}},{"node":{"name":"pixelHeight_1","internal":{"content":"void setup() {\n  size(600, 400);\n  pixelDensity(2);  // Double the pixel density\n  println(width, height);\n  println(pixelWidth, pixelHeight);\n}\n\nvoid draw() {\n  loadPixels();\n  // Fill all the pixels to blue with using\n  // pixelWidth and pixelHeight\n  for (int i = 0; i < pixelWidth * pixelHeight; i++) {\n    pixels[i] = color(0, 0, 255);\n  }\n  // Fill one quarter of the pixels to yellow\n  // because the pixel density is set to 2 in setup()\n  // and 'width' and 'height' don't reflect the pixel \n  // dimensions of the sketch\n  for (int i = 0; i < width * height; i++) {\n    pixels[i] = color(255, 255, 0);\n  }\n  updatePixels();\n  noLoop();\n}\n"},"extension":"pde"}}]}} ''',
    'pixelWidth':
        r''' {"json":{"name":"pixelWidth","classanchor":null,"description":"When <b>pixelDensity(2)</b> is used to make use of a high resolution\n display (called a Retina display on OS X or high-dpi on Windows and\n Linux), the width and height of the sketch do not change, but the\n number of pixels is doubled. As a result, all operations that use pixels\n (like <b>loadPixels()</b>, <b>get()</b>, <b>set()</b>, etc.) happen\n in this doubled space. As a convenience, the variables <b>pixelWidth</b>\n and <b>pixelHeight</b> hold the actual width and height of the sketch\n in pixels. This is useful for any sketch that uses the <b>pixels[]</b>\n array, for instance, because the number of elements in the array will\n be <b>pixelWidth*pixelHeight</b>, not <b>width*height</b>.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["pixelHeight","pixelDensity_","displayDensity_"],"returns":null},"pdes":{"edges":[{"node":{"name":"pixelWidth_0","internal":{"content":"void setup() {\n  size(600, 400);\n  pixelDensity(2);\n  println(width, height);\n  println(pixelWidth, pixelHeight);\n}\n"},"extension":"pde"}},{"node":{"name":"pixelWidth_1","internal":{"content":"void setup() {\n  size(600, 400);\n  pixelDensity(2);  // Double the pixel density\n  println(width, height);\n  println(pixelWidth, pixelHeight);\n}\n\nvoid draw() {\n  loadPixels();\n  // Fill all the pixels to blue with using\n  // pixelWidth and pixelHeight\n  for (int i = 0; i < pixelWidth * pixelHeight; i++) {\n    pixels[i] = color(0, 0, 255);\n  }\n  // Fill one quarter of the pixels to yellow\n  // because the pixel density is set to 2 in setup()\n  // and 'width' and 'height' don't reflect the pixel \n  // dimensions of the sketch\n  for (int i = 0; i < width * height; i++) {\n    pixels[i] = color(255, 255, 0);\n  }\n  updatePixels();\n  noLoop();\n}\n"},"extension":"pde"}}]}} ''',
    'pixels':
        r''' {"json":{"name":"pixels[]","classanchor":null,"description":"The <b>pixels[]</b> array contains the values for all the pixels in the\n display window. These values are of the color datatype. This array is\n defined by the size of the display window. For example, if the window is\n 100 x 100 pixels, there will be 10,000 values and if the window is\n 200 x 300 pixels, there will be 60,000 values. When the pixel density is\n set to higher than 1 with the <b>pixelDensity()</b> function, these values\n will change. See the reference for <b>pixelWidth</b> or <b>pixelHeight</b>\n for more information.\n <br /><br />\n Before accessing this array, the data must loaded with the <b>loadPixels()</b>\n function. Failure to do so may result in a NullPointerException. Subsequent\n changes to the display window will not be reflected in <b>pixels</b> until\n <b>loadPixels()</b> is called again. After <b>pixels</b> has been modified,\n the <b>updatePixels()</b> function must be run to update the content of the\n display window.","syntax":null,"category":"image","subcategory":"pixels","parameters":null,"related":["loadPixels_","updatePixels_","get_","set_","PImage","pixelDensity_","pixelWidth","pixelHeight"],"returns":null},"pdes":{"edges":[{"node":{"name":"pixels","internal":{"content":"size(400, 400);\ncolor pink = color(255, 102, 204);\nloadPixels();\nfor (int i = 0; i < (width*height/2)-width/2; i++) {\n  pixels[i] = pink;\n}\nupdatePixels();"},"extension":"pde"}}]}} ''',
    'pmouseX':
        r''' {"json":{"name":"pmouseX","classanchor":null,"description":"The system variable <b>pmouseX</b> always contains the horizontal\n position of the mouse in the frame previous to the current frame.<br />\n <br />\n You may find that <b>pmouseX</b> and <b>pmouseY</b> have different values\n when referenced inside of <b>draw()</b> and inside of mouse events like\n <b>mousePressed()</b> and <b>mouseMoved()</b>. Inside <b>draw()</b>,\n <b>pmouseX</b> and <b>pmouseY</b> update only once per frame (once per trip\n through the <b>draw()</b> loop). But inside mouse events, they update each\n time the event is called. If these values weren't updated immediately during\n events, then the mouse position would be read only once per frame, resulting\n in slight delays and choppy interaction. If the mouse variables were always\n updated multiple times per frame, then something like <b>line(pmouseX, pmouseY,\n mouseX, mouseY)</b> inside <b>draw()</b> would have lots of gaps, because\n <b>pmouseX</b> may have changed several times in between the calls to\n <b>line()</b>.<br /><br />\n If you want values relative to the previous frame, use <b>pmouseX</b> and\n <b>pmouseY</b> inside <b>draw()</b>. If you want continuous response, use\n <b>pmouseX</b> and <b>pmouseY</b> inside the mouse event functions.","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseX","mouseY","pmouseY","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"pmouseX_0","internal":{"content":"// Move the mouse quickly to see the difference \n// between the current and previous position \nvoid draw() { \n  background(204); \n  line(mouseX, 20, pmouseX, 80); \n  println(mouseX + \" : \" + pmouseX);\n} \n"},"extension":"pde"}}]}} ''',
    'pmouseY':
        r''' {"json":{"name":"pmouseY","classanchor":null,"description":"The system variable <b>pmouseY</b> always contains the vertical position\n of the mouse in the frame previous to the current frame. More detailed\n information about how <b>pmouseY</b> is updated inside of <b>draw()</b>\n and mouse events is explained in the reference for <b>pmouseX</b>.","syntax":null,"category":"input","subcategory":"mouse","parameters":null,"related":["mouseX","mouseY","pmouseX","mousePressed","mousePressed_","mouseReleased_","mouseClicked_","mouseMoved_","mouseDragged_","mouseButton","mouseWheel_"],"returns":null},"pdes":{"edges":[{"node":{"name":"pmouseY_0","internal":{"content":"// Move the mouse quickly to see the difference \n// between the current and previous position \nvoid draw() { \n  background(204); \n  line(20, mouseY, 80, pmouseY); \n  println(mouseY + \" : \" + pmouseY);\n} \n"},"extension":"pde"}}]}} ''',
    'greaterthanorequalto':
        r''' {"json":{"name":">= (greater than or equal to)","description":"Tests if the value on the left is larger than the value on the right or if the values are equivalent. \n","syntax":["value1 >= value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, or byte","type":[]},{"name":"value2","description":"int, float, char, or byte","type":[]}],"related":["greaterthan","lessthan","lessthanorequalto","equality","inequality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"greaterthanorequalto_0","internal":{"content":"int a = 23;\nint b = 23;\nif (a >= b) {\n  println(\"variable a is greater or equal to variable b \")\n}\n"},"extension":"pde"}}]}} ''',
    'greaterthan':
        r''' {"json":{"name":"> (greater than)","description":"Tests if the value on the left is larger than the value on the right. \n","syntax":["value1 > value2"],"category":"Control","subcategory":"Relational Operators","parameters":[{"name":"value1","description":"int, float, char, or byte","type":[]},{"name":"value2","description":"int, float, char, or byte","type":[]}],"related":["lessthan","greaterthanorequalto","lessthanorequalto","equality","inequality"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"greaterthan_0","internal":{"content":"int a = 5;\nint b = 13;\nif (b > a) {\n  println(\"variable b is larger the variable a\");\n}\n"},"extension":"pde"}}]}} ''',
    'get_':
        r''' {"json":{"name":"get()","description":"Reads the color of any pixel or grabs a section of an image. If no\n parameters are specified, the entire image is returned. Use the <b>x</b>\n and <b>y</b> parameters to get the value of one pixel. Get a section of\n the display window by specifying an additional <b>width</b> and\n <b>height</b> parameter. When getting an image, the <b>x</b> and\n <b>y</b> parameters define the coordinates for the upper-left corner of\n the image, regardless of the current <b>imageMode()</b>.<br />\n <br />\n If the pixel requested is outside of the image window, black is\n returned. The numbers returned are scaled according to the current color\n ranges, but only RGB values are returned by this function. For example,\n even though you may have drawn a shape with <b>colorMode(HSB)</b>, the\n numbers returned will be in RGB format.<br />\n <br />\n Getting the color of a single pixel with <b>get(x, y)</b> is easy, but\n not as fast as grabbing the data directly from <b>pixels[]</b>. The\n equivalent statement to <b>get(x, y)</b> using <b>pixels[]</b> is\n <b>pixels[y*width+x]</b>. See the reference for <b>pixels[]</b> for more information.\n\n\n ","syntax":["get(x, y)","get(x, y, w, h)","get()"],"category":"image","subcategory":"pixels","parameters":[{"name":"x","description":"x-coordinate of the pixel","type":["int"]},{"name":"y","description":"y-coordinate of the pixel","type":["int"]},{"name":"w","description":"width of pixel rectangle to get","type":["int"]},{"name":"h","description":"height of pixel rectangle to get","type":["int"]}],"related":["set_","pixels","copy_"],"returns":"int or PImage","classanchor":null},"pdes":{"edges":[{"node":{"name":"get_0","internal":{"content":"size(400,400);\nPImage myImage = loadImage(\"flower.jpg\");\nimage(myImage, 0, 0);\nPImage c = get();\nimage(c, width/2, 0);"},"extension":"pde"}},{"node":{"name":"get_1","internal":{"content":"size(400,400);\nPImage myImage = loadImage(\"flower.jpg\");\nimage(myImage, 0, 0);\ncolor c = get(25, 25);\nfill(c);\nnoStroke();\nrect(100, 100, 200, 200);"},"extension":"pde"}}]}} ''',
    'pointLight_':
        r''' {"json":{"name":"pointLight()","description":"Adds a point light. Lights need to be included in the <b>draw()</b> to remain\n persistent in a looping program. Placing them in the <b>setup()</b> of a\n looping program will cause them to only have an effect the first time through\n the loop. The <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters are interpreted\n as either RGB or HSB values, depending on the current color mode. The\n <b>x</b>, <b>y</b>, and <b>z</b> parameters set the position of the light.","syntax":["pointLight(v1, v2, v3, x, y, z)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]},{"name":"x","description":"x-coordinate of the light","type":["float"]},{"name":"y","description":"y-coordinate of the light","type":["float"]},{"name":"z","description":"z-coordinate of the light","type":["float"]}],"related":["lights_","directionalLight_","ambientLight_","spotLight_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"pointLight_","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\npointLight(51, 102, 126, 140, 160, 144);\ntranslate(320, 200, 0);\nsphere(120);"},"extension":"pde"}}]}} ''',
    'point_':
        r''' {"json":{"name":"point()","description":"Draws a point, a coordinate in space at the dimension of one pixel. The first\n parameter is the horizontal value for the point, the second value is the\n vertical value for the point, and the optional third value is the depth\n value. Drawing this shape in 3D with the <b>z</b> parameter requires the P3D\n parameter in combination with <b>size()</b> as shown in the above example.\n <br />\n <br />\n Use <b>stroke()</b> to set the color of a <b>point()</b>. <br />\n <br />\n Point appears round with the default <b>strokeCap(ROUND)</b> and square with\n <b>strokeCap(PROJECT)</b>. Points are invisible with <b>strokeCap(SQUARE)</b>\n (no cap). <br />\n <br />\n Using point() with strokeWeight(1) or smaller may draw nothing to the screen,\n depending on the graphics settings of the computer. Workarounds include\n setting the pixel using <b>set()</s> or drawing the point using either\n <b>circle()</b> or <b>square()</b>.","syntax":["point(x, y)","point(x, y, z)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x","description":"x-coordinate of the point","type":["float"]},{"name":"y","description":"y-coordinate of the point","type":["float"]},{"name":"z","description":"z-coordinate of the point","type":["float"]}],"related":["stroke_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"point_0","internal":{"content":"size(400, 400);\nnoSmooth();\npoint(120, 80);\npoint(340, 80);\npoint(340, 300);\npoint(120, 300);"},"extension":"pde"}},{"node":{"name":"point_1","internal":{"content":"size(400, 400, P3D);\nnoSmooth();\npoint(120, 80, -200);\npoint(340, 80, -200);\npoint(340, 300, -200);\npoint(120, 300, -200);"},"extension":"pde"}}]}} ''',
    'popMatrix_':
        r''' {"json":{"name":"popMatrix()","description":"Pops the current transformation matrix off the matrix stack.\n Understanding pushing and popping requires understanding the concept of\n a matrix stack. The <b>pushMatrix()</b> function saves the current\n coordinate system to the stack and <b>popMatrix()</b> restores the prior\n coordinate system. <b>pushMatrix()</b> and <b>popMatrix()</b> are used\n in conjunction with the other transformation functions and may be\n embedded to control the scope of the transformations.","syntax":["popMatrix()"],"category":"transform","subcategory":"","parameters":[],"related":["pushMatrix_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"popMatrix_","internal":{"content":"size(400, 400);\n\nfill(255);\nrect(0, 0, 200, 200);  // White rectangle\n\npushMatrix();\ntranslate(120, 80);\nfill(0);  \nrect(0, 0, 200, 200);  // Black rectangle\npopMatrix();\n\nfill(100);  \nrect(60, 40, 200, 200);  // Gray rectangle"},"extension":"pde"}}]}} ''',
    'popStyle_':
        r''' {"json":{"name":"popStyle()","description":"The <b>pushStyle()</b> function saves the current style settings and\n <b>popStyle()</b> restores the prior settings; these functions are\n always used together. They allow you to change the style settings and\n later return to what you had. When a new style is started with\n <b>pushStyle()</b>, it builds on the current style information. The\n <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to\n provide more control (see the second example above for a demonstration.)","syntax":["popStyle()"],"category":"structure","subcategory":"","parameters":[],"related":["pushStyle_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"popStyle_0","internal":{"content":"size(400, 400);\n\nellipse(0, 200, 132, 132);  // Left circle\n\npushStyle();  // Start a new style\nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(200, 200, 132, 132);  // Middle circle\npopStyle();  // Restore original style\n\nellipse(400, 200, 132, 132);  // Right circle"},"extension":"pde"}},{"node":{"name":"popStyle_1","internal":{"content":"size(400, 400);\n\nellipse(0, 200, 132, 132);  // Left circle\n\npushStyle();  // Start a new style\nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(132, 200, 132, 132);  // Left-middle circle\n\npushStyle();  // Start another new style\nstroke(0, 102, 153);\nellipse(264, 200, 132, 132);  // Right-middle circle\npopStyle();  // Restore the previous style\n\npopStyle();  // Restore original style\n\nellipse(400, 200, 132, 132);  // Right circle"},"extension":"pde"}}]}} ''',
    'pop_':
        r''' {"json":{"name":"pop()","description":"The <b>pop()</b> function restores the previous drawing style\n settings and transformations after <b>push()</b> has changed them.\n Note that these functions are always used together. They allow\n you to change the style and transformation settings and later\n return to what you had. When a new state is started with push(),\n it builds on the current style and transform information.\n <br />\n <br />\n <b>push()</b> stores information related to the current\n transformation state and style settings controlled by the\n following functions: <b>rotate()</b>, <b>translate()</b>,\n <b>scale()</b>, <b>fill()</b>, <b>stroke()</b>, <b>tint()</b>,\n <b>strokeWeight()</b>, <b>strokeCap()</b>, <b>strokeJoin()</b>,\n <b>imageMode()</b>, <b>rectMode()</b>, <b>ellipseMode()</b>,\n <b>colorMode()</b>, <b>textAlign()</b>, <b>textFont()</b>,\n <b>textMode()</b>, <b>textSize()</b>, <b>textLeading()</b>.<br />\n <br />\n The <b>push()</b> and <b>pop()</b> functions were added with\n Processing 3.5. They can be used in place of <b>pushMatrix()</b>,\n <b>popMatrix()</b>, <b>pushStyles()</b>, and <b>popStyles()</b>.\n The difference is that push() and pop() control both the\n transformations (rotate, scale, translate) and the drawing styles\n at the same time.","syntax":["pop()"],"category":"structure","subcategory":"","parameters":[],"related":["push_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"pop_0","internal":{"content":"fill(255);\nrect(0, 0, 200, 200);  // White rectangle\n\npush();\ntranslate(80, 70);\nfill(0);  \nrect(0, 0, 200, 200);  // Black rectangle\npop();  // Restore original settings\n\nfill(100);  \nrect(40, 40, 200, 200);  // Gray rectangle"},"extension":"pde"}},{"node":{"name":"pop_1","internal":{"content":"ellipse(0, 200, 133, 133);  // Left circle\n\npush(); \nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(200, 200, 133, 133);  // Middle circle\npop();  // Restore original settings\n\nellipse(400, 200, 133, 133);  // Right circle"},"extension":"pde"}}]}} ''',
    'pow_':
        r''' {"json":{"name":"pow()","description":"Facilitates exponential expressions. The <b>pow()</b> function is an\n efficient way of multiplying numbers by themselves (or their reciprocal)\n in large quantities. For example, <b>pow(3, 5)</b> is equivalent to the\n expression 3*3*3*3*3 and <b>pow(3, -5)</b> is equivalent to 1 / 3*3*3*3*3.","syntax":["pow(n, e)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"base of the exponential expression","type":["float"]},{"name":"e","description":"power by which to raise the base","type":["float"]}],"related":["sqrt_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"pow_0","internal":{"content":"float a = pow( 1, 3);  // Sets 'a' to 1*1*1 = 1\nfloat b = pow( 3, 5);  // Sets 'b' to 3*3*3*3*3 = 243\nfloat c = pow( 3,-5);  // Sets 'c' to 1 / 3*3*3*3*3 = 1 / 243 = .0041\nfloat d = pow(-3, 5);  // Sets 'd' to -3*-3*-3*-3*-3 = -243\n"},"extension":"pde"}}]}} ''',
    'printArray_':
        r''' {"json":{"name":"printArray()","description":"The <b>printArray()</b> function writes array data to the text\n area of the Processing environment's console. A new line\n is put between each element of the array. This function\n can only print one dimensional arrays.\n Note that the console is relatively slow. It works well\n for occasional messages, but does not support high-speed,\n real-time output (such as at 60 frames per second).","syntax":["printArray(what)"],"category":"output","subcategory":"text area","parameters":[{"name":"what","description":"one-dimensional array","type":["Object"]}],"related":["print_","println_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"printArray_0","internal":{"content":"float[] f = { 0.3, 0.4, 0.5 };\nprintArray(f);\n\n// The above code prints:\n// [0] 0.3\n// [1] 0.4\n// [2] 0.5\n"},"extension":"pde"}}]}} ''',
    'printCamera_':
        r''' {"json":{"name":"printCamera()","description":"Prints the current camera matrix to the Console (the text window at the\n bottom of Processing).","syntax":["printCamera()"],"category":"lights_camera","subcategory":"camera","parameters":[],"related":["camera_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"printCamera_0","internal":{"content":"size(100, 100, P3D);\nprintCamera();\n\n// The program above prints this data:\n// 01.0000  00.0000  00.0000 -50.0000\n// 00.0000  01.0000  00.0000 -50.0000\n// 00.0000  00.0000  01.0000 -86.6025\n// 00.0000  00.0000  00.0000  01.0000\n"},"extension":"pde"}}]}} ''',
    'printMatrix_':
        r''' {"json":{"name":"printMatrix()","description":"Prints the current matrix to the Console (the text window at the bottom\n of Processing).","syntax":["printMatrix()"],"category":"transform","subcategory":"","parameters":[],"related":["pushMatrix_","popMatrix_","resetMatrix_","applyMatrix_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"printMatrix_0","internal":{"content":"size(100, 100, P3D);\nprintMatrix();\n// Prints:\n// 01.0000  00.0000  00.0000 -50.0000\n// 00.0000  01.0000  00.0000 -50.0000\n// 00.0000  00.0000  01.0000 -86.6025\n// 00.0000  00.0000  00.0000  01.0000\n\nresetMatrix();\nprintMatrix();\n// Prints:\n// 1.0000  0.0000  0.0000  0.0000\n// 0.0000  1.0000  0.0000  0.0000\n// 0.0000  0.0000  1.0000  0.0000\n// 0.0000  0.0000  0.0000  1.0000\n"},"extension":"pde"}}]}} ''',
    'printProjection_':
        r''' {"json":{"name":"printProjection()","description":"Prints the current projection matrix to the Console (the text window at\n the bottom of Processing).","syntax":["printProjection()"],"category":"lights_camera","subcategory":"camera","parameters":[],"related":["camera_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"printProjection_0","internal":{"content":"size(100, 100, P3D);\nprintProjection();\n\n// The program above prints this data:\n// 01.7321  00.0000  00.0000  00.0000\n// 00.0000 -01.7321  00.0000  00.0000\n// 00.0000  00.0000 -01.0202 -17.4955\n// 00.0000  00.0000 -01.0000  00.0000\n"},"extension":"pde"}}]}} ''',
    'print_':
        r''' {"json":{"name":"print()","description":"The <b>print()</b> function writes to the console area, the black rectangle\n at the bottom of the Processing environment. This function is often helpful\n for looking at the data a program is producing. The companion function\n <b>println()</b> works like <b>print()</b>, but creates a new line of text\n for each call to the function. More than one parameter can be passed into the\n function by separating them with commas. Alternatively, individual elements\n can be separated with quotes (\"\") and joined with the addition operator\n (+).<br />\n <br />\n Using <b>print()</b> on an object will output <b>null</b>, a memory location\n that may look like \"@10be08,\" or the result of the <b>toString()</b> method\n from the object that's being printed. Advanced users who want more useful\n output when calling <b>print()</b> on their own classes can add a\n <b>toString()</b> method to the class that returns a String.<br />\n <br />\n Note that the console is relatively slow. It works well for occasional\n messages, but does not support high-speed, real-time output (such as at 60\n frames per second). It should also be noted, that a print() within a for loop\n can sometimes lock up the program, and cause the sketch to freeze.","syntax":["print(what)","print(variables)"],"category":"output","subcategory":"text area","parameters":[{"name":"what","description":"data to print to console","type":["byte","boolean","char","int","float","String"]},{"name":"variables","description":"list of data, separated by commas","type":["Object[]"]}],"related":["println_","printArray_","join_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"print_0","internal":{"content":"String s = \"The size is \";\nint w = 1920;\nint h = 1080;\nprint(s);\nprint(w, \"x\", h);\n\n// This program writes to the console:\n// The size is 1920 x 1080\n"},"extension":"pde"}},{"node":{"name":"print_1","internal":{"content":"print(\"begin- \");\nfloat f = 0.3;\nint i = 1024;\nprint(\"f is \" + f + \" and i is \" + 1024);\nString s = \" -end\";\nprintln(s);\n\n// This program writes to the console:\n// \"begin- f is 0.3 and i is 1024 -end\"\n"},"extension":"pde"}}]}} ''',
    'println_':
        r''' {"json":{"name":"println()","description":"The <b>println()</b> function writes to the console area, the black\n rectangle at the bottom of the Processing environment. This function is\n often helpful for looking at the data a program is producing. Each call to\n this function creates a new line of output. More than one parameter can be\n passed into the function by separating them with commas. Alternatively,\n individual elements can be separated with quotes (\"\") and joined with the\n addition operator (+).<br />\n <br />\n Before Processing 2.1, <b>println()</b> was used to write array data to the\n console. Now, use <b>printArray()</b> to write array data to the\n console.<br />\n <br />\n Note that the console is relatively slow. It works well for occasional\n messages, but does not support high-speed, real-time output (such as at 60\n frames per second). It should also be noted, that a println() within a for\n loop can sometimes lock up the program, and cause the sketch to freeze.","syntax":["println()","println(what)","println(variables)"],"category":"output","subcategory":"text area","parameters":[{"name":"what","description":"data to print to console","type":["byte","boolean","char","int","float","String","Object"]},{"name":"variables","description":"list of data, separated by commas","type":["Object[]"]}],"related":["print_","printArray_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"println_0","internal":{"content":"String s = \"The size is \";\nint w = 1920;\nint h = 1080;\nprintln(s);\nprintln(w, \"x\", h);\n\n// This program writes to the console:\n// The size is \n// 1920 x 1080\n"},"extension":"pde"}},{"node":{"name":"println_1","internal":{"content":"print(\"begin- \");\nfloat f = 0.3;\nint i = 1024;\nprint(\"f is \" + f + \" and i is \" + 1024);\nString s = \" -end\";\nprintln(s);\n\n// This program writes to the console:\n// \"begin- f is 0.3 and i is 1024 -end\"\n"},"extension":"pde"}}]}} ''',
    'private':
        r''' {"json":{"name":"private","description":"This keyword is used to disallow other classes access to the fields and methods within a class. The <b>private</b> keyword is used before a field or method that you want to be available only within the class. In Processing, all fields and methods are public unless otherwise specified by the <b>private</b> keyword.<br />\n<br />\nThis keyword is an essential part of Java programming and is not usually used with Processing. Consult a Java language reference or tutorial for more information. \n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["public"],"returns":null,"classanchor":null},"pdes":{"edges":[]}} ''',
    'public':
        r''' {"json":{"name":"public","description":"Keyword used to provide other classes access the fields and methods within a class. The <b>public</b> keyword is used before a field or method that you want to make available. In Processing, all fields and methods are public unless otherwise specified by the <b>private</b> keyword.<br />\n<br />\nThis keyword is an essential part of Java programming and is not usually used with Processing. Consult a Java language reference or tutorial for more information. \n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["private"],"returns":"","classanchor":null},"pdes":{"edges":[]}} ''',
    'pushMatrix_':
        r''' {"json":{"name":"pushMatrix()","description":"Pushes the current transformation matrix onto the matrix stack.\n Understanding <b>pushMatrix()</b> and <b>popMatrix()</b> requires\n understanding the concept of a matrix stack. The <b>pushMatrix()</b>\n function saves the current coordinate system to the stack and\n <b>popMatrix()</b> restores the prior coordinate system.\n <b>pushMatrix()</b> and <b>popMatrix()</b> are used in conjunction with\n the other transformation functions and may be embedded to control the\n scope of the transformations.","syntax":["pushMatrix()"],"category":"transform","subcategory":"","parameters":[],"related":["popMatrix_","translate_","scale_","rotate_","rotateX_","rotateY_","rotateZ_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"pushMatrix_","internal":{"content":"size(400, 400);\n\nfill(255);\nrect(0, 0, 200, 200);  // White rectangle\n\npushMatrix();\ntranslate(120, 80);\nfill(0);  \nrect(0, 0, 200, 200);  // Black rectangle\npopMatrix();\n\nfill(100);  \nrect(60, 40, 200, 200);  // Gray rectangle"},"extension":"pde"}}]}} ''',
    'pushStyle_':
        r''' {"json":{"name":"pushStyle()","description":"The <b>pushStyle()</b> function saves the current style settings and\n <b>popStyle()</b> restores the prior settings. Note that these functions\n are always used together. They allow you to change the style settings\n and later return to what you had. When a new style is started with\n <b>pushStyle()</b>, it builds on the current style information. The\n <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to\n provide more control (see the second example above for a demonstration.)\n <br /><br />\n The style information controlled by the following functions are included\n in the style:\n <b>fill()<b>, <b>stroke()</b>, <b>tint()</b>, <b>strokeWeight()</b>, <b>strokeCap()</b>,<b>strokeJoin()</b>,\n <b>imageMode()</b>, <b>rectMode()</b>, <b>ellipseMode()</b>, <b>shapeMode()</b>, <b>colorMode()</b>,\n <b>textAlign()</b>, <b>textFont()</b>, <b>textMode()</b>, <b>textSize()</b>, <b>textLeading()</b>,\n <b>emissive()</b>, <b>specular()</b>, <b>shininess()</b>, <b>ambient()</b>","syntax":["pushStyle()"],"category":"structure","subcategory":"","parameters":[],"related":["popStyle_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"pushStyle_0","internal":{"content":"size(400, 400);\n\nellipse(0, 200, 132, 132);  // Left circle\n\npushStyle();  // Start a new style\nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(200, 200, 132, 132);  // Middle circle\npopStyle();  // Restore original style\n\nellipse(400, 200, 132, 132);  // Right circle"},"extension":"pde"}},{"node":{"name":"pushStyle_1","internal":{"content":"size(400, 400);\n\nellipse(0, 200, 132, 132);  // Left circle\n\npushStyle();  // Start a new style\nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(132, 200, 132, 132);  // Left-middle circle\n\npushStyle();  // Start another new style\nstroke(0, 102, 153);\nellipse(264, 200, 132, 132);  // Right-middle circle\npopStyle();  // Restore the previous style\n\npopStyle();  // Restore original style\n\nellipse(400, 200, 132, 132);  // Right circle"},"extension":"pde"}}]}} ''',
    'push_':
        r''' {"json":{"name":"push()","description":"The <b>push()</b> function saves the current drawing style\n settings and transformations, while <b>pop()</b> restores these\n settings. Note that these functions are always used together.\n They allow you to change the style and transformation settings\n and later return to what you had. When a new state is started\n with push(), it builds on the current style and transform\n information.<br />\n <br />\n <b>push()</b> stores information related to the current\n transformation state and style settings controlled by the\n following functions: <b>rotate()</b>, <b>translate()</b>,\n <b>scale()</b>, <b>fill()</b>, <b>stroke()</b>, <b>tint()</b>,\n <b>strokeWeight()</b>, <b>strokeCap()</b>, <b>strokeJoin()</b>,\n <b>imageMode()</b>, <b>rectMode()</b>, <b>ellipseMode()</b>,\n <b>colorMode()</b>, <b>textAlign()</b>, <b>textFont()</b>,\n <b>textMode()</b>, <b>textSize()</b>, <b>textLeading()</b>.<br />\n <br />\n The <b>push()</b> and <b>pop()</b> functions were added with\n Processing 3.5. They can be used in place of <b>pushMatrix()</b>,\n <b>popMatrix()</b>, <b>pushStyles()</b>, and <b>popStyles()</b>.\n The difference is that push() and pop() control both the\n transformations (rotate, scale, translate) and the drawing styles\n at the same time.","syntax":["push()"],"category":"structure","subcategory":"","parameters":[],"related":["pop_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"push_0","internal":{"content":"fill(255);\nrect(0, 0, 200, 200);  // White rectangle\n\npush();\ntranslate(80, 70);\nfill(0);  \nrect(0, 0, 200, 200);  // Black rectangle\npop();  // Restore original settings\n\nfill(100);  \nrect(40, 40, 200, 200);  // Gray rectangle"},"extension":"pde"}},{"node":{"name":"push_1","internal":{"content":"ellipse(0, 200, 133, 133);  // Left circle\n\npush(); \nstrokeWeight(40);\nfill(204, 153, 0);\nellipse(200, 200, 133, 133);  // Middle circle\npop();  // Restore original settings\n\nellipse(400, 200, 133, 133);  // Right circle"},"extension":"pde"}}]}} ''',
    'quad_':
        r''' {"json":{"name":"quad()","description":"A quad is a quadrilateral, a four sided polygon. It is similar to a\n rectangle, but the angles between its edges are not constrained to\n ninety degrees. The first pair of parameters (x1,y1) sets the first\n vertex and the subsequent pairs should proceed clockwise or\n counter-clockwise around the defined shape.","syntax":["quad(x1, y1, x2, y2, x3, y3, x4, y4)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x1","description":"x-coordinate of the first corner","type":["float"]},{"name":"y1","description":"y-coordinate of the first corner","type":["float"]},{"name":"x2","description":"x-coordinate of the second corner","type":["float"]},{"name":"y2","description":"y-coordinate of the second corner","type":["float"]},{"name":"x3","description":"x-coordinate of the third corner","type":["float"]},{"name":"y3","description":"y-coordinate of the third corner","type":["float"]},{"name":"x4","description":"x-coordinate of the fourth corner","type":["float"]},{"name":"y4","description":"y-coordinate of the fourth corner","type":["float"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"quad_","internal":{"content":"size(400, 400);\nquad(152, 124, 344, 80, 276, 252, 120, 304);"},"extension":"pde"}}]}} ''',
    'quadraticVertex_':
        r''' {"json":{"name":"quadraticVertex()","description":"Specifies vertex coordinates for quadratic Bezier curves. Each call\n to <b>quadraticVertex()</b> defines the position of one control\n point and one anchor point of a Bezier curve, adding a new segment\n to a line or shape. The first time <b>quadraticVertex()</b> is used\n within a <b>beginShape()</b> call, it must be prefaced with a call\n to <b>vertex()</b> to set the first anchor point. This function must\n be used between <b>beginShape()</b> and <b>endShape()</b> and only\n when there is no MODE parameter specified to <b>beginShape()</b>.\n Using the 3D version requires rendering with P3D (see the Environment\n reference for more information).","syntax":["quadraticVertex(cx, cy, x3, y3)","quadraticVertex(cx, cy, cz, x3, y3, z3)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"cx","description":"the x-coordinate of the control point","type":["float"]},{"name":"cy","description":"the y-coordinate of the control point","type":["float"]},{"name":"x3","description":"the x-coordinate of the anchor point","type":["float"]},{"name":"y3","description":"the y-coordinate of the anchor point","type":["float"]},{"name":"cz","description":"the z-coordinate of the control point","type":["float"]},{"name":"z3","description":"the z-coordinate of the anchor point","type":["float"]}],"related":["curveVertex_","vertex_","bezierVertex_","bezier_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"quadraticVertex_0","internal":{"content":"size(400, 400);\nnoFill();\nstrokeWeight(16);\nbeginShape();\nvertex(80, 80);\nquadraticVertex(320, 80, 200, 200);\nendShape();"},"extension":"pde"}},{"node":{"name":"quadraticVertex_1","internal":{"content":"size(400, 400);\nnoFill();\nstrokeWeight(16);\nbeginShape();\nvertex(80, 80);\nquadraticVertex(320, 80, 200, 200);\nquadraticVertex(80, 320, 320, 320);\nvertex(320, 240);\nendShape();"},"extension":"pde"}}]}} ''',
    'radians_':
        r''' {"json":{"name":"radians()","description":"Converts a degree measurement to its corresponding value in radians.\n Radians and degrees are two ways of measuring the same thing. There are\n 360 degrees in a circle and 2*PI radians in a circle. For example,\n 90&deg; = PI/2 = 1.5707964. All trigonometric functions in Processing\n require their parameters to be specified in radians.","syntax":["radians(degrees)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"degrees","description":"degree value to convert to radians","type":["float"]}],"related":["degrees_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"radians_0","internal":{"content":"float deg = 45.0;\nfloat rad = radians(deg);\nprintln(deg + \" degrees is \" + rad + \" radians\");\n"},"extension":"pde"}}]}} ''',
    'randomGaussian_':
        r''' {"json":{"name":"randomGaussian()","description":"Returns a float from a random series of numbers having a mean of 0\n and standard deviation of 1. Each time the <b>randomGaussian()</b>\n function is called, it returns a number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <b>randomGaussian()</b> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.","syntax":["randomGaussian()"],"category":"math","subcategory":"random","parameters":[],"related":["random_","noise_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"RandomGaussian_0","internal":{"content":"size(400, 400);\nfor (int y = 0; y < 400; y++) {\n  float x = randomGaussian() * 60;\n  line(200, y, 200 + x, y);\n}"},"extension":"pde"}},{"node":{"name":"RandomGaussian_1","internal":{"content":"float[] distribution = new float[360];\n\nvoid setup() {\n  size(400, 400);\n  for (int i = 0; i < distribution.length; i++) {\n    distribution[i] = int(randomGaussian() * 60);\n  }\n}\n\nvoid draw() {\n  background(204);\n  \n  translate(width/2, width/2);\n\n  for (int i = 0; i < distribution.length; i++) {\n    rotate(TWO_PI/distribution.length);\n    stroke(0);\n    float dist = abs(distribution[i]);\n    line(0, 0, dist, 0);\n  }\n}"},"extension":"pde"}}]}} ''',
    'randomSeed_':
        r''' {"json":{"name":"randomSeed()","description":"Sets the seed value for <b>random()</b>. By default, <b>random()</b>\n produces different results each time the program is run. Set the <b>seed</b>\n parameter to a constant to return the same pseudo-random numbers each time\n the software is run.","syntax":["randomSeed(seed)"],"category":"math","subcategory":"random","parameters":[{"name":"seed","description":"seed value","type":["int"]}],"related":["random_","noise_","noiseSeed_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"randomSeed_0","internal":{"content":"randomSeed(0);\nfor (int i=0; i < 100; i++) {\n  float r = random(0, 255);\n  stroke(r);\n  line(i, 0, i, 100);\n}\n\n"},"extension":"pde"}}]}} ''',
    'random_':
        r''' {"json":{"name":"random()","description":"Generates random numbers. Each time the <b>random()</b> function is called,\n it returns an unexpected value within the specified range. If only one\n parameter is passed to the function, it will return a float between zero\n and the value of the <b>high</b> parameter. For example, <b>random(5)</b>\n returns values between 0 and 5 (starting at zero, and up to, but not\n including, 5).<br />\n <br />\n If two parameters are specified, the function will return a float with a\n value between the two values. For example, <b>random(-5, 10.2)</b> returns\n values starting at -5 and up to (but not including) 10.2. To convert a\n floating-point random number to an integer, use the <b>int()</b> function.","syntax":["random(high)","random(low, high)"],"category":"math","subcategory":"random","parameters":[{"name":"low","description":"lower limit","type":["float"]},{"name":"high","description":"upper limit","type":["float"]}],"related":["randomSeed_","noise_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"random_0","internal":{"content":"for (int i = 0; i < 100; i++) {\n  float r = random(50);\n  stroke(r*5);\n  line(50, i, 50+r, i);\n}\n"},"extension":"pde"}},{"node":{"name":"random_1","internal":{"content":"for (int i = 0; i < 100; i++) {\n  float r = random(-50, 50);\n  println(r);\n}\n"},"extension":"pde"}},{"node":{"name":"random_2","internal":{"content":"// Get a random element from an array\nString[] words = { \"apple\", \"bear\", \"cat\", \"dog\" };\nint index = int(random(words.length));  // Same as int(random(4))\nprintln(words[index]);  // Prints one of the four words\n"},"extension":"pde"}}]}} ''',
    'rectMode_':
        r''' {"json":{"name":"rectMode()","description":"Modifies the location from which rectangles are drawn by changing the way in\n which parameters given to <b>rect()</b> are interpreted.<br />\n <br />\n The default mode is <b>rectMode(CORNER)</b>, which interprets the first two\n parameters of <b>rect()</b> as the upper-left corner of the shape, while the\n third and fourth parameters are its width and height.<br />\n <br />\n <b>rectMode(CORNERS)</b> interprets the first two parameters of <b>rect()</b>\n as the location of one corner, and the third and fourth parameters as the\n location of the opposite corner.<br />\n <br />\n <b>rectMode(CENTER)</b> interprets the first two parameters of <b>rect()</b>\n as the shape's center point, while the third and fourth parameters are its\n width and height.<br />\n <br />\n <b>rectMode(RADIUS)</b> also uses the first two parameters of <b>rect()</b>\n as the shape's center point, but uses the third and fourth parameters to\n specify half of the shape's width and height.<br />\n <br />\n The parameter must be written in ALL CAPS because Processing is a\n case-sensitive language.","syntax":["rectMode(mode)"],"category":"shape","subcategory":"attributes","parameters":[{"name":"mode","description":"either CORNER, CORNERS, CENTER, or RADIUS","type":["int"]}],"related":["rect_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rectMode_0","internal":{"content":"size(400, 400);\nrectMode(CORNER);  // Default rectMode is CORNER\nfill(255);  // Set fill to white\nrect(100, 100, 200, 200);  // Draw white rect using CORNER mode\n\nrectMode(CORNERS);  // Set rectMode to CORNERS\nfill(100);  // Set fill to gray\nrect(100, 100, 200, 200);  // Draw gray rect using CORNERS mode"},"extension":"pde"}},{"node":{"name":"rectMode_1","internal":{"content":"size(400, 400);\nrectMode(RADIUS);  // Set rectMode to RADIUS\nfill(255);  // Set fill to white\nrect(200, 200, 120, 120);  // Draw white rect using RADIUS mode\n\nrectMode(CENTER);  // Set rectMode to CENTER\nfill(100);  // Set fill to gray\nrect(200, 200, 120, 120);  // Draw gray rect using CENTER mode"},"extension":"pde"}}]}} ''',
    'rect_':
        r''' {"json":{"name":"rect()","description":"Draws a rectangle to the screen. A rectangle is a four-sided shape with every\n angle at ninety degrees. By default, the first two parameters set the\n location of the upper-left corner, the third sets the width, and the fourth\n sets the height. The way these parameters are interpreted, however, may be\n changed with the <b>rectMode()</b> function.<br />\n <br />\n To draw a rounded rectangle, add a fifth parameter, which is used as the\n radius value for all four corners.<br />\n <br />\n To use a different radius value for each corner, include eight parameters.\n When using eight parameters, the latter four set the radius of the arc at\n each corner separately, starting with the top-left corner and moving\n clockwise around the rectangle.","syntax":["rect(a, b, c, d)","rect(a, b, c, d, r)","rect(a, b, c, d, tl, tr, br, bl)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"a","description":"x-coordinate of the rectangle by default","type":["float"]},{"name":"b","description":"y-coordinate of the rectangle by default","type":["float"]},{"name":"c","description":"width of the rectangle by default","type":["float"]},{"name":"d","description":"height of the rectangle by default","type":["float"]},{"name":"r","description":"radii for all four corners","type":["float"]},{"name":"tl","description":"radius for top-left corner","type":["float"]},{"name":"tr","description":"radius for top-right corner","type":["float"]},{"name":"br","description":"radius for bottom-right corner","type":["float"]},{"name":"bl","description":"radius for bottom-left corner","type":["float"]}],"related":["rectMode_","quad_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rect_0","internal":{"content":"size(400, 400);\nrect(120, 80, 220, 220);\n"},"extension":"pde"}},{"node":{"name":"rect_1","internal":{"content":"size(400, 400);\nrect(120, 80, 220, 220, 28);"},"extension":"pde"}},{"node":{"name":"rect_2","internal":{"content":"size(400, 400);\nrect(120, 80, 220, 220, 12, 24, 48, 72);"},"extension":"pde"}}]}} ''',
    'red_':
        r''' {"json":{"name":"red()","description":"Extracts the red value from a color, scaled to match current\n <b>colorMode()</b>. The value is always returned as a float, so be careful\n not to assign it to an int value.<br />\n <br />\n The <b>red()</b> function is easy to use and understand, but it is slower\n than a technique called bit shifting. When working in <b>colorMode(RGB,\n 255)</b>, you can achieve the same results as <b>red()</b> but with greater\n speed by using the right shift operator (<b>>></b>) with a bit mask. For\n example, the following two lines of code are equivalent means of getting the\n red value of the color value <b>c</b>:<br />\n <br />\n\n <pre>\n float r1 = red(c); // Simpler, but slower to calculate\n float r2 = c >> 16 & 0xFF; // Very fast to calculate\n </pre>","syntax":["red(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["green_","blue_","alpha_","hue_","saturation_","brightness_","rightshift_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"red_","internal":{"content":"size(400, 400);\n\ncolor c = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(60, 80, 140, 240);  // Draw left rectangle\n  \nfloat redValue = red(c);  // Get red in 'c'\nprintln(redValue);  // Print \"255.0\"\nfill(redValue, 0, 0);  // Use 'redValue' in new fill\nrect(200, 80, 140, 240);  // Draw right rectangle"},"extension":"pde"}}]}} ''',
    'redraw_':
        r''' {"json":{"name":"redraw()","description":"Executes the code within <b>draw()</b> one time. This functions allows the\n program to update the display window only when necessary, for example when an\n event registered by <b>mousePressed()</b> or <b>keyPressed()</b> occurs.\n <br/>\n <br/>\n In structuring a program, it only makes sense to call redraw() within events\n such as <b>mousePressed()</b>. This is because <b>redraw()</b> does not run\n <b>draw()</b> immediately (it only sets a flag that indicates an update is\n needed). <br/>\n <br/>\n The <b>redraw()</b> function does not work properly when called inside\n <b>draw()</b>. To enable/disable animations, use <b>loop()</b> and\n <b>noLoop()</b>.","syntax":["redraw()"],"category":"structure","subcategory":"","parameters":[],"related":["draw_","loop_","noLoop_","frameRate_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"redraw_0","internal":{"content":"float x = 0;\n\nvoid setup() {\n  size(200, 200);\n  noLoop();\n}\n\nvoid draw() {\n  background(204);\n  line(x, 0, x, height); \n}\n\nvoid mousePressed() {\n  x += 1;\n  redraw();\n}\n"},"extension":"pde"}}]}} ''',
    'requestImage_':
        r''' {"json":{"name":"requestImage()","description":"This function loads images on a separate thread so that your sketch doesn't\n freeze while images load during <b>setup()</b>. While the image is loading,\n its width and height will be 0. If an error occurs while loading the image,\n its width and height will be set to -1. You'll know when the image has\n loaded properly because its <b>width</b> and <b>height</b> will be greater\n than 0. Asynchronous image loading (particularly when downloading from a\n server) can dramatically improve performance.<br />\n <br />\n The <b>extension</b> parameter is used to determine the image type in cases\n where the image filename does not end with a proper extension. Specify the\n extension as the second parameter to <b>requestImage()</b>.","syntax":["requestImage(filename)","requestImage(filename, extension)"],"category":"image","subcategory":"loading & displaying","parameters":[{"name":"filename","description":"name of the file to load, can be .gif, .jpg, .tga, or a handful of\n          other image types depending on your platform","type":["String"]},{"name":"extension","description":"the type of image to load, for example \"png\", \"gif\", \"jpg\"","type":["String"]}],"related":["PImage","loadImage_"],"returns":"PImage","classanchor":null},"pdes":{"edges":[{"node":{"name":"requestImage_0","internal":{"content":"PImage bigImage;\n \nvoid setup() {\n  bigImage = requestImage(\"something.jpg\");\n}\n \nvoid draw() {\n  if (bigImage.width == 0) {\n    // Image is not yet loaded\n  } else if (bigImage.width == -1) {\n    // This means an error occurred during image loading\n  } else {\n    // Image is ready to go, draw it\n    image(bigImage, 0, 0);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'resetMatrix_':
        r''' {"json":{"name":"resetMatrix()","description":"Replaces the current matrix with the identity matrix. The equivalent function\n in OpenGL is <b>glLoadIdentity()</b>.","syntax":["resetMatrix()"],"category":"transform","subcategory":"","parameters":[],"related":["pushMatrix_","popMatrix_","applyMatrix_","printMatrix_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"resetMatrix_","internal":{"content":"size(400, 400, P3D);\nnoFill();\nbox(320);\nprintMatrix();\n// Prints:\n// 001.0000  000.0000  000.0000 -200.0000\n// 000.0000  001.0000  000.0000 -200.0000\n// 000.0000  000.0000  001.0000 -346.4102\n// 000.0000  000.0000  000.0000  001.0000\n\nresetMatrix();\nbox(320);\nprintMatrix();\n// Prints:\n// 1.0000  0.0000  0.0000  0.0000\n// 0.0000  1.0000  0.0000  0.0000\n// 0.0000  0.0000  1.0000  0.0000\n// 0.0000  0.0000  0.0000  1.0000"},"extension":"pde"}}]}} ''',
    'resetShader_':
        r''' {"json":{"name":"resetShader()","description":"Restores the default shaders. Code that runs after <b>resetShader()</b>\n will not be affected by previously defined shaders.","syntax":["resetShader()","resetShader(kind)"],"category":"rendering","subcategory":"shaders","parameters":[{"name":"kind","description":"type of shader, either POINTS, LINES, or TRIANGLES","type":["int"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"resetShader_0","internal":{"content":"PShader edges;  \nPImage img;\n    \nvoid setup() {\n  size(640, 360, P2D);\n  img = loadImage(\"leaves.jpg\");      \n  edges = loadShader(\"edges.glsl\");\n}\n\nvoid draw() {\n  shader(edges);\n  image(img, 0, 0);\n  resetShader();\n  image(img, width/2, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'return':
        r''' {"json":{"name":"return","description":"Keyword used to indicate the value to return from a function. The value being returned must be the same datatype as defined in the function declaration. Functions declared with <b>void</b> can't return values and shouldn't include a return value.<br />\n<br />\nThe keyword <b>return</b> may also be used to break out of a function, thus not allowing the program to  the remaining statements. (See the third example above.)\n","syntax":["type function {","  statements","  return value","}"],"category":"structure","subcategory":"","parameters":[{"name":"type","description":"boolean, byte, char, int, float, String, boolean[], byte[], char[], int[], float[], or String[]","type":[]},{"name":"function","description":"the function that is being defined","type":[]},{"name":"statements","description":"any valid statements","type":[]},{"name":"value","description":"must be the same datatype as the \"type\" parameter","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"return_0","internal":{"content":"int val = 30;\n \nvoid draw() {\n  int t = timestwo(val);\n  println(t);\n}\n\n// The first 'int' in the function declaration\n// specifies the type of data to be returned.\nint timestwo(int dVal) {\n  dVal = dVal * 2;\n  return dVal;  // Returns an int of 60, in this case\n}\n"},"extension":"pde"}},{"node":{"name":"return_1","internal":{"content":"int[] vals = {10, 20, 30}; \n  \nvoid draw() { \n  int[] t = timestwo(vals); \n  println(t); \n  noLoop();\n} \n \nint[] timestwo(int[] dVals) { \n  for (int i = 0; i < dVals.length; i++) { \n    dVals[i] = dVals[i] * 2; \n  } \n  return dVals;  // Returns an array of 3 ints: 20, 40, 60 \n}\n"},"extension":"pde"}},{"node":{"name":"return_2","internal":{"content":"void draw() {\n  background(204);\n  line(0, 0, width, height);\n  if (mousePressed) {\n    return;  // Break out of draw(), skipping the line statement below\n  }\n  line(0, height, width, 0);  // Executed only if mouse is not pressed\n}\n"},"extension":"pde"}}]}} ''',
    'reverse_':
        r''' {"json":{"name":"reverse()","description":"Reverses the order of an array.","syntax":["reverse(list)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"booleans[], bytes[], chars[], ints[], floats[], or Strings[]","type":["boolean[]","byte[]","char[]","int[]","float[]","String[]","Object"]}],"related":["sort_"],"returns":"boolean[], byte[], char[], int[], float[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"reverse_0","internal":{"content":"String sa[] = { \"OH\", \"NY\", \"MA\", \"CA\"};\nsa = reverse(sa);\nprintln(sa);\n// Prints updated array contents to the console:\n// [0] \"CA\"\n// [1] \"MA\"\n// [2] \"NY\"\n// [3] \"OH\"\n"},"extension":"pde"}}]}} ''',
    'rightshift':
        r''' {"json":{"name":">> (right shift)","description":"Shifts bits to the right. The number to the left of the operator is shifted the number of places specified by the number to the right. Each shift to the right halves the number, therefore each right shift divides the original number by 2. Use the right shift for fast divisions or to extract an individual number from a packed number. Right shifting only works with integers or numbers which automatically convert to an integer such at byte and char.\n<br /> <br />\nBit shifting is helpful when using the <b>color</b> data type. A right shift can extract red, green, blue, and alpha values from a color. A left shift can be used to quickly reassemble a color value (more quickly than the <b>color()</b> function).\n","syntax":["value >> n"],"category":"math","subcategory":"Bitwise Operators","parameters":[{"name":"value","description":"int: the value to shift","type":[]},{"name":"n","description":"int: the number of places to shift right","type":[]}],"related":["leftshift"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"rightshift_0","internal":{"content":"int m = 8 >> 3;    // In binary: 1000 to 1\nprintln(m);  // Prints \"1\"\nint n = 256 >> 6;  // In binary: 100000000 to 100 \nprintln(n);  // Prints \"4\"\nint o = 16 >> 3;   // In binary: 10000 to 10 \nprintln(o);  // Prints \"2\"\nint p = 26 >> 1;   // In binary: 11010 to 1101 \nprintln(p);  // Prints \"13\"\n"},"extension":"pde"}},{"node":{"name":"rightshift_1","internal":{"content":"// Using \"right shift\" as a faster technique than red(), green(), and blue()\ncolor argb = color(204, 204, 51, 255);\nint a = (argb >> 24) & 0xFF;\nint r = (argb >> 16) & 0xFF;  // Faster way of getting red(argb)\nint g = (argb >> 8) & 0xFF;   // Faster way of getting green(argb)\nint b = argb & 0xFF;          // Faster way of getting blue(argb)\nfill(r, g, b, a);\nrect(30, 20, 55, 55);\n"},"extension":"pde"}}]}} ''',
    'rotateX_':
        r''' {"json":{"name":"rotateX()","description":"Rotates a shape around the x-axis the amount specified by the\n <b>angle</b> parameter. Angles should be specified in radians (values\n from 0 to PI*2) or converted to radians with the <b>radians()</b>\n function. Objects are always rotated around their relative position to\n the origin and positive numbers rotate objects in a counterclockwise\n direction. Transformations apply to everything that happens after and\n subsequent calls to the function accumulates the effect. For example,\n calling <b>rotateX(PI/2)</b> and then <b>rotateX(PI/2)</b> is the same\n as <b>rotateX(PI)</b>. If <b>rotateX()</b> is called within the\n <b>draw()</b>, the transformation is reset when the loop begins again.\n This function requires using P3D as a third parameter to <b>size()</b>\n as shown in the example above.","syntax":["rotateX(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of rotation specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","rotate_","rotateY_","rotateZ_","scale_","translate_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rotateX_0","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateX(PI/3.0);\nrect(-104, -104, 208, 208);"},"extension":"pde"}},{"node":{"name":"rotateX_1","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateX(radians(60));\nrect(-104, -104, 208, 208);"},"extension":"pde"}}]}} ''',
    'rotateY_':
        r''' {"json":{"name":"rotateY()","description":"Rotates a shape around the y-axis the amount specified by the\n <b>angle</b> parameter. Angles should be specified in radians (values\n from 0 to PI*2) or converted to radians with the <b>radians()</b>\n function. Objects are always rotated around their relative position to\n the origin and positive numbers rotate objects in a counterclockwise\n direction. Transformations apply to everything that happens after and\n subsequent calls to the function accumulates the effect. For example,\n calling <b>rotateY(PI/2)</b> and then <b>rotateY(PI/2)</b> is the same\n as <b>rotateY(PI)</b>. If <b>rotateY()</b> is called within the\n <b>draw()</b>, the transformation is reset when the loop begins again.\n This function requires using P3D as a third parameter to <b>size()</b>\n as shown in the examples above.","syntax":["rotateY(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of rotation specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","rotate_","rotateX_","rotateZ_","scale_","translate_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rotateY_0","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateY(PI/3.0);\nrect(-104, -104, 208, 208);"},"extension":"pde"}},{"node":{"name":"rotateY_1","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateY(radians(60));\nrect(-104, -104, 208, 208);"},"extension":"pde"}}]}} ''',
    'rotateZ_':
        r''' {"json":{"name":"rotateZ()","description":"Rotates a shape around the z-axis the amount specified by the\n <b>angle</b> parameter. Angles should be specified in radians (values\n from 0 to PI*2) or converted to radians with the <b>radians()</b>\n function. Objects are always rotated around their relative position to\n the origin and positive numbers rotate objects in a counterclockwise\n direction. Transformations apply to everything that happens after and\n subsequent calls to the function accumulates the effect. For example,\n calling <b>rotateZ(PI/2)</b> and then <b>rotateZ(PI/2)</b> is the same\n as <b>rotateZ(PI)</b>. If <b>rotateZ()</b> is called within the\n <b>draw()</b>, the transformation is reset when the loop begins again.\n This function requires using P3D as a third parameter to <b>size()</b>\n as shown in the examples above.","syntax":["rotateZ(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of rotation specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","rotate_","rotateX_","rotateY_","scale_","translate_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rotateZ_0","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateZ(PI/3.0);\nrect(-104, -104, 208, 208);"},"extension":"pde"}},{"node":{"name":"rotateZ_1","internal":{"content":"size(400, 400, P3D);\ntranslate(width/2, height/2);\nrotateZ(radians(60));\nrect(-104, -104, 208, 208);"},"extension":"pde"}}]}} ''',
    'rotate_':
        r''' {"json":{"name":"rotate()","description":"Rotates a shape the amount specified by the <b>angle</b> parameter.\n Angles should be specified in radians (values from 0 to TWO_PI) or\n converted to radians with the <b>radians()</b> function.\n <br/> <br/>\n Objects are always rotated around their relative position to the origin\n and positive numbers rotate objects in a clockwise direction.\n Transformations apply to everything that happens after and subsequent\n calls to the function accumulates the effect. For example, calling\n <b>rotate(HALF_PI)</b> and then <b>rotate(HALF_PI)</b> is the same as\n <b>rotate(PI)</b>. All transformations are reset when <b>draw()</b>\n begins again.\n <br/> <br/>\n Technically, <b>rotate()</b> multiplies the current transformation\n matrix by a rotation matrix. This function can be further controlled by\n the <b>pushMatrix()</b> and <b>popMatrix()</b>.","syntax":["rotate(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of rotation specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","rotateX_","rotateY_","rotateZ_","scale_","radians_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"rotate_","internal":{"content":"size(400, 400)\ntranslate(width/2, height/2);\nrotate(PI/3.0);\nrect(-104, -104, 208, 208);"},"extension":"pde"}}]}} ''',
    'round_':
        r''' {"json":{"name":"round()","description":"Calculates the integer closest to the <b>n</b> parameter. For example,\n <b>round(133.8)</b> returns the value 134.","syntax":["round(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number to round","type":["float"]}],"related":["floor_","ceil_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"round_0","internal":{"content":"float x = 9.2;  \nint rx = round(x);  // Sets 'rx' to 9\n\nfloat y = 9.5;\nint ry = round(y);  // Sets 'ry' to 10\n\nfloat z = 9.9;\nint rz = round(z);  // Sets 'rz' to 10\n\n"},"extension":"pde"}}]}} ''',
    'saturation_':
        r''' {"json":{"name":"saturation()","description":"Extracts the saturation value from a color.","syntax":["saturation(rgb)"],"category":"color","subcategory":"creating & reading","parameters":[{"name":"rgb","description":"any value of the color datatype","type":["int"]}],"related":["red_","green_","blue_","alpha_","hue_","brightness_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"saturation_","internal":{"content":"size(400, 400);\nnoStroke();\ncolorMode(HSB, 255);\ncolor c = color(0, 126, 255);\nfill(c);\nrect(60, 80, 140, 240);\nfloat value = saturation(c);  // Sets 'value' to 504\nfill(value);\nrect(200, 80, 140, 240);"},"extension":"pde"}}]}} ''',
    'saveBytes_':
        r''' {"json":{"name":"saveBytes()","description":"As the opposite of <b>loadBytes()</b>, this function will write an entire\n array of bytes to a file. The data is saved in binary format. This file is\n saved to the sketch's folder, which is opened by selecting \"Show Sketch\n Folder\" from the \"Sketch\" menu. Alternatively, the files can be saved to\n any location on the computer by using an absolute path (something that\n starts with / on Unix and Linux, or a drive letter on Windows).","syntax":["saveBytes(filename, data)"],"category":"output","subcategory":"files","parameters":[{"name":"filename","description":"name of the file to write to","type":["String"]},{"name":"data","description":"array of bytes to be written","type":["byte[]"]}],"related":["loadStrings_","loadBytes_","saveStrings_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveBytes_0","internal":{"content":"byte[] nums = { 0, 34, 5, 127, 52};\n\n// Writes the bytes to a file\nsaveBytes(\"numbers.dat\", nums);\n"},"extension":"pde"}}]}} ''',
    'saveFrame_':
        r''' {"json":{"name":"saveFrame()","description":"Saves a numbered sequence of images, one image each time the function is\n run. To save an image that is identical to the display window, run the\n function at the end of <b>draw()</b> or within mouse and key events such as\n <b>mousePressed()</b> and <b>keyPressed()</b>. Use the Movie Maker program\n in the Tools menu to combine these images to a movie.<br />\n <br />\n If <b>saveFrame()</b> is used without parameters, it will save files as\n screen-0000.tif, screen-0001.tif, and so on. You can specify the name of\n the sequence with the <b>filename</b> parameter, including hash marks\n (####), which will be replaced by the current <b>frameCount</b> value. (The\n number of hash marks is used to determine how many digits to include in the\n file names.) Append a file extension, to indicate the file format to be\n used: either TIFF (.tif), TARGA (.tga), JPEG (.jpg), or PNG (.png). Image\n files are saved to the sketch's folder, which may be opened by selecting\n \"Show Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the files can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All images saved from the main drawing window will be opaque. To save\n images without a background, use <b>createGraphics()</b>.","syntax":["saveFrame()","saveFrame(filename)"],"category":"output","subcategory":"image","parameters":[{"name":"filename","description":"any sequence of letters or numbers that ends with either \".tif\",\n          \".tga\", \".jpg\", or \".png\"","type":["String"]}],"related":["save_","createGraphics_","frameCount"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveFrame_0","internal":{"content":"int x = 0;\nvoid draw() {\n  background(204);\n  if (x < 100) {\n    line(x, 0, x, 100);\n    x = x + 1;\n  } else {\n    noLoop();\n  }\n  // Saves each frame as screen-0001.tif, screen-0002.tif, etc.\n  saveFrame(); \n}\n"},"extension":"pde"}},{"node":{"name":"saveFrame_1","internal":{"content":"int x = 0;\nvoid draw() {\n  background(204);\n  if (x < 100) {\n    line(x, 0, x, 100);\n    x = x + 1;\n  } else {\n    noLoop();\n  }\n  // Saves each frame as line-000001.png, line-000002.png, etc.\n  saveFrame(\"line-######.png\");\n}\n"},"extension":"pde"}}]}} ''',
    'saveJSONArray_':
        r''' {"json":{"name":"saveJSONArray()","description":"Writes the contents of a <b>JSONArray</b> object to a file. By default,\n this file is saved to the sketch's folder. This folder is opened by\n selecting \"Show Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the file can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["saveJSONArray(json, filename)","saveJSONArray(json, filename, options)"],"category":"output","subcategory":"files","parameters":[{"name":"json","description":"the JSONArray to save","type":["JSONArray"]},{"name":"filename","description":"the name of the file to save to","type":["String"]},{"name":"options","description":"\"compact\" and \"indent=N\", replace N with the number of spaces","type":["String"]}],"related":["JSONObject","JSONArray","loadJSONObject_","loadJSONArray_","saveJSONObject_"],"returns":"boolean","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveJSONArray_0","internal":{"content":"String[] species = { \"Capra hircus\", \"Panthera pardus\", \"Equus zebra\" };\nString[] names = { \"Goat\", \"Leopard\", \"Zebra\" };\n\nJSONArray values;\n\nvoid setup() {\n\n  values = new JSONArray();\n\n  for (int i = 0; i < species.length; i++) {\n\n    JSONObject animal = new JSONObject();\n\n    animal.setInt(\"id\", i);\n    animal.setString(\"species\", species[i]);\n    animal.setString(\"name\", names[i]);\n\n    values.setJSONObject(i, animal);\n  }\n\n  saveJSONArray(values, \"data/new.json\");\n}\n\n// Sketch saves the following to a file called \"new.json\":\n// [\n//   {\n//     \"id\": 0,\n//     \"species\": \"Capra hircus\",\n//     \"name\": \"Goat\"\n//   },\n//   {\n//     \"id\": 1,\n//     \"species\": \"Panthera pardus\",\n//     \"name\": \"Leopard\"\n//   },\n//   {\n//     \"id\": 2,\n//     \"species\": \"Equus zebra\",\n//     \"name\": \"Zebra\"\n//   }\n// ]\n"},"extension":"pde"}}]}} ''',
    'saveJSONObject_':
        r''' {"json":{"name":"saveJSONObject()","description":"Writes the contents of a <b>JSONObject</b> object to a file. By default,\n this file is saved to the sketch's folder. This folder is opened by\n selecting \"Show Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the file can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["saveJSONObject(json, filename)","saveJSONObject(json, filename, options)"],"category":"output","subcategory":"files","parameters":[{"name":"json","description":"the JSONObject to save","type":["JSONObject"]},{"name":"filename","description":"the name of the file to save to","type":["String"]},{"name":"options","description":"\"compact\" and \"indent=N\", replace N with the number of spaces","type":["String"]}],"related":["JSONObject","JSONArray","loadJSONObject_","loadJSONArray_","saveJSONArray_"],"returns":"boolean","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveJSONObject_0","internal":{"content":"JSONObject json;\n\nvoid setup() {\n\n  json = new JSONObject();\n\n  json.setInt(\"id\", 0);\n  json.setString(\"species\", \"Panthera leo\");\n  json.setString(\"name\", \"Lion\");\n\n  saveJSONObject(json, \"data/new.json\");\n}\n\n// Sketch saves the following to a file called \"new.json\":\n// {\n//   \"id\": 0,\n//   \"species\": \"Panthera leo\",\n//   \"name\": \"Lion\"\n// }\n"},"extension":"pde"}}]}} ''',
    'saveStream_':
        r''' {"json":{"name":"saveStream()","description":"Save the contents of a stream to a file in the sketch folder. This is\n basically <b>saveBytes(blah, loadBytes())</b>, but done more efficiently\n (and with less confusing syntax).<br />\n <br />\n The <b>target</b> parameter can be either a String specifying a file name,\n or, for greater control over the file location, a <b>File</b> object. (Note\n that, unlike some other functions, this will not automatically compress or\n uncompress gzip files.)","syntax":["saveStream(target, source)"],"category":"output","subcategory":"files","parameters":[{"name":"target","description":"name of the file to write to","type":["String","File"]},{"name":"source","description":"location to read from (a filename, path, or URL)","type":["String"]}],"related":["createOutput_"],"returns":"boolean or void","classanchor":null},"pdes":{"edges":[]}} ''',
    'saveStrings_':
        r''' {"json":{"name":"saveStrings()","description":"Writes an array of Strings to a file, one line per String. By default, this\n file is saved to the sketch's folder. This folder is opened by selecting\n \"Show Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the file can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n Starting with Processing 1.0, all files loaded and saved by the Processing\n API use UTF-8 encoding. In earlier releases, the default encoding for your\n platform was used, which causes problems when files are moved to other\n platforms.","syntax":["saveStrings(filename, data)"],"category":"output","subcategory":"files","parameters":[{"name":"filename","description":"filename for output","type":["String"]},{"name":"data","description":"string array to be written","type":["String[]"]}],"related":["loadStrings_","loadBytes_","saveBytes_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveStrings_0","internal":{"content":"String words = \"apple bear cat dog\";\nString[] list = split(words, ' ');\n\n// Writes the strings to a file, each on a separate line\nsaveStrings(\"nouns.txt\", list);\n"},"extension":"pde"}}]}} ''',
    'saveTable_':
        r''' {"json":{"name":"saveTable()","description":"Writes the contents of a Table object to a file. By default, this file is\n saved to the sketch's folder. This folder is opened by selecting \"Show\n Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the file can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["saveTable(table, filename)","saveTable(table, filename, options)"],"category":"output","subcategory":"files","parameters":[{"name":"table","description":"the Table object to save to a file","type":["Table"]},{"name":"filename","description":"the filename to which the Table should be saved","type":["String"]},{"name":"options","description":"can be one of \"tsv\", \"csv\", \"bin\", or \"html\"","type":["String"]}],"related":["Table","loadTable_"],"returns":"boolean","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveTable_0","internal":{"content":"Table table;\n\nvoid setup() {\n\n  table = new Table();\n  \n  table.addColumn(\"id\");\n  table.addColumn(\"species\");\n  table.addColumn(\"name\");\n  \n  TableRow newRow = table.addRow();\n  newRow.setInt(\"id\", table.getRowCount() - 1);\n  newRow.setString(\"species\", \"Panthera leo\");\n  newRow.setString(\"name\", \"Lion\");\n  \n  saveTable(table, \"data/new.csv\");\n}\n\n// Sketch saves the following to a file called \"new.csv\":\n// id,species,name\n// 0,Panthera leo,Lion\n"},"extension":"pde"}}]}} ''',
    'saveXML_':
        r''' {"json":{"name":"saveXML()","description":"Writes the contents of an XML object to a file. By default, this file is\n saved to the sketch's folder. This folder is opened by selecting \"Show\n Sketch Folder\" from the \"Sketch\" menu.<br />\n <br />\n Alternatively, the file can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All files loaded and saved by the Processing API use UTF-8 encoding.","syntax":["saveXML(xml, filename)"],"category":"output","subcategory":"files","parameters":[{"name":"xml","description":"the XML object to save to disk","type":["XML"]},{"name":"filename","description":"name of the file to write to","type":["String"]}],"related":["XML","loadXML_","parseXML_"],"returns":"boolean","classanchor":null},"pdes":{"edges":[{"node":{"name":"saveXML_0","internal":{"content":"// The following short XML file called \"mammals.xml\" is parsed \n// in the code below. It must be in the project's \"data\" folder.\n//\n// <?xml version=\"1.0\"?>\n// <mammals>\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>\n\nXML xml;\n\nvoid setup() {\n  xml = loadXML(\"mammals.xml\");\n  XML firstChild = xml.getChild(\"animal\");\n  xml.removeChild(firstChild);\n  saveXML(xml, \"subset.xml\");\n}\n\n// Sketch saves the following to a file called \"subset.xml\":\n// <?xml version=\"1.0\"?>\n// <mammals>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>"},"extension":"pde"}}]}} ''',
    'save_':
        r''' {"json":{"name":"save()","description":"Saves an image from the display window. Append a file extension to the name\n of the file, to indicate the file format to be used: either TIFF (.tif),\n TARGA (.tga), JPEG (.jpg), or PNG (.png). If no extension is included in\n the filename, the image will save in TIFF format and <b>.tif</b> will be\n added to the name. These files are saved to the sketch's folder, which may\n be opened by selecting \"Show sketch folder\" from the \"Sketch\" menu.\n Alternatively, the files can be saved to any location on the computer by\n using an absolute path (something that starts with / on Unix and Linux, or\n a drive letter on Windows).<br />\n <br />\n All images saved from the main drawing window will be opaque. To save\n images without a background, use <b>createGraphics()</b>.","syntax":["save(filename)"],"category":"output","subcategory":"image","parameters":[{"name":"filename","description":"any sequence of letters and numbers","type":["String"]}],"related":["saveFrame_","createGraphics_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"save_0","internal":{"content":"line(20, 20, 80, 80);\n// Saves a TIFF file named \"diagonal.tif\"\nsave(\"diagonal.tif\");\n// Saves a TARGA file named \"cross.tga\"\nline(80, 20, 20, 80);\nsave(\"cross.tga\");\n"},"extension":"pde"}}]}} ''',
    'scale_':
        r''' {"json":{"name":"scale()","description":"Increases or decreases the size of a shape by expanding and contracting\n vertices. Objects always scale from their relative origin to the coordinate\n system. Scale values are specified as decimal percentages. For example, the\n function call <b>scale(2.0)</b> increases the dimension of a shape by\n 200%.<br />\n <br />\n Transformations apply to everything that happens after and subsequent calls\n to the function multiply the effect. For example, calling <b>scale(2.0)</b>\n and then <b>scale(1.5)</b> is the same as <b>scale(3.0)</b>. If\n <b>scale()</b> is called within <b>draw()</b>, the transformation is reset\n when the loop begins again. Using this function with the <b>z</b> parameter\n requires using P3D as a parameter for <b>size()</b>, as shown in the third\n example above. This function can be further controlled with\n <b>pushMatrix()</b> and <b>popMatrix()</b>.","syntax":["scale(s)","scale(x, y)","scale(x, y, z)"],"category":"transform","subcategory":"","parameters":[{"name":"s","description":"percentage to scale the object","type":["float"]},{"name":"x","description":"percentage to scale the object in the x-axis","type":["float"]},{"name":"y","description":"percentage to scale the object in the y-axis","type":["float"]},{"name":"z","description":"percentage to scale the object in the z-axis","type":["float"]}],"related":["pushMatrix_","popMatrix_","translate_","rotate_","rotateX_","rotateY_","rotateZ_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"scale_0","internal":{"content":"size(400, 400);\nrect(120, 80, 200, 200);\nscale(0.5);\nrect(120, 80, 200, 200);"},"extension":"pde"}},{"node":{"name":"scale_1","internal":{"content":"size(400, 400);\nrect(120, 80, 200, 200);\nscale(0.5, 1.3);\nrect(120, 80, 200, 200);"},"extension":"pde"}},{"node":{"name":"scale_2","internal":{"content":"// Scaling in 3D requires P3D \n// as a parameter to size()\nsize(400, 400, P3D);\nnoFill();\ntranslate(width/2+48, height/2);\nbox(80, 80, 80);\nscale(2.5, 2.5, 2.5);\nbox(80, 80, 80);"},"extension":"pde"}}]}} ''',
    'screenX_':
        r''' {"json":{"name":"screenX()","description":"Takes a three-dimensional X, Y, Z position and returns the X value for\n where it will appear on a (two-dimensional) screen.","syntax":["screenX(x, y)","screenX(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["screenY_","screenZ_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"screenX_0","internal":{"content":"void setup() {\n  size(100, 100, P3D);\n}\n\nvoid draw() {\n  background(204);\n  \n  float x = mouseX;\n  float y = mouseY;\n  float z = -100;\n  \n  // Draw \"X\" at z = -100\n  stroke(255);\n  line(x-10, y-10, z, x+10, y+10, z); \n  line(x+10, y-10, z, x-10, y+10, z); \n  \n  // Draw gray line at z = 0 and same \n  // x value. Notice the parallax\n  stroke(102);\n  line(x, 0, 0, x, height, 0);\n  \n  // Draw black line at z = 0 to match \n  // the x value element drawn at z = -100 \n  stroke(0);\n  float theX = screenX(x, y, z);\n  line(theX, 0, 0, theX, height, 0);    \n} \n"},"extension":"pde"}}]}} ''',
    'screenY_':
        r''' {"json":{"name":"screenY()","description":"Takes a three-dimensional X, Y, Z position and returns the Y value for\n where it will appear on a (two-dimensional) screen.","syntax":["screenY(x, y)","screenY(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["screenX_","screenZ_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"screenY_0","internal":{"content":"void setup() {\n  size(100, 100, P3D);\n}\n\nvoid draw() {\n  background(204);\n  \n  float x = mouseX;\n  float y = mouseY;\n  float z = -100;\n  \n  // Draw \"X\" at z = -100\n  stroke(255);\n  line(x-10, y-10, z, x+10, y+10, z); \n  line(x+10, y-10, z, x-10, y+10, z); \n  \n  // Draw gray line at z = 0 and same \n  // y value. Notice the parallax\n  stroke(102);\n  line(0, y, 0, width, y, 0);\n  \n  // Draw black line at z = 0 to match \n  // the y value element drawn at z = -100 \n  stroke(0);\n  float theY = screenY(x, y, z);\n  line(0, theY, 0, width, theY, 0);    \n}  \n"},"extension":"pde"}}]}} ''',
    'screenZ_':
        r''' {"json":{"name":"screenZ()","description":"Takes a three-dimensional X, Y, Z position and returns the Z value for\n where it will appear on a (two-dimensional) screen.","syntax":["screenZ(x, y, z)"],"category":"lights_camera","subcategory":"coordinates","parameters":[{"name":"x","description":"3D x-coordinate to be mapped","type":["float"]},{"name":"y","description":"3D y-coordinate to be mapped","type":["float"]},{"name":"z","description":"3D z-coordinate to be mapped","type":["float"]}],"related":["screenX_","screenY_"],"returns":"float","classanchor":null},"pdes":{"edges":[]}} ''',
    'second_':
        r''' {"json":{"name":"second()","description":"Processing communicates with the clock on your computer. The\n <b>second()</b> function returns the current second as a value from 0 - 59.","syntax":["second()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","minute_","hour_","day_","month_","year_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"second_0","internal":{"content":"void draw() {\n  background(204);\n  int s = second();  // Values from 0 - 59\n  int m = minute();  // Values from 0 - 59\n  int h = hour();    // Values from 0 - 23\n  line(s, 0, s, 33);\n  line(m, 33, m, 66);\n  line(h, 66, h, 100);\n}\n"},"extension":"pde"}}]}} ''',
    'selectFolder_':
        r''' {"json":{"name":"selectFolder()","description":"Opens a platform-specific file chooser dialog to select a folder.\n After the selection is made, the selection will be passed to the\n 'callback' function. If the dialog is closed or canceled, null\n will be sent to the function, so that the program is not waiting\n for additional input. The callback is necessary because of how\n threading works.","syntax":["selectFolder(prompt, callback)","selectFolder(prompt, callback, file)","selectFolder(prompt, callback, file, callbackObject)"],"category":"input","subcategory":"files","parameters":[{"name":"prompt","description":"message to the user","type":["String"]},{"name":"callback","description":"name of the method to be called when the selection is made","type":["String"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"selectFolder_0","internal":{"content":"void setup() {\n  selectFolder(\"Select a folder to process:\", \"folderSelected\");\n}\n\nvoid folderSelected(File selection) {\n  if (selection == null) {\n    println(\"Window was closed or the user hit cancel.\");\n  } else {\n    println(\"User selected \" + selection.getAbsolutePath());\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'selectInput_':
        r''' {"json":{"name":"selectInput()","description":"Open a platform-specific file chooser dialog to select a file for input.\n After the selection is made, the selected File will be passed to the\n 'callback' function. If the dialog is closed or canceled, <b>null</b> will be sent\n to the function, so that the program is not waiting for additional input.\n The callback is necessary because of how threading works.\n\n ","syntax":["selectInput(prompt, callback)","selectInput(prompt, callback, file)","selectInput(prompt, callback, file, callbackObject)"],"category":"input","subcategory":"files","parameters":[{"name":"prompt","description":"message to the user","type":["String"]},{"name":"callback","description":"name of the method to be called when the selection is made","type":["String"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"selectInput_0","internal":{"content":"void setup() {\n  selectInput(\"Select a file to process:\", \"fileSelected\");\n}\n\nvoid fileSelected(File selection) {\n  if (selection == null) {\n    println(\"Window was closed or the user hit cancel.\");\n  } else {\n    println(\"User selected \" + selection.getAbsolutePath());\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'selectOutput_':
        r''' {"json":{"name":"selectOutput()","description":"Opens a platform-specific file chooser dialog to select a file for output.\n After the selection is made, the selected File will be passed to the\n 'callback' function. If the dialog is closed or canceled, <b>null</b> will be sent\n to the function, so that the program is not waiting for additional input.\n The callback is necessary because of how threading works.","syntax":["selectOutput(prompt, callback)","selectOutput(prompt, callback, file)","selectOutput(prompt, callback, file, callbackObject)"],"category":"output","subcategory":"files","parameters":[{"name":"prompt","description":"message to the user","type":["String"]},{"name":"callback","description":"name of the method to be called when the selection is made","type":["String"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"selectOutput_0","internal":{"content":"void setup() {\n  selectOutput(\"Select a file to write to:\", \"fileSelected\");\n}\n\nvoid fileSelected(File selection) {\n  if (selection == null) {\n    println(\"Window was closed or the user hit cancel.\");\n  } else {\n    println(\"User selected \" + selection.getAbsolutePath());\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'semicolon':
        r''' {"json":{"name":"; (semicolon)","description":"A statement terminator which separates elements of the program. A statement is a complete instruction to the computer and the semicolon is used to separate instructions (this is similar to the period \".\" in written English). Semicolons are also used to separate the different elements of a <b>for</b> structure. \n","syntax":["statement;"],"category":"structure","subcategory":"","parameters":[{"name":"statement","description":"a single statement to execute","type":[]}],"related":["for"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"semicolon_0","internal":{"content":"int a;       // Declaration statement\na = 30;      // Assignment statement\nprintln(i);  // Function statement\n"},"extension":"pde"}}]}} ''',
    'setLocation_':
        r''' {"json":{"name":"setLocation()","description":"The <b>setLocation()</b> function defines the position of the Processing sketch in relation to the upper-left corner of the computer screen.\n<br /><br />\nThere are more features of PSurface documented in the <a href=\"http://processing.github.io/processing-javadocs/core/processing/core/PSurfaceNone.html\">Processing JavaDoc.</a> \n","syntax":["surface.setLocation(x, y)"],"category":"structure","subcategory":"","parameters":[{"name":"x","description":"int: x-coordinate of the surface","type":[]},{"name":"y","description":"int: y-coordinate of the surface","type":[]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"setLocation_0","internal":{"content":"void setup() {\n  size(200, 200);\n  surface.setTitle(\"Hello World!\");\n  surface.setResizable(true);\n  surface.setLocation(100, 100);\n}\n\nvoid draw() {\n  background(204);\n  line(0, 0, width, height);\n  line(width, 0, 0, height); \n}\n"},"extension":"pde"}}]}} ''',
    'setResizable_':
        r''' {"json":{"name":"setResizable()","description":"By default, Processing sketches can't be resized. When <b>surface.setResizable(true)</b> is used within a sketch, the window can be resized while it's running.\n<br /><br />\nThere are more features of PSurface documented in the <a href=\"http://processing.github.io/processing-javadocs/core/processing/core/PSurfaceNone.html\">Processing JavaDoc.</a> \n","syntax":["surface.setResizable(resizable)"],"category":"structure","subcategory":"","parameters":[{"name":"resizable","description":"boolean: true to make the surface resizable","type":[]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"setResizable_0","internal":{"content":"void setup() {\n  size(200, 200);\n  surface.setTitle(\"Hello World!\");\n  surface.setResizable(true);\n  surface.setLocation(100, 100);\n}\n\nvoid draw() {\n  background(204);\n  line(0, 0, width, height);\n  line(width, 0, 0, height); \n}\n"},"extension":"pde"}}]}} ''',
    'setTitle_':
        r''' {"json":{"name":"setTitle()","description":"The <b>setTitle()</b> function defines the title to appear at the top of the sketch window.\n<br /><br />\nThere are more features of PSurface documented in the <a href=\"http://processing.github.io/processing-javadocs/core/processing/core/PSurfaceNone.html\">Processing JavaDoc.</a> \n","syntax":["surface.setTitle(title)"],"category":"structure","subcategory":"","parameters":[{"name":"title","description":"String: name of the window","type":[]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"setTitle_0","internal":{"content":"void setup() {\n  size(200, 200);\n  surface.setTitle(\"Hello World!\");\n  surface.setResizable(true);\n  surface.setLocation(100, 100);\n}\n\nvoid draw() {\n  background(204);\n  line(0, 0, width, height);\n  line(width, 0, 0, height); \n}\n"},"extension":"pde"}}]}} ''',
    'set_':
        r''' {"json":{"name":"set()","description":"Changes the color of any pixel or writes an image directly into the\n display window.<br />\n <br />\n The <b>x</b> and <b>y</b> parameters specify the pixel to change and the\n <b>color</b> parameter specifies the color value. The color parameter is\n affected by the current color mode (the default is RGB values from 0 to\n 255). When setting an image, the <b>x</b> and <b>y</b> parameters define\n the coordinates for the upper-left corner of the image, regardless of\n the current <b>imageMode()</b>.\n <br /><br />\n Setting the color of a single pixel with <b>set(x, y)</b> is easy, but\n not as fast as putting the data directly into <b>pixels[]</b>. The\n equivalent statement to <b>set(x, y, #000000)</b> using <b>pixels[]</b>\n is <b>pixels[y*width+x] = #000000</b>. See the reference for\n <b>pixels[]</b> for more information.","syntax":["set(x, y, c)","set(x, y, img)"],"category":"image","subcategory":"pixels","parameters":[{"name":"x","description":"x-coordinate of the pixel","type":["int"]},{"name":"y","description":"y-coordinate of the pixel","type":["int"]},{"name":"c","description":"any value of the color datatype","type":["int"]},{"name":"img","description":"image to copy into the original image","type":["PImage"]}],"related":["get_","pixels","copy_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"set_0","internal":{"content":"size(400,400);\ncolor black = color(0);\nset(120, 80, black);\nset(340, 80, black);\nset(340, 300, black);\nset(120, 300, black);\n"},"extension":"pde"}},{"node":{"name":"set_1","internal":{"content":"size(400,400);\n\nfor (int i = 120; i < width-60; i++) {\n  for (int j = 80; j < height-100; j++) {\n    color c = color(j, i, 0);    \n    set(i, j, c);\n  }\n}"},"extension":"pde"}},{"node":{"name":"set_2","internal":{"content":"size(400,400);\nPImage myImage = loadImage(\"flower.jpg\");\nset(0, 0, myImage);\nline(0, 0, width, height);\nline(0, height, width, 0);"},"extension":"pde"}}]}} ''',
    'settings_':
        r''' {"json":{"name":"settings()","description":"The <b>settings()</b> function is new with Processing 3.0.\n It's not needed in most sketches. It's only useful when it's\n absolutely necessary to define the parameters to <b>size()</b>\n with a variable. Alternately, the <b>settings()</b> function\n is necessary when using Processing code outside of the\n Processing Development Environment (PDE). For example, when\n using the Eclipse code editor, it's necessary to use\n <b>settings()</b> to define the <b>size()</b> and\n <b>smooth()</b> values for a sketch.</b>.\n <br /> <br />\n The <b>settings()</b> method runs before the sketch has been\n set up, so other Processing functions cannot be used at that\n point. For instance, do not use loadImage() inside settings().\n The settings() method runs \"passively\" to set a few variables,\n compared to the <b>setup()</b> command that call commands in\n the Processing API.","syntax":["settings()"],"category":"environment","subcategory":"","parameters":[],"related":["fullScreen_","setup_","size_","smooth_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"settings_0","internal":{"content":"// Run code at full screen using the default renderer\n\nint x = 0;\n\nvoid settings() {\n  fullScreen();\n}\n\nvoid setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"settings_1","internal":{"content":"// Run code at full screen using the P2D renderer\n// on screen 2 of a multiple monitor hardware setup\n\nint x = 0;\n\nvoid settings() {\n  fullScreen(P2D, 2);\n}\n\nvoid setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"settings_2","internal":{"content":"// Run code at full screen using the P2D renderer\n// across all screens on a multiple monitor setup\n\nint x = 0;\n\nvoid settings() {\n  fullScreen(P2D, SPAN);\n}\n\nvoid setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}},{"node":{"name":"settings_3","internal":{"content":"int w = 200;\nint h = 200;\nint x = 0;\n\nvoid settings() {\n  size(w, h);\n}\n\nvoid setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, 10, 1, 180); \n  x = x + 2;\n}\n"},"extension":"pde"}}]}} ''',
    'setup_':
        r''' {"json":{"name":"setup()","description":"The <b>setup()</b> function is run once, when the program starts. It's used\n to define initial environment properties such as screen size and to load media\n such as images and fonts as the program starts. There can only be one\n <b>setup()</b> function for each program and it shouldn't be called again\n after its initial execution.<br />\n <br />\n If the sketch is a different dimension than the default, the <b>size()</b>\n function or <b>fullScreen()</b> function must be the first line in\n <b>setup()</b>.<br />\n <br />\n Note: Variables declared within <b>setup()</b> are not accessible within\n other functions, including <b>draw()</b>.","syntax":["setup()"],"category":"structure","subcategory":"","parameters":[],"related":["size_","loop_","noLoop_","draw_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"setup_0","internal":{"content":"int x = 0;\n\nvoid setup() {\n  size(200, 200);\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, 10, 2, 80); \n  x = x + 1;\n}\n"},"extension":"pde"}},{"node":{"name":"setup_1","internal":{"content":"int x = 0;\n\nvoid setup() {\n  fullScreen();\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nvoid draw() {\n  rect(x, height*0.2, 1, height*0.6); \n  x = x + 2;\n}\n"},"extension":"pde"}}]}} ''',
    'shader_':
        r''' {"json":{"name":"shader()","description":"Applies the shader specified by the parameters. It's compatible with\n the P2D and P3D renderers, but not with the default renderer.","syntax":["shader(shader)","shader(shader, kind)"],"category":"rendering","subcategory":"shaders","parameters":[{"name":"shader","description":"name of shader file","type":["PShader"]},{"name":"kind","description":"type of shader, either POINTS, LINES, or TRIANGLES","type":["int"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shader_0","internal":{"content":"PShader edges;  \nPImage img;\n    \nvoid setup() {\n  size(640, 360, P2D);\n  img = loadImage(\"leaves.jpg\");      \n  edges = loadShader(\"edges.glsl\");\n}\n\nvoid draw() {\n  shader(edges);\n  image(img, 0, 0);\n}\n"},"extension":"pde"}}]}} ''',
    'shapeMode_':
        r''' {"json":{"name":"shapeMode()","description":"Modifies the location from which shapes draw. The default mode is\n <b>shapeMode(CORNER)</b>, which specifies the location to be the upper\n left corner of the shape and uses the third and fourth parameters of\n <b>shape()</b> to specify the width and height. The syntax\n <b>shapeMode(CORNERS)</b> uses the first and second parameters of\n <b>shape()</b> to set the location of one corner and uses the third and\n fourth parameters to set the opposite corner. The syntax\n <b>shapeMode(CENTER)</b> draws the shape from its center point and uses\n the third and forth parameters of <b>shape()</b> to specify the width\n and height. The parameter must be written in \"ALL CAPS\" because\n Processing is a case sensitive language.","syntax":["shapeMode(mode)"],"category":"shape","subcategory":"loading & displaying","parameters":[{"name":"mode","description":"either CORNER, CORNERS, CENTER","type":["int"]}],"related":["PShape","shape_","rectMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shapeMode_","internal":{"content":"\nPShape bot; \n\nvoid setup() {\n  size(400, 400);\n  bot = loadShape(\"bot.svg\");\n}\n\nvoid draw() {\n  shapeMode(CENTER);\n  shape(bot, 140, 140, 200, 200);\n  shapeMode(CORNER);\n  shape(bot, 140, 140, 200, 200);\n}"},"extension":"pde"}}]}} ''',
    'shape_':
        r''' {"json":{"name":"shape()","description":"Draws shapes to the display window. Shapes must be in the sketch's \"data\"\n directory to load correctly. Select \"Add file...\" from the \"Sketch\" menu to\n add the shape. Processing currently works with SVG, OBJ, and custom-created\n shapes. The <b>shape</b> parameter specifies the shape to display and the\n coordinate parameters define the location of the shape from its upper-left\n corner. The shape is displayed at its original size unless the <b>c</b> and\n <b>d</b> parameters specify a different size. The <b>shapeMode()</b> function\n can be used to change the way these parameters are interpreted.","syntax":["shape(shape)","shape(shape, x, y)","shape(shape, a, b, c, d)"],"category":"shape","subcategory":"loading & displaying","parameters":[{"name":"shape","description":"the shape to display","type":["PShape"]},{"name":"x","description":"x-coordinate of the shape","type":["float"]},{"name":"y","description":"y-coordinate of the shape","type":["float"]},{"name":"a","description":"x-coordinate of the shape","type":["float"]},{"name":"b","description":"y-coordinate of the shape","type":["float"]},{"name":"c","description":"width to display the shape","type":["float"]},{"name":"d","description":"height to display the shape","type":["float"]}],"related":["PShape","loadShape_","shapeMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shape_","internal":{"content":"PShape s;\n\nvoid setup() {\n  size(400,400);\n  s = loadShape(\"bot.svg\");\n}\n\nvoid draw() {\n  shape(s, 40, 40, 320, 320);\n}"},"extension":"pde"}}]}} ''',
    'shearX_':
        r''' {"json":{"name":"shearX()","description":"Shears a shape around the x-axis the amount specified by the\n <b>angle</b> parameter. Angles should be specified in radians (values\n from 0 to PI*2) or converted to radians with the <b>radians()</b>\n function. Objects are always sheared around their relative position to\n the origin and positive numbers shear objects in a clockwise direction.\n Transformations apply to everything that happens after and subsequent\n calls to the function accumulates the effect. For example, calling\n <b>shearX(PI/2)</b> and then <b>shearX(PI/2)</b> is the same as\n <b>shearX(PI)</b>. If <b>shearX()</b> is called within the\n <b>draw()</b>, the transformation is reset when the loop begins again.\n <br/> <br/>\n Technically, <b>shearX()</b> multiplies the current transformation\n matrix by a rotation matrix. This function can be further controlled by\n the <b>pushMatrix()</b> and <b>popMatrix()</b> functions.","syntax":["shearX(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of shear specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","shearY_","scale_","translate_","radians_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shearX_","internal":{"content":"size(400, 400);\ntranslate(width/4, height/4);\nshearX(PI/4.0);\nrect(0, 0, 120, 120);"},"extension":"pde"}}]}} ''',
    'shearY_':
        r''' {"json":{"name":"shearY()","description":"Shears a shape around the y-axis the amount specified by the\n <b>angle</b> parameter. Angles should be specified in radians (values\n from 0 to PI*2) or converted to radians with the <b>radians()</b>\n function. Objects are always sheared around their relative position to\n the origin and positive numbers shear objects in a clockwise direction.\n Transformations apply to everything that happens after and subsequent\n calls to the function accumulates the effect. For example, calling\n <b>shearY(PI/2)</b> and then <b>shearY(PI/2)</b> is the same as\n <b>shearY(PI)</b>. If <b>shearY()</b> is called within the\n <b>draw()</b>, the transformation is reset when the loop begins again.\n <br/> <br/>\n Technically, <b>shearY()</b> multiplies the current transformation\n matrix by a rotation matrix. This function can be further controlled by\n the <b>pushMatrix()</b> and <b>popMatrix()</b> functions.","syntax":["shearY(angle)"],"category":"transform","subcategory":"","parameters":[{"name":"angle","description":"angle of shear specified in radians","type":["float"]}],"related":["popMatrix_","pushMatrix_","shearX_","scale_","translate_","radians_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shearY_","internal":{"content":"size(400, 400);\ntranslate(width/4, height/4);\nshearY(PI/4.0);\nrect(0, 0, 120, 120);"},"extension":"pde"}}]}} ''',
    'shininess_':
        r''' {"json":{"name":"shininess()","description":"Sets the amount of gloss in the surface of shapes. Used in combination\n with <b>ambient()</b>, <b>specular()</b>, and <b>emissive()</b> in\n setting the material properties of shapes.","syntax":["shininess(shine)"],"category":"lights_camera","subcategory":"material properties","parameters":[{"name":"shine","description":"degree of shininess","type":["float"]}],"related":["emissive_","ambient_","specular_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"shininess_","internal":{"content":"size(400, 400, P3D); \nbackground(0);\nnoStroke();\nbackground(0); \nfill(0, 51, 102); \nambientLight(102, 102, 102);\nlightSpecular(204, 204, 204);\ndirectionalLight(102, 102, 102, 0, 0, -1);\nspecular(255, 255, 255);\ntranslate(120, 200, 0);\nshininess(1.0);\nsphere(80);  // Left sphere\ntranslate(160, 0, 0); \nshininess(5.0); \nsphere(80);  // Right sphere"},"extension":"pde"}}]}} ''',
    'shorten_':
        r''' {"json":{"name":"shorten()","description":"Decreases an array by one element and returns the shortened array.\n <br/> <br/>\n When using an array of objects, the data returned from the function must\n be cast to the object array's data type. For example: <em>SomeClass[]\n items = (SomeClass[]) shorten(originalArray)</em>.","syntax":["shorten(list)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"array to shorten","type":["boolean[]","byte[]","char[]","int[]","float[]","String[]","Object"]}],"related":["append_","expand_"],"returns":"boolean[], byte[], char[], int[], float[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"shorten_0","internal":{"content":"String[] sa1 = { \"OH \", \"NY \", \"CA \"}; \nString[] sa2 = shorten(sa1);\nprintln(sa1);  // 'sa1' still contains OH, NY, CA\nprintln(sa2);  // 'sa2' now contains OH, NY\n"},"extension":"pde"}}]}} ''',
    'sin_':
        r''' {"json":{"name":"sin()","description":"Calculates the sine of an angle. This function expects the values of the\n <b>angle</b> parameter to be provided in radians (values from 0 to\n 6.28). Values are returned in the range -1 to 1.","syntax":["sin(angle)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"angle","description":"an angle in radians","type":["float"]}],"related":["cos_","tan_","radians_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"sin","internal":{"content":"size(400, 400);\nfloat a = 0.0;\nfloat inc = TWO_PI/25.0;\n\nfor (int i = 0; i < 400; i=i+16) {\n  line(i, 200, i, 200+sin(a)*160.0);\n  a = a + inc;\n}"},"extension":"pde"}}]}} ''',
    'size_':
        r''' {"json":{"name":"size()","description":"Defines the dimension of the display window width and height in units of\n pixels. In a program that has the <b>setup()</b> function, the\n <b>size()</b> function must be the first line of code inside\n <b>setup()</b>, and the <b>setup()</b> function must appear in the code tab\n with the same name as your sketch folder.<br />\n <br />\n The built-in variables <b>width</b> and <b>height</b> are set by the\n parameters passed to this function. For example, running <b>size(640,\n 480)</b> will assign 640 to the <b>width</b> variable and 480 to the height\n <b>variable</b>. If <b>size()</b> is not used, the window will be given a\n default size of 100 x 100 pixels.<br />\n <br />\n The <b>size()</b> function can only be used once inside a sketch, and it\n cannot be used for resizing.<br />\n <br />\n As of Processing 3, to run a sketch at the full dimensions of a screen, use\n the <b>fullScreen()</b> function, rather than the older way of using\n <b>size(displayWidth, displayHeight)</b>.<br />\n <br />\n The maximum width and height is limited by your operating system, and is\n usually the width and height of your actual screen. On some machines it may\n simply be the number of pixels on your current screen, meaning that a\n screen of 800 x 600 could support <b>size(1600, 300)</b>, since that is the\n same number of pixels. This varies widely, so you'll have to try different\n rendering modes and sizes until you get what you're looking for. If you\n need something larger, use <b>createGraphics</b> to create a non-visible\n drawing surface.<br />\n <br />\n The minimum width and height is around 100 pixels in each direction. This\n is the smallest that is supported across Windows, macOS, and Linux. We\n enforce the minimum size so that sketches will run identically on different\n machines. <br />\n The <b>renderer</b> parameter selects which rendering engine to use. For\n example, if you will be drawing 3D shapes, use <b>P3D</b>. In addition to\n the default renderer, other renderers are:<br />\n <br />\n <b>P2D</b> (Processing 2D): 2D graphics renderer that makes use of\n OpenGL-compatible graphics hardware.<br />\n <br />\n <b>P3D</b> (Processing 3D): 3D graphics renderer that makes use of\n OpenGL-compatible graphics hardware.<br />\n <br />\n <b>FX2D</b> (JavaFX 2D): A 2D renderer that uses JavaFX, which may be\n faster for some applications, but has some compatibility quirks. <br />\n <b>PDF</b>: The PDF renderer draws 2D graphics directly to an Acrobat PDF\n file. This produces excellent results when you need vector shapes for\n high-resolution output or printing. You must first use Import Library\n &rarr; PDF to make use of the library. More information can be found in the\n PDF library reference.<br />\n <br />\n <b>SVG</b>: The SVG renderer draws 2D graphics directly to an SVG file.\n This is great for importing into other vector programs or using for digital\n fabrication. You must first use Import Library &rarr; SVG Export to make\n use of the library.<br />\n <br />\n As of Processing 3.0, to use variables as the parameters to <b>size()</b>\n function, place the <b>size()</b> function within the <b>settings()</b>\n function (instead of <b>setup()</b>). There is more information about this\n on the <b>settings()</b> reference page.<br />\n <br />\n\n ","syntax":["size(width, height)","size(width, height, renderer)"],"category":"environment","subcategory":"","parameters":[{"name":"width","description":"width of the display window in units of pixels","type":["int"]},{"name":"height","description":"height of the display window in units of pixels","type":["int"]}],"related":["width","height","setup_","settings_","fullScreen_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"size_2","internal":{"content":"\t\nsize(150, 200, P3D);  // Specify P3D renderer\nbackground(153);\n\n// With P3D, we can use z (depth) values...\nline(0, 0, 0, width, height, -100);\nline(width, 0, 0, width, height, -100);\nline(0, height, 0, width, height, -100);\n\n//...and 3D-specific functions, like box()\ntranslate(width/2, height/2);\nrotateX(PI/6);\nrotateY(PI/6);\nbox(35);"},"extension":"pde"}},{"node":{"name":"size_1","internal":{"content":"void setup() {\n  size(320, 240);\n}\n\nvoid draw() {\n  background(153);\n  line(0, 0, width, height);\n}"},"extension":"pde"}},{"node":{"name":"size_0","internal":{"content":"\t\nsize(200, 100);\nbackground(153);\nline(0, 0, width, height);"},"extension":"pde"}}]}} ''',
    'smooth_':
        r''' {"json":{"name":"smooth()","description":"Draws all geometry with smooth (anti-aliased) edges.\n This behavior is the default, so <b>smooth()</b> only needs\n to be used when a program needs to set the smoothing\n in a different way. The level parameter increases\n the amount of smoothness. This is the level of over\n sampling applied to the graphics buffer.\n\n With the P2D and P3D renderers, <b>smooth(2)</b> is the\n default, this is called \"2x anti-aliasing.\" The code\n <b>smooth(4)</b> is used for 4x anti-aliasing and <b>smooth(8)</b>\n is specified for \"8x anti-aliasing.\" The maximum\n anti-aliasing level is determined by the hardware of\n the machine that is running the software, so <b>smooth(4)</b>\n and <b>smooth(8)</b> will not work with every computer.\n\n The default renderer uses <b>smooth(3)</b> by default. This\n is bicubic smoothing. The other option for the default\n renderer is <b>smooth(2)</b>, which is bilinear smoothing.\n\n With Processing 3.0, <b>smooth()</b> is different than before.\n It was common to use <b>smooth()</b> and <b>noSmooth()</b> to turn on\n and off antialiasing within a sketch. Now, because of\n how the software has changed, <b>smooth()</b> can only be set\n once within a sketch. It can be used either at the top\n of a sketch without a <b>setup()</b>, or after the <b>size()</b>\n function when used in a sketch with <b>setup()</b>. The\n <b>noSmooth()</b> function also follows the same rules.\n\n When <b>smooth()</b> is used with a PGraphics object, it should\n be run right after the object is created with\n <b>createGraphics()</b>, as shown in the Reference in the third\n example.","syntax":["smooth(level)"],"category":"environment","subcategory":"","parameters":[{"name":"level","description":"either 2, 3, 4, or 8 depending on the renderer","type":["int"]}],"related":[],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"smooth_0","internal":{"content":"\t\nvoid setup() {\n  size(400, 400);\n  smooth(2);\n  noStroke();\n}\n\nvoid draw() {\n  background(0);\n  ellipse(120, 192, 144, 144);\n  ellipse(280, 192, 144, 144);\n}\n"},"extension":"pde"}},{"node":{"name":"smooth_1","internal":{"content":"int x = 0;\n\nvoid setup() {\n  fullScreen(P2D, SPAN);\n  smooth(4);\n}\n\nvoid draw() {\n  background(0);\n  ellipse(x, height/2, height/4, height/4);\n  x += 1;\n}"},"extension":"pde"}},{"node":{"name":"smooth_2","internal":{"content":"PGraphics pg;\nint x = 0;\n\nvoid setup() {\n  fullScreen(P2D);\n  pg = createGraphics(width, height, P2D);\n  pg.smooth(4);\n}\n\nvoid draw() {\n  pg.beginDraw();\n  pg.background(0);\n  pg.ellipse(x, height/2, height/4, height/4);\n  pg.endDraw();\n  image(pg, 0, 0);\n  x += 1;\n}"},"extension":"pde"}}]}} ''',
    'sort_':
        r''' {"json":{"name":"sort()","description":"Sorts an array of numbers from smallest to largest, or puts an array of\n words in alphabetical order. The original array is not modified; a\n re-ordered array is returned. The <b>count</b> parameter states the number\n of elements to sort. For example, if there are 12 elements in an array and\n <b>count</b> is set to 5, only the first 5 elements in the array will be\n sorted. <!--As of release 0126, the alphabetical ordering is case\n insensitive.-->","syntax":["sort(list)","sort(list, count)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"array to sort","type":["byte[]","char[]","int[]","float[]","String[]"]},{"name":"count","description":"number of elements to sort, starting from 0","type":["int"]}],"related":["reverse_"],"returns":"byte[], char[], int[], float[], or String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"sort_1","internal":{"content":"String[] s = { \"deer\", \"elephant\", \"bear\", \"aardvark\", \"cat\" };\ns = sort(s);\nprintln(s);\n// Prints the contents of the sorted array:\n// [0] \"aardvark\"\n// [1] \"bear\"\n// [2] \"cat\"\n// [3] \"deer\"\n// [4] \"elephant\"\n"},"extension":"pde"}},{"node":{"name":"sort_0","internal":{"content":"float[] a = { 3.4, 3.6, 2, 0, 7.1 };\na = sort(a);\nprintln(a);\n// Prints the contents of the sorted array:\n// [0] 0.0\n// [1] 2.0\n// [2] 3.4\n// [3] 3.6\n// [4] 7.1\n"},"extension":"pde"}},{"node":{"name":"sort_2","internal":{"content":"String[] s = { \"deer\", \"elephant\", \"bear\", \"aardvark\", \"cat\" };\ns = sort(s, 3);\nprintln(s);\n// Prints the contents of the array, with the first 3 elements sorted:\n// [0] \"bear\"\n// [1] \"deer\"\n// [2] \"elephant\"\n// [3] \"aardvark\"\n// [4] \"cat\"\n"},"extension":"pde"}}]}} ''',
    'specular_':
        r''' {"json":{"name":"specular()","description":"Sets the specular color of the materials used for shapes drawn to the\n screen, which sets the color of highlights. Specular refers to light\n which bounces off a surface in a preferred direction (rather than\n bouncing in all directions like a diffuse light). Used in combination\n with <b>emissive()</b>, <b>ambient()</b>, and <b>shininess()</b> in\n setting the material properties of shapes.","syntax":["specular(rgb)","specular(gray)","specular(v1, v2, v3)"],"category":"lights_camera","subcategory":"material properties","parameters":[{"name":"rgb","description":"color to set","type":["int"]},{"name":"gray","description":"value between black and white, by default 0 to 255","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["lightSpecular_","ambient_","emissive_","shininess_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"specular_","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\nbackground(0);\nfill(0, 51, 102);\nlightSpecular(255, 255, 255);\ndirectionalLight(204, 204, 204, 0, 0, -1);\ntranslate(80, 200, 0);\nspecular(255, 255, 255);\nsphere(120);\ntranslate(240, 0, 0);\nspecular(204, 102, 0);\nsphere(120);"},"extension":"pde"}}]}} ''',
    'sphereDetail_':
        r''' {"json":{"name":"sphereDetail()","description":"Controls the detail used to render a sphere by adjusting the number of\n vertices of the sphere mesh. The default resolution is 30, which creates\n a fairly detailed sphere definition with vertices every 360/30 = 12\n degrees. If you're going to render a great number of spheres per frame,\n it is advised to reduce the level of detail using this function. The\n setting stays active until <b>sphereDetail()</b> is called again with a\n new parameter and so should <i>not</i> be called prior to every\n <b>sphere()</b> statement, unless you wish to render spheres with\n different settings, e.g. using less detail for smaller spheres or ones\n further away from the camera. To control the detail of the horizontal\n and vertical resolution independently, use the version of the functions\n with two parameters.\n\n\n ","syntax":["sphereDetail(res)","sphereDetail(ures, vres)"],"category":"shape","subcategory":"3d primitives","parameters":[{"name":"res","description":"number of segments (minimum 3) used per full circle revolution","type":["int"]},{"name":"ures","description":"number of segments used longitudinally per full circle revolution","type":["int"]},{"name":"vres","description":"number of segments used latitudinally from top to bottom","type":["int"]}],"related":["sphere_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"sphereDetail_0","internal":{"content":"void setup() {\n  size(100, 100, P3D); \n}\n\nvoid draw() {\n  background(200);\n  stroke(255, 50);\n  translate(50, 50, 0);\n  rotateX(mouseY * 0.05);\n  rotateY(mouseX * 0.05);\n  fill(mouseX * 2, 0, 160);\n  sphereDetail(mouseX / 4);\n  sphere(40);\n}\n"},"extension":"pde"}}]}} ''',
    'sphere_':
        r''' {"json":{"name":"sphere()","description":"A sphere is a hollow ball made from tessellated triangles.\n\n\n ","syntax":["sphere(r)"],"category":"shape","subcategory":"3d primitives","parameters":[{"name":"r","description":"the radius of the sphere","type":["float"]}],"related":["sphereDetail_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"sphere_","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nlights();\ntranslate(232, 192, 0);\nsphere(112);"},"extension":"pde"}}]}} ''',
    'splice_':
        r''' {"json":{"name":"splice()","description":"Inserts a value or an array of values into an existing array. The first two\n parameters must be arrays of the same datatype. The first parameter\n specifies the initial array to be modified, and the second parameter\n defines the data to be inserted. The third parameter is an index value\n which specifies the array position from which to insert data. (Remember\n that array index numbering starts at zero, so the first position is 0, the\n second position is 1, and so on.)<br />\n <br />\n When splicing an array of objects, the data returned from the function must\n be cast to the object array's data type. For example: <em>SomeClass[] items\n = (SomeClass[]) splice(array1, array2, index)</em>","syntax":["splice(list, value, index)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"array to splice into","type":["boolean[]","byte[]","char[]","int[]","float[]","String[]","Object"]},{"name":"value","description":"value to be spliced in","type":["boolean","boolean[]","byte","byte[]","char","char[]","int","int[]","float","float[]","String","String[]","Object"]},{"name":"index","description":"position in the array from which to insert data","type":["int"]}],"related":["concat_","subset_"],"returns":"boolean[], byte[], char[], int[], float[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"splice_0","internal":{"content":"String[] a = { \"OH\", \"NY\", \"CA\" };\na = splice(a, \"KY\", 1);  // Splice one value into an array\nprintln(a);\n// Prints the following array contents to the console:\n// [0] \"OH\"\n// [1] \"KY\"\n// [2] \"NY\"\n// [3] \"CA\"\n\nprintln();  // Prints a blank line\n\nString[] b = { \"VA\", \"CO\", \"IL\" };\na = splice(a, b, 2);  // Splice one array of values into another\nprintln(a);\n// Prints the following array contents to the console:\n// [0] \"OH\"\n// [1] \"KY\"\n// [2] \"VA\"\n// [3] \"CO\"\n// [4] \"IL\"\n// [5] \"NY\"\n// [6] \"CA\"\n"},"extension":"pde"}}]}} ''',
    'splitTokens_':
        r''' {"json":{"name":"splitTokens()","description":"The <b>splitTokens()</b> function splits a <b>String</b> at one or many character\n delimiters or \"tokens\". The <b>delim</b> parameter specifies the character\n or characters to be used as a boundary.<br />\n <br />\n If no <b>delim</b> characters are specified, any whitespace character is\n used to split. Whitespace characters include tab (&#92;t), line feed\n (&#92;n), carriage return (&#92;r), form feed (&#92;f), and space.<br />\n <br />\n After using this function to parse incoming data, it is common to convert\n the data from Strings to integers or floats by using the datatype\n conversion functions <b>int()</b> and <b>float()</b>.","syntax":["splitTokens(value)","splitTokens(value, delim)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"value","description":"the String to be split","type":["String"]},{"name":"delim","description":"list of individual characters that will be used as separators","type":["String"]}],"related":["split_","join_","trim_"],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"splitTokens_0","internal":{"content":"String t = \"a b\";\nString[] q = splitTokens(t);\nprintln(q[0]);  // Prints \"a\"\nprintln(q[1]);  // Prints \"b\"\n"},"extension":"pde"}},{"node":{"name":"splitTokens_1","internal":{"content":"// Despite the bad formatting, the data is parsed correctly.\n// The \", \" as delimiter means to break whenever a comma *or*\n// a space is found in the String. Unlike the split() function, \n// multiple adjacent delimiters are treated as a single break.\nString s = \"a, b c ,,d \"; \nString[] q = splitTokens(s, \", \");\nprintln(q.length + \" values found\");  // Prints \"4 values found\"\nprintln(q[0]);  // Prints \"a\"\nprintln(q[1]);  // Prints \"b\"\nprintln(q[2]);  // Prints \"c\"\nprintln(q[3]);  // Prints \"d\"\n"},"extension":"pde"}}]}} ''',
    'split_':
        r''' {"json":{"name":"split()","description":"The <b>split()</b> function breaks a String into pieces using a character\n or string as the delimiter. The <b>delim</b> parameter specifies the\n character or characters that mark the boundaries between each piece. A\n String[] array is returned that contains each of the pieces. <br />\n <br />\n If the result is a set of numbers, you can convert the String[] array to a\n float[] or int[] array using the datatype conversion functions <b>int()</b>\n and <b>float()</b>. (See the second example above.) <br />\n <br />\n The <b>splitTokens()</b> function works in a similar fashion, except that\n it splits using a range of characters instead of a specific character or\n sequence. <!-- <br />\n <br />\n This function uses regular expressions to determine how the <b>delim</b>\n parameter divides the <b>str</b> parameter. Therefore, if you use\n characters such parentheses and brackets that are used with regular\n expressions as a part of the <b>delim</b> parameter, you'll need to put two\n backslashes (\\\\\\\\) in front of the character (see example above). You can\n read more about\n <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular\n expressions</a> and\n <a href=\"http://en.wikipedia.org/wiki/Escape_character\">escape\n characters</a> on Wikipedia. -->","syntax":["split(value, delim)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"value","description":"the String to be split","type":["String"]},{"name":"delim","description":"the character or String used to separate the data","type":["char","String"]}],"related":[],"returns":"String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"split_0","internal":{"content":"String men = \"Chernenko,Andropov,Brezhnev\";\nString[] list = split(men, ',');\n// list[0] is now \"Chernenko\", list[1] is \"Andropov\"...\n"},"extension":"pde"}},{"node":{"name":"split_1","internal":{"content":"String numbers = \"8 67 5 309\";\nint[] nums = int(split(numbers, ' '));\n// nums[0] is now 8, nums[1] is now 67...\n"},"extension":"pde"}},{"node":{"name":"split_2","internal":{"content":"String men = \"Chernenko ] Andropov ] Brezhnev\";\nString[] list = split(men, \" ] \");\n// list[0] is now \"Chernenko\", list[1] is \"Andropov\"...\n"},"extension":"pde"}}]}} ''',
    'spotLight_':
        r''' {"json":{"name":"spotLight()","description":"Adds a spot light. Lights need to be included in the <b>draw()</b> to remain\n persistent in a looping program. Placing them in the <b>setup()</b> of a\n looping program will cause them to only have an effect the first time through\n the loop. The <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters are interpreted\n as either RGB or HSB values, depending on the current color mode. The\n <b>x</b>, <b>y</b>, and <b>z</b> parameters specify the position of the light\n and <b>nx</b>, <b>ny</b>, <b>nz</b> specify the direction of light. The\n <b>angle</b> parameter affects angle of the spotlight cone, while\n <b>concentration</b> sets the bias of light focusing toward the center of\n that cone.","syntax":["spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration)"],"category":"lights_camera","subcategory":"lights","parameters":[{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color\n                      mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color\n                      mode)","type":["float"]},{"name":"x","description":"x-coordinate of the light","type":["float"]},{"name":"y","description":"y-coordinate of the light","type":["float"]},{"name":"z","description":"z-coordinate of the light","type":["float"]},{"name":"nx","description":"direction along the x axis","type":["float"]},{"name":"ny","description":"direction along the y axis","type":["float"]},{"name":"nz","description":"direction along the z axis","type":["float"]},{"name":"angle","description":"angle of the spotlight cone","type":["float"]},{"name":"concentration","description":"exponent determining the center bias of the cone","type":["float"]}],"related":["lights_","directionalLight_","pointLight_","ambientLight_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"spotLight_0","internal":{"content":"size(400, 400, P3D);\nbackground(0);\nnoStroke();\nspotLight(51, 102, 126, 320, 80, 160, -1, 0, 0, PI/2, 2);\ntranslate(80, 200, 0);\nsphere(120);"},"extension":"pde"}},{"node":{"name":"spotLight_1","internal":{"content":"size(400, 400, P3D); \nint concentration = 600;  // Try 1 -> 10000\nbackground(0); \nnoStroke(); \nspotLight(51, 102, 126, 200, 200, 1600, \n          0, 0, -1, PI/16, concentration); \ntranslate(320, 200, 0); \nsphere(120);"},"extension":"pde"}}]}} ''',
    'sq_':
        r''' {"json":{"name":"sq()","description":"Squares a number (multiplies a number by itself). The result is always a\n positive number, as multiplying two negative numbers always yields a\n positive result. For example, <b>-1 * -1 = 1.</b>","syntax":["sq(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"number to square","type":["float"]}],"related":["sqrt_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"sq_","internal":{"content":"size(400, 400);\nnoStroke();\nfloat a = sq(4);   // Sets 'a' to 16\nfloat b = sq(-10);  // Sets 'b' to 100\nfloat c = sq(18);   // Sets 'c' to 324\nrect(0, 100, a, 40);\nrect(0, 180, b, 40);\nrect(0, 260, c, 40);"},"extension":"pde"}}]}} ''',
    'sqrt_':
        r''' {"json":{"name":"sqrt()","description":"Calculates the square root of a number. The square root of a number is\n always positive, even though there may be a valid negative root. The\n square root <b>s</b> of number <b>a</b> is such that <b>s*s = a</b>. It\n is the opposite of squaring.","syntax":["sqrt(n)"],"category":"math","subcategory":"calculation","parameters":[{"name":"n","description":"non-negative number","type":["float"]}],"related":["pow_","sq_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"sqrt_","internal":{"content":"size(400, 400);\nnoStroke();\nfloat a = sqrt(104976);   // Sets 'a' to 324\nfloat b = sqrt(10000);  // Sets 'b' to 100\nfloat c = sqrt(256);   // Sets 'c' to 16\nrect(0, 100, a, 40);\nrect(0, 180, b, 40);\nrect(0, 260, c, 40);"},"extension":"pde"}}]}} ''',
    'square_':
        r''' {"json":{"name":"square()","description":"Draws a square to the screen. A square is a four-sided shape with\n every angle at ninety degrees and each side is the same length.\n By default, the first two parameters set the location of the\n upper-left corner, the third sets the width and height. The way\n these parameters are interpreted, however, may be changed with the\n <b>rectMode()</b> function.","syntax":["square(x, y, extent)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x","description":"x-coordinate of the rectangle by default","type":["float"]},{"name":"y","description":"y-coordinate of the rectangle by default","type":["float"]},{"name":"extent","description":"width and height of the rectangle by default","type":["float"]}],"related":["rect_","rectMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"square_0","internal":{"content":"square(120, 100, 220);"},"extension":"pde"}}]}} ''',
    'static':
        r''' {"json":{"name":"static","description":"Keyword used to define a variable as a \"class variable\" and a method as a \"class method.\" When a variable is declared with the <b>static</b> keyword, all instances of that class share the same variable. When a class is defined with the <b>static</b> keyword, it's methods can be used without making an instance of the class. The above examples demonstrate each of these uses.<br />\n<br />\nThis keyword is an essential part of Java programming and is not usually used with Processing. Consult a Java language reference or tutorial for more information. \n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"static_0","internal":{"content":"void setup() {\n  MiniClass mc1 = new MiniClass();\n  MiniClass mc2 = new MiniClass();\n  println( mc1.y );   // Prints \"10\" to the console\n  MiniClass.y += 10;  // The 'y' variable is shared by 'mc1' and 'mc2'\n  println( mc1.y );   // Prints \"20\" to the console\n  println( mc2.y );   // Prints \"20\" to the console\n}\n\nstatic class MiniClass {\n  static int y = 10;  // Class variable\n}\n"},"extension":"pde"}},{"node":{"name":"static_1","internal":{"content":"void setup() {\n  println(MiniClass.add(3, 4));  // Prints \"7\" to the console\n}\n\nstatic class MiniClass {\n  static int add(int x, int y) {\n    return(x + y);\n  } \n}\n"},"extension":"pde"}}]}} ''',
    'strconvert_':
        r''' {"json":{"name":"str()","description":"Converts a value of a primitive data type (<b>boolean</b>, <b>byte</b>, <b>char</b>, <b>int</b>, or <b>float</b>) to its <b>String</b> representation. For example, converting an integer with <b>str(3)</b> will return the <b>String</b> value of <b>\"3\"</b>, converting a float with <b>str(-12.6)</b> will return <b>\"-12.6\"</b>, and converting a boolean with <b>str(true)</b> will return <b>\"true\"</b>.<br />\n<br />\nWhen an array of values is passed in, then a <b>String</b> array of the same length is returned.\n","syntax":[],"category":"Data","subcategory":"Conversion","parameters":[],"related":[],"returns":null,"classanchor":null},"pdes":{"edges":[{"node":{"name":"strconvert_0","internal":{"content":"boolean b = false;\nbyte y = -28;\nchar c = 'R';\nfloat f = -32.6;\nint i = 1024;\n\nString sb = str(b);\nString sy = str(y); \nString sc = str(c);\nString sf = str(f);\nString si = str(i);\n\nsb = sb + sy + sc + sf + si;\n\nprintln(sb);  // Prints 'false-28R-32.61024'\n"},"extension":"pde"}}]}} ''',
    'strokeCap_':
        r''' {"json":{"name":"strokeCap()","description":"Sets the style for rendering line endings. These ends are either squared,\n extended, or rounded, each of which specified with the corresponding\n parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND. <br />\n <br />\n To make <b>point()</b> appear square, use <b>strokeCap(PROJECT)</b>. Using\n <b>strokeCap(SQUARE)</b> (no cap) causes points to become invisible.","syntax":["strokeCap(cap)"],"category":"shape","subcategory":"attributes","parameters":[{"name":"cap","description":"either SQUARE, PROJECT, or ROUND","type":["int"]}],"related":["stroke_","strokeWeight_","strokeJoin_","size_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"strokeCap_","internal":{"content":"size(400, 400);\nstrokeWeight(48.0);\nstrokeCap(ROUND);\nline(80, 120, 320, 120);\nstrokeCap(SQUARE);\nline(80, 200, 320, 200);\nstrokeCap(PROJECT);\nline(80, 280, 320, 280);"},"extension":"pde"}}]}} ''',
    'strokeJoin_':
        r''' {"json":{"name":"strokeJoin()","description":"Sets the style of the joints which connect line segments. These joints are\n either mitered, beveled, or rounded and specified with the corresponding\n parameters MITER, BEVEL, and ROUND. The default joint is MITER.","syntax":["strokeJoin(join)"],"category":"shape","subcategory":"attributes","parameters":[{"name":"join","description":"either MITER, BEVEL, ROUND","type":["int"]}],"related":["stroke_","strokeWeight_","strokeCap_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"strokeJoin_0","internal":{"content":"size(400, 400);\nnoFill();\nstrokeWeight(40.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(140, 80);\nvertex(260, 200);\nvertex(140, 320);\nendShape();"},"extension":"pde"}},{"node":{"name":"strokeJoin_1","internal":{"content":"size(400, 400);\nnoFill();\nstrokeWeight(40.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(140, 80);\nvertex(260, 200);\nvertex(140, 320);\nendShape();"},"extension":"pde"}},{"node":{"name":"strokeJoin_2","internal":{"content":"size(400, 400);\nnoFill();\nstrokeWeight(40.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(140, 80);\nvertex(260, 200);\nvertex(140, 320);\nendShape();"},"extension":"pde"}}]}} ''',
    'strokeWeight_':
        r''' {"json":{"name":"strokeWeight()","description":"Sets the width of the stroke used for lines, points, and the border around\n shapes. All widths are set in units of pixels. <br />\n <br />\n Using point() with strokeWeight(1) or smaller may draw nothing to the screen,\n depending on the graphics settings of the computer. Workarounds include\n setting the pixel using <b>set()</s> or drawing the point using either\n <b>circle()</b> or <b>square()</b>.","syntax":["strokeWeight(weight)"],"category":"shape","subcategory":"attributes","parameters":[{"name":"weight","description":"the weight (in pixels) of the stroke","type":["float"]}],"related":["stroke_","strokeJoin_","strokeCap_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"strokeWeight_","internal":{"content":"size(400, 400);\nstrokeWeight(4);  // Default\nline(80, 80, 320, 80);\nstrokeWeight(16);  // Thicker\nline(80, 160, 320, 160);\nstrokeWeight(40);  // Beastly\nline(80, 280, 320, 280);"},"extension":"pde"}}]}} ''',
    'stroke_':
        r''' {"json":{"name":"stroke()","description":"Sets the color used to draw lines and borders around shapes. This color is\n either specified in terms of the RGB or HSB color depending on the current\n <b>colorMode().</b> The default color space is RGB, with each value in the\n range from 0 to 255. <br />\n <br />\n When using hexadecimal notation to specify a color, use \"<b>#</b>\" or\n \"<b>0x</b>\" before the values (e.g., <b>#CCFFAA</b> or <b>0xFFCCFFAA</b>).\n The <b>#</b> syntax uses six digits to specify a color (just as colors are\n typically specified in HTML and CSS). When using the hexadecimal notation\n starting with \"<b>0x</b>\", the hexadecimal value must be specified with eight\n characters; the first two characters define the alpha component, and the\n remainder define the red, green, and blue components. <br />\n <br />\n The value for the gray parameter must be less than or equal to the current\n maximum value as specified by <b>colorMode()</b>. The default maximum value\n is 255. <br />\n <br />\n When drawing in 2D with the default renderer, you may need\n <b>hint(ENABLE_STROKE_PURE)</b> to improve drawing quality (at the expense of\n performance). See the hint() documentation for more details.","syntax":["stroke(rgb)","stroke(rgb, alpha)","stroke(gray)","stroke(gray, alpha)","stroke(v1, v2, v3)","stroke(v1, v2, v3, alpha)"],"category":"color","subcategory":"setting","parameters":[{"name":"rgb","description":"color value in hexadecimal notation","type":["int"]},{"name":"alpha","description":"opacity of the stroke","type":["float"]},{"name":"gray","description":"specifies a value between white and black","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["noStroke_","strokeWeight_","strokeJoin_","strokeCap_","fill_","noFill_","tint_","background_","colorMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"stroke_0","internal":{"content":"size(400, 400);\nstroke(153);\nrect(120, 80, 220, 220);"},"extension":"pde"}},{"node":{"name":"stroke_1","internal":{"content":"size(400, 400);\nstroke(204, 102, 0);\nrect(120, 80, 220, 220);"},"extension":"pde"}}]}} ''',
    'subset_':
        r''' {"json":{"name":"subset()","description":"Extracts an array of elements from an existing array. The <b>list</b>\n parameter defines the array from which the elements will be copied, and the\n <b>start</b> and <b>count</b> parameters specify which elements to extract.\n If no <b>count</b> is given, elements will be extracted from the\n <b>start</b> to the end of the array. When specifying the <b>start</b>,\n remember that the first array element is 0. This function does not change\n the source array.<br />\n <br />\n When using an array of objects, the data returned from the function must be\n cast to the object array's data type. For example: <em>SomeClass[] items =\n (SomeClass[]) subset(originalArray, 0, 4)</em>","syntax":["subset(list, start)","subset(list, start, count)"],"category":"data","subcategory":"array functions","parameters":[{"name":"list","description":"array to extract from","type":["boolean[]","Object","byte[]","char[]","int[]","long[]","float[]","double[]","String[]"]},{"name":"start","description":"position to begin","type":["int"]},{"name":"count","description":"number of values to extract","type":["int"]}],"related":["splice_"],"returns":"boolean[], byte[], char[], int[], long[], float[], double[], String[], or Object","classanchor":null},"pdes":{"edges":[{"node":{"name":"subset_0","internal":{"content":"String[] sa1 = { \"OH\", \"NY\", \"CA\", \"VA\", \"CO\", \"IL\" };\nString[] sa2 = subset(sa1, 1);\nprintln(sa2);\n// Prints the following array contents to the console:\n// [0] \"NY\"\n// [1] \"CA\"\n// [2] \"VA\"\n// [3] \"CO\"\n// [4] \"IL\"\nprintln();\nString[] sa3 = subset(sa1, 2, 3);\nprintln(sa3);\n// Prints the following array contents to the console:\n// [0] \"CA\"\n// [1] \"VA\"\n// [2] \"CO\"\n"},"extension":"pde"}}]}} ''',
    'subtractassign':
        r''' {"json":{"name":"-= (subtract assign)","description":"Combines subtraction with assignment. The expression <b>a -= b</b> is equivalent to <b>a = a - b</b>. \n","syntax":["value1 -= value2"],"category":"math","subcategory":"Operators","parameters":[{"name":"value1","description":"int or float","type":[]},{"name":"value2","description":"int or float","type":[]}],"related":["addassign","minus"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"subtractassign_0","internal":{"content":"int a = 50;\nint b = 23;\na -= b;  // Sets 'a' to 27\n"},"extension":"pde"}}]}} ''',
    'super':
        r''' {"json":{"name":"super","description":"Keyword used to reference the superclass of a subclass.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["class","extends"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"super_0","internal":{"content":"// This example is a code fragment;\n// it will not compile on its own.\n\n// Create the DragDrop subclass from\n// the Button class. Button becomes\n// the superclass of DragDrop.\nclass DragDrop extends Button {\n  int xoff, yoff;\n  DragDrop(int x, int y) {\n    // Runs the superclass' constructor\n    super(x, y);\n  }\n  void press(int mx, int my) {\n    // Runs the superclass' press() method\n    super.press();  \n    xoff = mx;\n    yoff = my;  \n  }\n}\n\n"},"extension":"pde"}}]}} ''',
    'switch':
        r''' {"json":{"name":"switch","description":"Works like an <b>if else</b> structure, but <b>switch</b> is more convenient when you need to select between three or more alternatives. Program controls jumps to the case with the same value as the expression. All remaining statements in the switch are executed unless redirected by a <b>break</b>. Only primitive datatypes which can convert to an integer (byte, char, and int) may be used as the <b>expression</b> parameter. The default is optional.\n","syntax":["switch(expression)","{","  case name: ","     statements          ","  case name:          // Optional","     statements        // \"","  default:             // \"","     statements        // \"","}"],"category":"Control","subcategory":"Conditionals","parameters":[{"name":"expression","description":"byte, char, or int","type":[]},{"name":"name","description":"byte, char, or int","type":[]},{"name":"statements","description":"one or more statements to be executed","type":[]}],"related":["case","default","break","if","else"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"switch_0","internal":{"content":"int num = 1;\n\nswitch(num) {\n  case 0: \n    println(\"Zero\");  // Does not execute\n    break;\n  case 1: \n    println(\"One\");  // Prints \"One\"\n    break;\n}\n"},"extension":"pde"}},{"node":{"name":"switch_1","internal":{"content":"char letter = 'N';\n\nswitch(letter) {\n  case 'A': \n    println(\"Alpha\");  // Does not execute\n    break;\n  case 'B': \n    println(\"Bravo\");  // Does not execute\n    break;\n  default:             // Default executes if the case names\n    println(\"None\");   // don't match the switch parameter\n    break;\n}\n"},"extension":"pde"}},{"node":{"name":"switch_2","internal":{"content":"// Removing a \"break\" enables testing\n// for more than one value at once\n\nchar letter = 'b';\n\nswitch(letter) {\n  case 'a':\n  case 'A': \n    println(\"Alpha\");  // Does not execute\n    break;\n  case 'b':\n  case 'B': \n    println(\"Bravo\");  // Prints \"Bravo\"\n    break;\n}\n"},"extension":"pde"}}]}} ''',
    'tan_':
        r''' {"json":{"name":"tan()","description":"Calculates the ratio of the sine and cosine of an angle. This function\n expects the values of the <b>angle</b> parameter to be provided in\n radians (values from 0 to PI*2). Values are returned in the range\n <b>infinity</b> to <b>-infinity</b>.","syntax":["tan(angle)"],"category":"math","subcategory":"trigonometry","parameters":[{"name":"angle","description":"an angle in radians","type":["float"]}],"related":["cos_","sin_","radians_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"tan_","internal":{"content":"size(400, 400);\n\nfloat a = 0.0;\nfloat inc = TWO_PI/50.0;\n\nfor (int i = 0; i <= 400; i = i+8) {\n  line(i, 200, i, 200+tan(a)*8.0);\n  a = a + inc;\n}"},"extension":"pde"}}]}} ''',
    'textAlign_':
        r''' {"json":{"name":"textAlign()","description":"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and\n RIGHT set the display characteristics of the letters in relation to the\n values for the <b>x</b> and <b>y</b> parameters of the <b>text()</b>\n function. <br />\n <br />\n An optional second parameter can be used to vertically align the text.\n BASELINE is the default, and the vertical alignment will be reset to BASELINE\n if the second parameter is not used. The TOP and CENTER parameters are\n straightforward. The BOTTOM parameter offsets the line based on the current\n <b>textDescent()</b>. For multiple lines, the final line will be aligned to\n the bottom, with the previous lines appearing above it. <br />\n <br />\n When using <b>text()</b> with width and height parameters, BASELINE is\n ignored, and treated as TOP. (Otherwise, text would by default draw outside\n the box, since BASELINE is the default setting. BASELINE is not a useful\n drawing mode for text drawn in a rectangle.) <br />\n <br />\n The vertical alignment is based on the value of <b>textAscent()</b>, which\n many fonts do not specify correctly. It may be necessary to use a hack and\n offset by a few pixels by hand so that the offset looks correct. To do this\n as less of a hack, use some percentage of <b>textAscent()</b> or\n <b>textDescent()</b> so that the hack works even if you change the size of\n the font.","syntax":["textAlign(alignX)","textAlign(alignX, alignY)"],"category":"typography","subcategory":"attributes","parameters":[{"name":"alignX","description":"horizontal alignment, either LEFT, CENTER, or RIGHT","type":["int"]},{"name":"alignY","description":"vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE","type":["int"]}],"related":["loadFont_","PFont","text_","textSize_","textAscent_","textDescent_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textAlign_0","internal":{"content":"size(400, 400);\nbackground(0);\ntextSize(64);\ntextAlign(RIGHT);\ntext(\"ABCD\", 200, 120);\ntextAlign(CENTER);\ntext(\"EFGH\", 200, 200);\ntextAlign(LEFT);\ntext(\"IJKL\", 200, 280);"},"extension":"pde"}},{"node":{"name":"textAlign_1","internal":{"content":"size(400, 400);\nbackground(0);\nstroke(153);\ntextSize(44);\ntextAlign(CENTER, BOTTOM);\nline(0, 120, width, 120);\ntext(\"CENTER,BOTTOM\", 200, 120);\ntextAlign(CENTER, CENTER);\nline(0, 200, width, 200);\ntext(\"CENTER,CENTER\", 200, 200);\ntextAlign(CENTER, TOP);\nline(0, 280, width, 280);\ntext(\"CENTER,TOP\", 200, 280);"},"extension":"pde"}}]}} ''',
    'textAscent_':
        r''' {"json":{"name":"textAscent()","description":"Returns ascent of the current font at its current size. This information is\n useful for determining the height of the font above the baseline.","syntax":["textAscent()"],"category":"typography","subcategory":"metrics","parameters":[],"related":["textDescent_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"textAscent_","internal":{"content":"size(400, 400);\nfloat base = height * 0.75;\nfloat scalar = 0.8; // Different for each font\n\ntextSize(128);  // Set initial text size\nfloat a = textAscent() * scalar;  // Calc ascent\nline(0, base-a, width, base-a);\ntext(\"dp\", 0, base);  // Draw text on baseline\n\ntextSize(256);  // Increase text size\na = textAscent() * scalar;  // Recalc ascent\nline(160, base-a, width, base-a);\ntext(\"dp\", 160, base);  // Draw text on baseline"},"extension":"pde"}}]}} ''',
    'textDescent_':
        r''' {"json":{"name":"textDescent()","description":"Returns descent of the current font at its current size. This information is\n useful for determining the height of the font below the baseline.","syntax":["textDescent()"],"category":"typography","subcategory":"metrics","parameters":[],"related":["textAscent_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"textDescent_","internal":{"content":"size(400, 400);\nfloat base = height * 0.75;\nfloat scalar = 0.8; // Different for each font\n\ntextSize(128);  // Set initial text size\ntextSize(128);  // Set initial text size\nfloat a = textDescent() * scalar;  // Calc ascent\nline(0, base+a, width, base+a);\ntext(\"dp\", 0, base);  // Draw text on baseline\n\ntextSize(256);  // Increase text size\na = textDescent() * scalar;  // Recalc ascent\nline(160, base+a, width, base+a);\ntext(\"dp\", 160, base);  // Draw text on baseline"},"extension":"pde"}}]}} ''',
    'textFont_':
        r''' {"json":{"name":"textFont()","description":"Sets the current font that will be drawn with the <b>text()</b> function.\n Fonts must be created for Processing with <b>createFont()</b> or loaded with\n <b>loadFont()</b> before they can be used. The font set through\n <b>textFont()</b> will be used in all subsequent calls to the <b>text()</b>\n function. If no <b>size</b> parameter is specified, the font size defaults to\n the original size (the size in which it was created with the \"Create Font...\"\n tool) overriding any previous calls to <b>textFont()</b> or\n <b>textSize()</b>.<br />\n <br />\n When fonts are rendered as an image texture (as is the case with the P2D and\n P3D renderers as well as with <b>loadFont()</b> and vlw files), you should\n create fonts at the sizes that will be used most commonly. Using\n <b>textFont()</b> without the size parameter will result in the cleanest\n type.<br />\n <br />","syntax":["textFont(which)","textFont(which, size)"],"category":"typography","subcategory":"loading & displaying","parameters":[{"name":"which","description":"any variable of the type PFont","type":["PFont"]},{"name":"size","description":"the size of the letters in units of pixels","type":["float"]}],"related":["createFont_","loadFont_","PFont","text_","textSize_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textFont_","internal":{"content":"size(400,400);\nPFont mono;\n// The font \"andalemo.ttf\" must be located in the \n// current sketch's \"data\" directory to load successfully\nmono = createFont(\"andalemo.ttf\", 128);\nbackground(0);\ntextFont(mono);\ntext(\"word\", 48, 240);"},"extension":"pde"}}]}} ''',
    'textLeading_':
        r''' {"json":{"name":"textLeading()","description":"Sets the spacing between lines of text in units of pixels. This setting will\n be used in all subsequent calls to the <b>text()</b> function. Note, however,\n that the leading is reset by <b>textSize()</b>. For example, if the leading\n is set to 20 with <b>textLeading(20)</b>, then if <b>textSize(48)</b> is run\n at a later point, the leading will be reset to the default for the text size\n of 48.","syntax":["textLeading(leading)"],"category":"typography","subcategory":"attributes","parameters":[{"name":"leading","description":"the size in pixels for spacing between lines","type":["float"]}],"related":["loadFont_","text_","textFont_","textSize_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textLeading_","internal":{"content":"size(400, 400);\n\n// Text to display. The \"\\n\" is a \"new line\" character\nString lines = \"L1\\nL2\\nL3\";\ntextSize(48);\nfill(0);  // Set fill to black\n\ntextLeading(40);  // Set leading to 40\ntext(lines, 40, 100);\n\ntextLeading(80);  // Set leading to 80\ntext(lines, 160, 100);\n\ntextLeading(120);  // Set leading to 120\ntext(lines, 280, 100);"},"extension":"pde"}}]}} ''',
    'textMode_':
        r''' {"json":{"name":"textMode()","description":"Sets the way text draws to the screen, either as texture maps or as vector\n geometry. The default <b>textMode(MODEL)</b>, uses textures to render the\n fonts. The <b>textMode(SHAPE)</b> mode draws text using the glyph outlines of\n individual characters rather than as textures. This mode is only supported\n with the <b>PDF</b> and <b>P3D</b> renderer settings. With the <b>PDF</b>\n renderer, you must call <b>textMode(SHAPE)</b> before any other drawing\n occurs. If the outlines are not available, then <b>textMode(SHAPE)</b> will\n be ignored and <b>textMode(MODEL)</b> will be used instead.<br />\n <br />\n The <b>textMode(SHAPE)</b> option in <b>P3D</b> can be combined with\n <b>beginRaw()</b> to write vector-accurate text to 2D and 3D output files,\n for instance <b>DXF</b> or <b>PDF</b>. The <b>SHAPE</b> mode is not currently\n optimized for <b>P3D</b>, so if recording shape data, use\n <b>textMode(MODEL)</b> until you're ready to capture the geometry with\n <b>beginRaw()</b>.","syntax":["textMode(mode)"],"category":"typography","subcategory":"attributes","parameters":[{"name":"mode","description":"either MODEL or SHAPE","type":["int"]}],"related":["loadFont_","text_","textFont_","beginRaw_","createFont_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textMode_0","internal":{"content":"import processing.pdf.*;\n\nvoid setup() {\n  size(500, 500, PDF, \"TypeDemo.pdf\");\n  textMode(SHAPE);\n  textSize(180);\n}\n\nvoid draw() {\n  text(\"ABC\", 75, 350);\n  exit();  // Quit the program\n}\n"},"extension":"pde"}}]}} ''',
    'textSize_':
        r''' {"json":{"name":"textSize()","description":"Sets the current font size. This size will be used in all subsequent\n calls to the <b>text()</b> function. Font size is measured in units of pixels.","syntax":["textSize(size)"],"category":"typography","subcategory":"attributes","parameters":[{"name":"size","description":"the size of the letters in units of pixels","type":["float"]}],"related":["loadFont_","text_","textFont_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textSize_","internal":{"content":"size(400, 400);\nbackground(0);\nfill(255);\ntextSize(104); \ntext(\"WORD\", 40, 200); \ntextSize(56);\ntext(\"WORD\", 40, 280);"},"extension":"pde"}}]}} ''',
    'textWidth_':
        r''' {"json":{"name":"textWidth()","description":"Calculates and returns the width of any character or text string.","syntax":["textWidth(c)","textWidth(str)"],"category":"typography","subcategory":"attributes","parameters":[{"name":"c","description":"the character to measure","type":["char"]},{"name":"str","description":"the String of characters to measure","type":["String"]}],"related":["loadFont_","text_","textFont_","textSize_"],"returns":"float","classanchor":null},"pdes":{"edges":[{"node":{"name":"textWidth_","internal":{"content":"size(400, 400);\ntextSize(112);\n\nchar c = 'T';\nfloat cw = textWidth(c);\ntext(c, 0, 160);\nline(cw, 0, cw, 200); \n\nString s = \"Tokyo\";\nfloat sw = textWidth(s);\ntext(s, 0, 340);\nline(sw, 200, sw, 400);"},"extension":"pde"}}]}} ''',
    'text_':
        r''' {"json":{"name":"text()","description":"Draws text to the screen. Displays the information specified in the first\n parameter on the screen in the position specified by the additional\n parameters. A default font will be used unless a font is set with the\n <b>textFont()</b> function and a default size will be used unless a font is\n set with <b>textSize()</b>. Change the color of the text with the\n <b>fill()</b> function. The text displays in relation to the\n <b>textAlign()</b> function, which gives the option to draw to the left,\n right, and center of the coordinates.<br />\n <br />\n The <b>x2</b> and <b>y2</b> parameters define a rectangular area to display\n within and may only be used with string data. When these parameters are\n specified, they are interpreted based on the current <b>rectMode()</b>\n setting. Text that does not fit completely within the rectangle specified\n will not be drawn to the screen.<br />\n <br />\n Note that Processing now lets you call <b>text()</b> without first specifying\n a PFont with <b>textFont()</b>. In that case, a generic sans-serif font will\n be used instead. (See the third example above.)","syntax":["text(c, x, y)","text(c, x, y, z)","text(str, x, y)","text(chars, start, stop, x, y)","text(str, x, y, z)","text(chars, start, stop, x, y, z)","text(str, x1, y1, x2, y2)","text(num, x, y)","text(num, x, y, z)"],"category":"typography","subcategory":"loading & displaying","parameters":[{"name":"c","description":"the alphanumeric character to be displayed","type":["char"]},{"name":"x","description":"x-coordinate of text","type":["float"]},{"name":"y","description":"y-coordinate of text","type":["float"]},{"name":"z","description":"z-coordinate of text","type":["float"]},{"name":"chars","description":"the alphanumeric symbols to be displayed","type":["char[]"]},{"name":"start","description":"array index at which to start writing characters","type":["int"]},{"name":"stop","description":"array index at which to stop writing characters","type":["int"]},{"name":"x1","description":"by default, the x-coordinate of text, see rectMode() for more info","type":["float"]},{"name":"y1","description":"by default, the y-coordinate of text, see rectMode() for more info","type":["float"]},{"name":"x2","description":"by default, the width of the text box, see rectMode() for more info","type":["float"]},{"name":"y2","description":"by default, the height of the text box, see rectMode() for more info","type":["float"]},{"name":"num","description":"the numeric value to be displayed","type":["float","int"]}],"related":["textAlign_","textFont_","textMode_","textSize_","textLeading_","textWidth_","textAscent_","textDescent_","rectMode_","fill_","String_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"text_0","internal":{"content":"size(400, 400);\ntextSize(128);\ntext(\"word\", 40, 120); \nfill(0, 408, 612);\ntext(\"word\", 40, 240);\nfill(0, 408, 612, 204);\ntext(\"word\", 40, 360);"},"extension":"pde"}},{"node":{"name":"text_1","internal":{"content":"size(400, 400, P3D);\ntextSize(128);\nfill(0, 408, 612, 816);\ntext(\"word\", 48, 180, -120);  // Specify a z-axis value\ntext(\"word\", 48, 240);  // Default depth, no z-value specified"},"extension":"pde"}},{"node":{"name":"text_2","internal":{"content":"size(400, 400);\nString s = \"The quick brown fox jumps over the lazy dog.\";\nfill(200);\ntext(s, 40, 40, 280, 320);  // Text wraps within text box"},"extension":"pde"}}]}} ''',
    'textureMode_':
        r''' {"json":{"name":"textureMode()","description":"Sets the coordinate space for texture mapping. The default mode is\n <b>IMAGE</b>, which refers to the actual coordinates of the image.\n <b>NORMAL</b> refers to a normalized space of values ranging from 0 to 1.\n This function only works with the P2D and P3D renderers.<br />\n <br />\n With <b>IMAGE</b>, if an image is 100 x 200 pixels, mapping the image onto\n the entire size of a quad would require the points (0,0) (100, 0) (100,200)\n (0,200). The same mapping in <b>NORMAL</b> is (0,0) (1,0) (1,1) (0,1).","syntax":["textureMode(mode)"],"category":"image","subcategory":"textures","parameters":[{"name":"mode","description":"either IMAGE or NORMAL","type":["int"]}],"related":["texture_","textureWrap_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textureMode_0","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nPImage img = loadImage(\"shells.jpg\");\nbeginShape();\ntexture(img);\nvertex(40, 80, 0, 0);\nvertex(320, 20, 1, 0);\nvertex(380, 360, 1, 1);\nvertex(160, 380, 0, 1);\nendShape();"},"extension":"pde"}},{"node":{"name":"textureMode_1","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nPImage img = loadImage(\"shells.jpg\");\ntextureMode(IMAGE);\nbeginShape();\ntexture(img);\nvertex(40, 80, 0, 0);\nvertex(320, 20, 400, 0);\nvertex(380, 360, 400, 400);\nvertex(160, 380, 0, 400);\nendShape();"},"extension":"pde"}}]}} ''',
    'textureWrap_':
        r''' {"json":{"name":"textureWrap()","description":"Defines if textures repeat or draw once within a texture map.\n The two parameters are CLAMP (the default behavior) and REPEAT.\n This function only works with the P2D and P3D renderers.","syntax":["textureWrap(wrap)"],"category":"image","subcategory":"textures","parameters":[{"name":"wrap","description":"Either CLAMP (default) or REPEAT","type":["int"]}],"related":["texture_","textureMode_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textureWrap_0","internal":{"content":"PImage img;\n\nvoid setup() {\n  size(300, 300, P2D);\n  img = loadImage(\"berlin-1.jpg\");\n  textureMode(NORMAL);\n}\n\nvoid draw() {\n  background(0);\n  translate(width/2, height/2);\n  rotate(map(mouseX, 0, width, -PI, PI));\n  if (mousePressed) {\n    textureWrap(REPEAT); \n  } else {\n    textureWrap(CLAMP);\n  }\n  beginShape();\n  texture(img);\n  vertex(-100, -100, 0, 0);\n  vertex(100, -100, 2, 0);\n  vertex(100, 100, 2, 2);\n  vertex(-100, 100, 0, 2);\n  endShape();\n}\n"},"extension":"pde"}}]}} ''',
    'texture_':
        r''' {"json":{"name":"texture()","description":"Sets a texture to be applied to vertex points. The <b>texture()</b> function\n must be called between <b>beginShape()</b> and <b>endShape()</b> and before\n any calls to <b>vertex()</b>. This function only works with the P2D and P3D\n renderers.<br />\n <br />\n When textures are in use, the fill color is ignored. Instead, use\n <b>tint()</b> to specify the color of the texture as it is applied to the\n shape.","syntax":["texture(image)"],"category":"image","subcategory":"textures","parameters":[{"name":"image","description":"reference to a PImage object","type":["PImage"]}],"related":["textureMode_","textureWrap_","beginShape_","endShape_","vertex_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"textureMode_","internal":{"content":"size(400, 400, P3D);\nnoStroke();\nPImage img = loadImage(\"shells.jpg\");\ntextureMode(NORMAL); \nbeginShape();\ntexture(img);\nvertex(40, 80, 0, 0);\nvertex(320, 20, 1, 0);\nvertex(380, 360, 1, 1);\nvertex(160, 380, 0, 1);\nendShape();"},"extension":"pde"}}]}} ''',
    'this':
        r''' {"json":{"name":"this","description":"Refers to the current object (i.e., \"this object\"), which will change depending on the context in which <b>this</b> is referenced. In Processing, it's most common to use <b>this</b> to pass a reference from the current object into one of the libraries.<br />\n<br />\nThe keyword <b>this</b> can also be used to reference an object's own method from within itself, but such usage is typically not necessary. For example, if you are calling the <b>filter()</b> method of a <b>PImage</b> object named <b>tree</b> from another object, you would write <b>tree.filter()</b>. To call this method inside the PImage object itself, one could simply write <b>filter()</b> or, more explicitly, <b>this.filter()</b>. The additional level of specificity in <b>this.filter()</b> is not necessary, as it is always implied.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"this_0","internal":{"content":"float ypos = 50;\n\nvoid setup() {\n  size(100, 100);\n  noLoop();\n}\n\nvoid draw() {\n  line(0, 0, 100, ypos);\n  // \"this\" references the Processing sketch,\n  // and is not necessary in this case\n  this.ypos = 100;\n  line(0, 0, 100, ypos);\n}\n\n"},"extension":"pde"}},{"node":{"name":"this_1","internal":{"content":"import processing.video.*;\nMovie myMovie;\n\nvoid setup() {\n  size(200, 200);\n  background(0);\n  // \"this\" references the Processing sketch\n  myMovie = new Movie(this, \"totoro.mov\");\n  myMovie.loop();\n}\n\nvoid draw() {\n  if (myMovie.available()) {\n    myMovie.read();\n  }\n  image(myMovie, 0, 0);\n}\n\n"},"extension":"pde"}}]}} ''',
    'thread_':
        r''' {"json":{"name":"thread()","description":"Processing sketches follow a specific sequence of steps: <b>setup()</b>\n first, followed by <b>draw()</b> over and over and over again in a loop. A\n thread is also a series of steps with a beginning, a middle, and an end. A\n Processing sketch is a single thread, often referred to as the \"Animation\"\n thread. Other threads' sequences, however, can run independently of the\n main animation loop. In fact, you can launch any number of threads at one\n time, and they will all run concurrently. <br />\n <br />\n You cannot draw to the screen from a function called by <b>thread()</b>.\n Because it runs independently, the code will not be synchronized to the\n animation thread, causing strange or at least inconsistent results. Use\n <b>thread()</b> to load files or do other tasks that take time. When the\n task is finished, set a variable that indicates the task is complete, and\n check that from inside your <b>draw()</b> method. <br />\n <br />\n Processing uses threads quite often, such as with library functions like\n <b>captureEvent()</b> and <b>movieEvent()</b>. These functions are\n triggered by a different thread running behind the scenes, and they alert\n Processing whenever they have something to report. This is useful when you\n need to perform a task that takes too long and would slow down the main\n animation's frame rate, such as grabbing data from the network. If a\n separate thread gets stuck or has an error, the entire program won't grind\n to a halt, since the error only stops that individual thread. <br />\n <br />\n Writing your own thread can be a complex endeavor that involves extending\n the Java <a href=\n \"https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html\">Thread</a>\n class. However, the <b>thread()</b> method is a quick and dirty way to\n implement a simple thread in Processing. By passing in a <b>String</b> that\n matches the name of a function declared elsewhere in the sketch, Processing\n will execute that function in a separate thread.","syntax":["thread(name)"],"category":"structure","subcategory":"","parameters":[{"name":"name","description":"name of the function to be executed in a separate thread","type":["String"]}],"related":["setup_","draw_","loop_","noLoop_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"thread_0","internal":{"content":"String time = \"\";\n\nvoid setup() {\n  size(100, 100);\n}\n\nvoid draw() {\n  background(0);\n  // Every 30 frames request new data\n  if (frameCount % 30 == 0) {\n    thread(\"requestData\");\n  }\n  text(time, 10, 50);\n}\n\n// This happens as a separate thread and can take as long as it wants\nvoid requestData() {\n  JSONObject json = loadJSONObject(\"http://time.jsontest.com/\");\n  time = json.getString(\"time\");\n}\n"},"extension":"pde"}}]}} ''',
    'tint_':
        r''' {"json":{"name":"tint()","description":"Sets the fill value for displaying images. Images can be tinted to specified\n colors or made transparent by including an alpha value.<br />\n <br />\n To apply transparency to an image without affecting its color, use white as\n the tint color and specify an alpha value. For instance, <b>tint(255,\n 128)</b> will make an image 50% transparent (assuming the default alpha range\n of 0-255, which can be changed with <b>colorMode()</b>). <br />\n <br />\n When using hexadecimal notation to specify a color, use \"<b>#</b>\" or\n \"<b>0x</b>\" before the values (e.g., <b>#CCFFAA</b> or <b>0xFFCCFFAA</b>).\n The <b>#</b> syntax uses six digits to specify a color (just as colors are\n typically specified in HTML and CSS). When using the hexadecimal notation\n starting with \"<b>0x</b>\", the hexadecimal value must be specified with eight\n characters; the first two characters define the alpha component, and the\n remainder define the red, green, and blue components. <br />\n <br />\n The value for the gray parameter must be less than or equal to the current\n maximum value as specified by <b>colorMode()</b>. The default maximum value\n is 255. <br />\n <br />\n The <b>tint()</b> function is also used to control the coloring of textures\n in 3D.","syntax":["tint(rgb)","tint(rgb, alpha)","tint(gray)","tint(gray, alpha)","tint(v1, v2, v3)","tint(v1, v2, v3, alpha)"],"category":"image","subcategory":"loading & displaying","parameters":[{"name":"rgb","description":"color value in hexadecimal notation","type":["int"]},{"name":"alpha","description":"opacity of the image","type":["float"]},{"name":"gray","description":"specifies a value between white and black","type":["float"]},{"name":"v1","description":"red or hue value (depending on current color mode)","type":["float"]},{"name":"v2","description":"green or saturation value (depending on current color mode)","type":["float"]},{"name":"v3","description":"blue or brightness value (depending on current color mode)","type":["float"]}],"related":["noTint_","image_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"tint_0","internal":{"content":"size(400,400);\nPImage img;\nimg = loadImage(\"yuya-onsen.jpg\");\nimage(img, 0, 0);\ntint(0, 153, 204);  // Tint blue\nimage(img, width/2, 0);\n"},"extension":"pde"}},{"node":{"name":"tint_1","internal":{"content":"size(400,400);\nPImage img;\nimg = loadImage(\"yuya-onsen.jpg\");\nimage(img, 0, 0);\ntint(0, 153, 204, 126);  // Tint blue and set transparency\nimage(img, width/2, 0);\n"},"extension":"pde"}},{"node":{"name":"tint_2","internal":{"content":"size(400,400);\nPImage img;\nimg = loadImage(\"yuya-onsen.jpg\");\nimage(img, 0, 0);\ntint(255, 126);  // Apply transparency without changing color\nimage(img, width/2, 0);\n"},"extension":"pde"}}]}} ''',
    'translate_':
        r''' {"json":{"name":"translate()","description":"Specifies an amount to displace objects within the display window. The\n <b>x</b> parameter specifies left/right translation, the <b>y</b> parameter\n specifies up/down translation, and the <b>z</b> parameter specifies\n translations toward/away from the screen. Using this function with the\n <b>z</b> parameter requires using P3D as a parameter in combination with size\n as shown in the above example. <br />\n <br />\n Transformations are cumulative and apply to everything that happens after and\n subsequent calls to the function accumulates the effect. For example, calling\n <b>translate(50, 0)</b> and then <b>translate(20, 0)</b> is the same as\n <b>translate(70, 0)</b>. If <b>translate()</b> is called within\n <b>draw()</b>, the transformation is reset when the loop begins again. This\n function can be further controlled by using <b>pushMatrix()</b> and\n <b>popMatrix()</b>.","syntax":["translate(x, y)","translate(x, y, z)"],"category":"transform","subcategory":"","parameters":[{"name":"x","description":"left/right translation","type":["float"]},{"name":"y","description":"up/down translation","type":["float"]},{"name":"z","description":"forward/backward translation","type":["float"]}],"related":["popMatrix_","pushMatrix_","rotate_","rotateX_","rotateY_","rotateZ_","scale_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"translate_0","internal":{"content":"size(400, 400);\ntranslate(120, 80);\nrect(0, 0, 220, 220);"},"extension":"pde"}},{"node":{"name":"translate_1","internal":{"content":"// Translating in 3D requires P3D\n// as the parameter to size()\nsize(400, 400, P3D);\n// Translate 30 across, 20 down, and\n// 50 back, or \"away\" from the screen.\ntranslate(120, 80, -200);\nrect(0, 0, 220, 220);"},"extension":"pde"}},{"node":{"name":"translate_2","internal":{"content":"size(400, 400);\nrect(0, 0, 220, 220);  // Draw rect at original 0,0\ntranslate(120, 80);\nrect(0, 0, 220, 220);  // Draw rect at new 0,0\ntranslate(56, 56);\nrect(0, 0, 220, 220);  // Draw rect at new 0,0"},"extension":"pde"}}]}} ''',
    'triangle_':
        r''' {"json":{"name":"triangle()","description":"A triangle is a plane created by connecting three points. The first two\n arguments specify the first point, the middle two arguments specify the\n second point, and the last two arguments specify the third point.","syntax":["triangle(x1, y1, x2, y2, x3, y3)"],"category":"shape","subcategory":"2d primitives","parameters":[{"name":"x1","description":"x-coordinate of the first point","type":["float"]},{"name":"y1","description":"y-coordinate of the first point","type":["float"]},{"name":"x2","description":"x-coordinate of the second point","type":["float"]},{"name":"y2","description":"y-coordinate of the second point","type":["float"]},{"name":"x3","description":"x-coordinate of the third point","type":["float"]},{"name":"y3","description":"y-coordinate of the third point","type":["float"]}],"related":["beginShape_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"triangle_","internal":{"content":"size(400, 400);\ntriangle(120, 300, 232, 80, 344, 300);"},"extension":"pde"}}]}} ''',
    'trim_':
        r''' {"json":{"name":"trim()","description":"Removes whitespace characters from the beginning and end of a String. In\n addition to standard whitespace characters such as space, carriage\n return, and tab, this function also removes the Unicode \"nbsp\" (U+00A0)\n character and the zero width no-break space (U+FEFF) character.","syntax":["trim(str)","trim(array)"],"category":"data","subcategory":"string_functions","parameters":[{"name":"str","description":"any string","type":["String"]},{"name":"array","description":"a String array","type":["String[]"]}],"related":["split_","join_"],"returns":"String or String[]","classanchor":null},"pdes":{"edges":[{"node":{"name":"trim_0","internal":{"content":"String s1 = \"    Somerville MA \";\nprintln(s1);  // Prints \"    Somerville MA \"\nString s2 = trim(s1);\nprintln(s2);  // Prints \"Somerville MA\"\n\nString[] a1 = { \" inconsistent \", \" spacing\" };  // Note spaces\nString[] a2 = trim(a1);\nprintArray(a2);\n// Prints the following array contents to the console:\n// [0] \"inconsistent\"\n// [1] \"spacing\"\n"},"extension":"pde"}},{"node":{"name":"Table_trim_0","internal":{"content":"Table table;\n\nvoid setup() {\n\n  table = new Table();\n\n  table.addColumn(\"name\");\n  table.addColumn(\"type\");\n\n  TableRow newRow = table.addRow();\n  newRow.setString(\"name\", \"   Lion\");\n  newRow.setString(\"type\", \"Mammal\");\n\n  newRow = table.addRow();\n  newRow.setString(\"name\", \"Snake  \");\n  newRow.setString(\"type\", \"Reptile\");\n\n  newRow = table.addRow();\n  newRow.setString(\"name\", \"  Mosquito  \");\n  newRow.setString(\"type\", \"Insect\");\n  \n  println(table.getStringColumn(\"name\"));\n  \n  table.trim();\n  \n  println(table.getStringColumn(\"name\"));\n}\n\n// Sketch prints:\n// [0] \"   Lion\"\n// [1] \"Snake  \"\n// [2] \"  Mosquito  \"\n// [0] \"Lion\"\n// [1] \"Snake\"\n// [2] \"Mosquito\"\n"},"extension":"pde"}}]}} ''',
    'true':
        r''' {"json":{"name":"true","description":"Reserved word representing the logical value \"true\". Only variables of type <b>boolean</b> may be assigned the value <b>true</b>.\n","syntax":[],"category":"structure","subcategory":"","parameters":[],"related":["false","boolean"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"true_0","internal":{"content":"rect(30, 20, 50, 50);\nboolean b = true;\nif (b == true) {\n  line(20, 10, 90, 80);  // This line is drawn\n} else {\n  line(20, 80, 90, 10);  // This line is not drawn\n}\n"},"extension":"pde"}}]}} ''',
    'try':
        r''' {"json":{"name":"try","description":"The <b>try</b> keyword is used with <b>catch</b> to handle exceptions. Sun's Java documentation defines an exception as \"an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.\" This could be, for example, an error while a file is read.\n","syntax":["try {","  tryStatements","} catch (exception) {","  catchStatements","} "],"category":"structure","subcategory":"","parameters":[{"name":"tryStatements","description":"if this code throws an exception, then the code in \"catch\" is run","type":[]},{"name":"exception","description":"the Java exception that was thrown","type":[]},{"name":"catchStatements","description":"code that handles the exception","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"try_0","internal":{"content":"BufferedReader reader;\nString line;\n \nvoid setup() {\n  // Open the file from the createWriter() example\n  reader = createReader(\"positions.txt\");    \n}\n \nvoid draw() {\n  try {\n    line = reader.readLine();\n  } catch (IOException e) {\n    e.printStackTrace();\n    line = null;\n  }\n  if (line == null) {\n    // Stop reading because of an error or file is empty\n    noLoop();  \n  } else {\n    String[] pieces = split(line, TAB);\n    int x = int(pieces[0]);\n    int y = int(pieces[1]);\n    point(x, y);\n  }\n}\n"},"extension":"pde"}}]}} ''',
    'unbinary_':
        r''' {"json":{"name":"unbinary()","description":"Converts a <b>String</b> representation of a binary number to its equivalent\n integer value. For example, <b>unbinary(\"00001000\")</b> will return\n <b>8</b>.","syntax":["unbinary(value)"],"category":"data","subcategory":"conversion","parameters":[{"name":"value","description":"String to convert to an integer","type":["String"]}],"related":["binary_","hex_","unhex_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"unbinary_0","internal":{"content":"String s1 = \"00010000\";\nString s2 = \"00001000\";\nString s3 = \"00000100\";\nprintln(unbinary(s1));  // Prints \"16\"\nprintln(unbinary(s2));  // Prints \"8\"\nprintln(unbinary(s3));  // Prints \"4\"\n"},"extension":"pde"}}]}} ''',
    'unhex_':
        r''' {"json":{"name":"unhex()","description":"Converts a <b>String</b> representation of a hexadecimal number to its\n equivalent integer value.","syntax":["unhex(value)"],"category":"data","subcategory":"conversion","parameters":[{"name":"value","description":"String to convert to an integer","type":["String"]}],"related":["hex_","binary_","unbinary_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"unhex_0","internal":{"content":"String hs = \"FF006699\";\nint hi = unhex(hs);\nfill(hi);\nrect(30, 20, 55, 55);\n"},"extension":"pde"}}]}} ''',
    'updatePixels_':
        r''' {"json":{"name":"updatePixels()","description":"Updates the display window with the data in the <b>pixels[]</b> array. Use\n in conjunction with <b>loadPixels()</b>. If you're only reading pixels from\n the array, there's no need to call <b>updatePixels()</b> &mdash; updating is\n only necessary to apply changes.","syntax":["updatePixels()"],"category":"image","subcategory":"pixels","parameters":[],"related":["loadPixels_","pixels"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"loadPixels_","internal":{"content":"size(400,400);\nPImage img = loadImage(\"mt-fuji.jpg\");\nimage(img, 0, 0);\nint halfImage = img.width * img.height/2;\nloadPixels();\nfor (int i = 0; i < halfImage; i++) {\n  pixels[i+halfImage] = pixels[i];\n}\nupdatePixels();"},"extension":"pde"}}]}} ''',
    'vertex_':
        r''' {"json":{"name":"vertex()","description":"All shapes are constructed by connecting a series of vertices.\n <b>vertex()</b> is used to specify the vertex coordinates for points, lines,\n triangles, quads, and polygons. It is used exclusively within the\n <b>beginShape()</b> and <b>endShape()</b> functions. <br />\n <br />\n Drawing a vertex in 3D using the <b>z</b> parameter requires the P3D\n parameter in combination with size, as shown in the above example. <br />\n <br />\n This function is also used to map a texture onto geometry. The\n <b>texture()</b> function declares the texture to apply to the geometry and\n the <b>u</b> and <b>v</b> coordinates set define the mapping of this texture\n to the form. By default, the coordinates used for <b>u</b> and <b>v</b> are\n specified in relation to the image's size in pixels, but this relation can be\n changed with <b>textureMode()</b>.","syntax":["vertex(x, y)","vertex(x, y, z)","vertex(v)","vertex(x, y, u, v)","vertex(x, y, z, u, v)"],"category":"shape","subcategory":"vertex","parameters":[{"name":"v","description":"vertex parameters, as a float array of length VERTEX_FIELD_COUNT","type":["float[]","float"]},{"name":"x","description":"x-coordinate of the vertex","type":["float"]},{"name":"y","description":"y-coordinate of the vertex","type":["float"]},{"name":"z","description":"z-coordinate of the vertex","type":["float"]},{"name":"u","description":"horizontal coordinate for the texture mapping","type":["float"]},{"name":"v","description":"vertical coordinate for the texture mapping","type":["float","float[]"]}],"related":["beginShape_","endShape_","bezierVertex_","quadraticVertex_","curveVertex_","texture_"],"returns":"void","classanchor":null},"pdes":{"edges":[{"node":{"name":"vertex_0","internal":{"content":"size(400, 400);\nbeginShape(POINTS);\nvertex(120, 80);\nvertex(340, 80);\nvertex(340, 300);\nvertex(120, 300);\nendShape();"},"extension":"pde"}},{"node":{"name":"vertex_1","internal":{"content":"// Drawing vertices in 3D requires P3D\n// as a parameter to size()\nsize(400, 400, P3D);\nbeginShape(POINTS);\nvertex(120, 80, -200);\nvertex(340, 80, -200);\nvertex(340, 300, -200);\nvertex(120, 300, -200);\nendShape();"},"extension":"pde"}},{"node":{"name":"vertex_2","internal":{"content":"size(400, 400, P3D);\nPImage img = loadImage(\"laDefense.jpg\");\nnoStroke();\nbeginShape();\ntexture(img);\n// \"laDefense.jpg\" is 100x100 pixels in size so\n// the values 0 and 400 are used for the\n// parameters \"u\" and \"v\" to map it directly\n// to the vertex points\nvertex(40, 80, 0, 0);\nvertex(320, 20, 100, 0);\nvertex(380, 360, 100, 100);\nvertex(160, 380, 0, 100);\nendShape();"},"extension":"pde"}}]}} ''',
    'void':
        r''' {"json":{"name":"void","description":"Keyword used to indicate that a function returns no value. Each function must either return a value of a specific datatype or use the keyword <b>void</b> to specify it returns nothing.\n","syntax":["void function {","  statements","}"],"category":"structure","subcategory":"","parameters":[{"name":"function","description":"any function that is being defined or implemented","type":[]},{"name":"statements","description":"any valid statements","type":[]}],"related":[],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"void_0","internal":{"content":"void setup() {  // setup() does not return a value\n  size(200, 200);\n}\n\nvoid draw() {  // draw() does not return a value\n  line(10, 100, 190, 100);\n  drawCircle();\n}\n\nvoid drawCircle() {  // This function also does not return a value\n  ellipse(30, 30, 50, 50);\n}\n"},"extension":"pde"}}]}} ''',
    'while':
        r''' {"json":{"name":"while","description":"Controls a sequence of repetitions. The <b>while</b> structure executes a series of statements continuously while the <b>expression</b> is <b>true</b>. The expression must be updated during the repetitions or the program will never \"break out\" of <b>while</b>.\n<br /> <br />\nThis function can be dangerous because the code inside the <b>while</b> loop will not finish until the expression inside <b>while</b> becomes false. It will lock out all other code from running (e.g., mouse and keyboard events will not be updated). Be careful &mdash; if used incorrectly, this can lock up your code (and sometimes even the Processing environment itself).\n","syntax":["while (expression) {","  statements","}"],"category":"Control","subcategory":"Iteration","parameters":[{"name":"expression","description":"a valid expression","type":[]},{"name":"statements","description":"one or more statements","type":[]}],"related":["for"],"returns":"","classanchor":null},"pdes":{"edges":[{"node":{"name":"while","internal":{"content":"size(400, 400);\nint i = 0;\nwhile (i < 320) {\n  line(120, i, 320, i);\n  i = i + 20;\n}"},"extension":"pde"}}]}} ''',
    'width':
        r''' {"json":{"name":"width","classanchor":null,"description":"System variable which stores the width of the display window. This value\n is set by the first parameter of the <b>size()</b> function. For\n example, the function call <b>size(320, 240)</b> sets the <b>width</b>\n variable to the value 320. The value of <b>width</b> defaults to 100 if\n <b>size()</b> is not used in a program.","syntax":null,"category":"environment","subcategory":"","parameters":null,"related":["height","size_"],"returns":null},"pdes":{"edges":[{"node":{"name":"width","internal":{"content":"size(400, 400);\nnoStroke();\nbackground(0);\nrect(0, 160, width, 80);\nrect(0, 240, width/2, 80);"},"extension":"pde"}}]}} ''',
    'year_':
        r''' {"json":{"name":"year()","description":"Processing communicates with the clock on your computer. The\n <b>year()</b> function returns the current year as an integer (2003,\n 2004, 2005, etc).","syntax":["year()"],"category":"input","subcategory":"time date","parameters":[],"related":["millis_","second_","minute_","hour_","day_","month_"],"returns":"int","classanchor":null},"pdes":{"edges":[{"node":{"name":"year_0","internal":{"content":"int d = day();    // Values from 1 - 31\nint m = month();  // Values from 1 - 12\nint y = year();   // 2003, 2004, 2005, etc.\n\nString s = String.valueOf(d);\ntext(s, 10, 28);\ns = String.valueOf(m);\ntext(s, 10, 56); \ns = String.valueOf(y);\ntext(s, 10, 84);\n"},"extension":"pde"}}]}} ''',
  };
}
